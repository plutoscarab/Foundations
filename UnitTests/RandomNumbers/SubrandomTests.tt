<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

/*
SubrandomTests.cs

<#@ include file="../../License.txt" #>

*/

using System;
using System.Collections.Generic;
using System.Linq;
using Foundations.Types;
using Foundations.UnitTesting;

namespace Foundations.RandomNumbers
{
    /// <summary />
    [TestClass]
    public class SubrandomTests
    {
<#
MakeMethod("Double", "D");
MakeMethod("Single", "F");
MakeMethod("Decimal", "M");
MakeMethod("Rational", "R");
#>
    }
}
<#+
void MakeMethod(string T, string suffix)
{
#>
        private <#= T #> StarDiscrepency(List<<#= T #>> s)
        {
            s.Sort();
            <#= T #> d = 0;

            for (int i = 1; i < s.Count; i++)
            {
<#+ if (suffix == "R") { #>
                d = Rational.Max(d, Rational.Abs(i / (<#= T #>)s.Count - s[i]));
<#+ } else { #>
                d = Math.Max(d, Math.Abs(i / (<#= T #>)s.Count - s[i]));
<#+ } #>
            }

            return d;
        }

        private void Test(Generator g, Func<IEnumerable<<#= T #>>> sequence)
        {
            int wins = 0;

            for (int test = 0; test < 10; test++)
            {
                var s1 = sequence().Take(1000).ToList();
                var d1 = StarDiscrepency(s1);
                var s2 = g.<#= suffix == "R" ? "Double" : T #>s().Take(1000).ToList();
                var d2 = StarDiscrepency(s2);
                if (d1 < d2) wins++;
            }

            Assert.IsTrue(wins >= 7);
        }

<#+ if (suffix != "R") { #>
        /// <summary />
        [TestMethod]
	    public void AdditiveRecurrence<#= T #>Test()
        {
            var g = new Generator("AdditiveRecurrence<#= T #>Test");
            Test(g, () => Subrandom.AdditiveRecurrence<#= suffix #>());
        }

        /// <summary />
        [TestMethod]
	    public void AdditiveRecurrenceGenerator<#= T #>Test()
        {
            var g = new Generator("AdditiveRecurrenceGenerator<#= T #>Test");
            Test(g, () => Subrandom.AdditiveRecurrence<#= suffix #>(g));
        }

        /// <summary />
        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
	    public void AdditiveRecurrenceNullGenerator<#= T #>Test()
        {
            Test(null, () => Subrandom.AdditiveRecurrence<#= suffix #>((Generator)null));
        }

        /// <summary />
        [TestMethod]
	    public void AdditiveRecurrenceAlpha<#= T #>Test()
        {
            var g = new Generator("AdditiveRecurrenceAlpha<#= T #>Test");
            Test(g, () => Subrandom.AdditiveRecurrence(g.<#= T #>()));
        }

        /// <summary />
        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
	    public void AdditiveRecurrenceLowAlpha<#= T #>Test()
        {
            Test(null, () => Subrandom.AdditiveRecurrence(0<#= suffix #>));
        }

        /// <summary />
        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
	    public void AdditiveRecurrenceHighAlpha<#= T #>Test()
        {
            Test(null, () => Subrandom.AdditiveRecurrence(1<#= suffix #>));
        }

        /// <summary />
        [TestMethod]
	    public void AdditiveRecurrenceSZeroAlpha<#= T #>Test()
        {
            var g = new Generator("AdditiveRecurrenceSZeroAlpha<#= T #>Test");
            Test(g, () => Subrandom.AdditiveRecurrence(g.<#= T #>(), g.<#= T #>()));
        }

        /// <summary />
        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
	    public void AdditiveRecurrenceSZeroLowAlpha<#= T #>Test()
        {
            Test(null, () => Subrandom.AdditiveRecurrence(-1<#= suffix #>, 0.5<#= suffix #>));
        }

        /// <summary />
        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
	    public void AdditiveRecurrenceSZeroHighAlpha<#= T #>Test()
        {
            Test(null, () => Subrandom.AdditiveRecurrence(1<#= suffix #>, 0.5<#= suffix #>));
        }

        /// <summary />
        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
	    public void AdditiveRecurrenceLowSZero<#= T #>Test()
        {
            Test(null, () => Subrandom.AdditiveRecurrence(0.5<#= suffix #>, 0<#= suffix #>));
        }

        /// <summary />
        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
	    public void AdditiveRecurrenceHighSZero<#= T #>Test()
        {
            Test(null, () => Subrandom.AdditiveRecurrence(0.5<#= suffix #>, 1<#= suffix #>));
        }
<#+ } #>

        /// <summary />
        [TestMethod]
        public void VanDerCorput<#= T #>Base2Test()
        {
            var g = new Generator("VanDerCorput<#= T #>Base2Test");
            Test(g, () => Subrandom.VanDerCorput<#= suffix #>(2));
        }

        /// <summary />
        [TestMethod]
        public void VanDerCorput<#= T #>Base3Test()
        {
            var g = new Generator("VanDerCorput<#= T #>Base3Test");
            Test(g, () => Subrandom.VanDerCorput<#= suffix #>(3));
        }

        /// <summary />
        [TestMethod]
        public void Halton<#= T #>Test()
        {
            var g = new Generator("Halton<#= T #>Test");
            
            foreach (var item in Subrandom.Halton<#= suffix #>(new[] { 2, 3 }).Take(100))
            {
                System.Diagnostics.Trace.WriteLine($"{item[0]}, {item[1]}");
            }
        }

        /// <summary />
        [TestMethod]
        public void Halton<#= T #>PrimesTest()
        {
            var g = new Generator("Halton<#= T #>PrimesTest");
            
            foreach (var item in Subrandom.Halton<#= suffix #>(3).Take(100))
            {
                System.Diagnostics.Trace.WriteLine($"{item[0]}, {item[1]}, {item[2]}");
            }
        }

        /// <summary />
        [TestMethod]
        public void Hammersley<#= T #>PrimesTest()
        {
            var g = new Generator("Hammersley<#= T #>PrimesTest");
            
            foreach (var item in Subrandom.Hammersley<#= suffix #>(2, 256))
            {
                System.Diagnostics.Trace.WriteLine($"{item[0]}, {item[1]}");
            }
        }

        /// <summary />
        [TestMethod]
        public void Sobol<#= T #>Test()
        {
            var p = new PolyGF2(3, 1, 0);
            var m = new[] { 1, 3, 7 };

            foreach (var item in Subrandom.Sobol<#= suffix #>(p, m).Take(1000))
            {
                System.Diagnostics.Trace.WriteLine(item);
            }

            var g = new Generator("Sobol<#= T #>Test");
            Test(g, () => Subrandom.Sobol<#= suffix #>(p, m));
        }

        [TestMethod]
        public void Sobol<#= T #>CodeTest()
        {
            var s = Subrandom.Sobol<#= suffix #>(13, 1, 1, 1, 3, 11);

            foreach (var item in s.Take(1000))
            {
                System.Diagnostics.Trace.WriteLine(item);
            }
        }

<#+
}
#>