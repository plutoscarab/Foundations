<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

/*
MixingFunctionsTests.cs
*/

using System.Collections.Generic;
using Foundations.Functions;

namespace Foundations.RandomNumbers
{
    /// <summary>
    /// 
    /// </summary>
	[TestClass]
	public class MixingFunctionsTests
    {
<#
Make("Byte");
Make("SByte");
Make("Char");
Make("UInt16");
Make("Int16");
Make("UInt32");
Make("Int32");
Make("UInt64");
Make("Int64");
#>

    }
}
<#+
void Make(string T)
{
#>
		[TestMethod]
		public void <#= T #>Test()
		{
			var generator = new Generator("<#= T #>Test");

			for (int t = 0; t < 100; t++)
			{
				var fn = MixingFunctions.Create<#= T #>Mixer(generator);
				var used = new HashSet<<#= T #>>();

				for (int i = 0; i < 256; i++)
				{
					used.Add(fn((<#= T #>)i));
				}

				Assert.AreEqual(256, used.Count);
			}
		}

		[TestMethod]
		public void <#= T #>InverseTest()
		{
			var generator = new Generator("<#= T #>InverseTest");

			for (int t = 0; t < 100; t++)
			{
				var fn = MixingFunctions.Create<#= T #>InverseMixer(generator);
				var used = new HashSet<<#= T #>>();

				for (int i = 0; i < 256; i++)
				{
					used.Add(fn((<#= T #>)i));
				}

				Assert.AreEqual(256, used.Count);
			}
		}

		[TestMethod]
		public void <#= T #>RoundTripTest()
		{
			var generator = new Generator("<#= T #>RoundTripTest");
            var clone = generator.Clone();

			for (int t = 0; t < 100; t++)
			{
				var f = MixingFunctions.Create<#= T #>Mixer(generator);
				var g = MixingFunctions.Create<#= T #>InverseMixer(clone);

				for (int i = 0; i < 256; i++)
				{
					Assert.AreEqual((<#= T #>)i, g(f((<#= T #>)i)));
                    Assert.AreEqual((<#= T #>)i, f(g((<#= T #>)i)));
				}
			}
		}

<#+
}
#>