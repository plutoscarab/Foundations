<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

/*
Generator.cs

<#@ include file="../../License.txt" #>
*/

using Foundations.RandomNumbers;
using Foundations.Types;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Foundations.UnitTests.RandomNumbers
{
    [TestClass]
    public sealed class GeneratorTests
    {
        [TestMethod]
        public void CloneTest()
        {
            var random = new Generator(new XorShiftRandomSource());
            var clone = random.Clone();

            for (int i = 0; i < 100; i++)
            {
                var expected = random.Byte();
                var actual = clone.Byte();
                Assert.AreEqual(expected, actual);
            }
        }

        [TestMethod]
        public void CloneConstructor()
        {
            var random = new Generator(new XorShiftRandomSource());
            var clone = new Generator(random);

            for (int i = 0; i < 100; i++)
            {
                var expected = random.Byte();
                var actual = clone.Byte();
                Assert.AreEqual(expected, actual);
            }
        }

        [TestMethod]
        public void UnclonableTest()
        {
            var random = new Generator(new SystemRandomSource(new Random()));
            Assert.IsNull(random.Clone());
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentException))]
        public void UnclonableException()
        {
            var random = new Generator(new SystemRandomSource(new Random()));
            new Generator(random);
        }
<#
Type("Byte");
Type("SByte");
Type("UInt16");
Type("Int16");
Type("UInt32");
Type("Int32");
Type("UInt64");
Type("Int64");
Type("Single");
Type("Double");
Type("Decimal");
#>

        [TestMethod]
        [ExpectedException(typeof(System.Reflection.TargetInvocationException))]
        public void CreateStateUnsupportedArray()
        {
            var method = typeof(Generator).GetMethod("CreateState", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static, null, new[] { typeof(IRandomSource), typeof(byte[]), typeof(Array) }, null);
            var source = new SHA256RandomSource();
            var seed = new byte[] { 1, 2, 3 };
            Array state = new string[99];
            method.Invoke(null, new object[] { source, seed, state });
        }

        [TestMethod]
        [ExpectedException(typeof(System.Reflection.TargetInvocationException))]
        public void CreateStateUnsupportedObject()
        {
            var method = typeof(Generator).GetMethod("CreateState", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static, null, new[] { typeof(IRandomSource), typeof(byte[]), typeof(Array) }, null);
            var source = new SHA256RandomSource();
            var seed = new byte[] { 1, 2, 3 };
            Array state = new object[99];
            method.Invoke(null, new object[] { source, seed, state });
        }

        [TestMethod]
        public void IndividualValueUnionValues()
        {
            var random = new Generator(Generator.DefaultSourceFactory(), "IndividualValueUnionValues".ToCharArray());
            var data = new ValueUnion[99];

            for (int i = 0; i < data.Length; i++)
                data[i] = random.ValueUnion();

            LooksRandom(data.Select(t => t.UInt64_0).ToArray());
        }

        [TestMethod]
        public void RandomValueUnionArrays()
        {
            var random = new Generator("RandomValueUnions".ToCharArray());

            for (int i = 0; i < 8; i++)
            {
                var data = new ValueUnion[99 + i];
                random.Fill(data);
                LooksRandom(data.Select(t => t.UInt64_0).ToArray());
            }
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void NullValueUnionArray()
        {
            var random = new Generator("RandomValueUnions".ToCharArray());
            ValueUnion[] data = null;
            random.Fill(data);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void NullValueUnionArrayWithOffsetCount()
        {
            var random = new Generator("RandomValueUnions".ToCharArray());
            ValueUnion[] data = null;
            random.Fill(data, 0, 99);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void LowValueUnionArrayOffset()
        {
            var random = new Generator("RandomValueUnions".ToCharArray());
            var data = new ValueUnion[99];
            random.Fill(data, -1, data.Length);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void HighValueUnionArrayOffset()
        {
            var random = new Generator("RandomValueUnions".ToCharArray());
            var data = new ValueUnion[99];
            random.Fill(data, data.Length + 1, 0);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void LowValueUnionArrayCount()
        {
            var random = new Generator("RandomValueUnions".ToCharArray());
            var data = new ValueUnion[99];
            random.Fill(data, 0, -1);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void HighValueUnionArrayCount()
        {
            var random = new Generator("RandomValueUnions".ToCharArray());
            var data = new ValueUnion[99];
            random.Fill(data, 0, data.Length + 1);
        }

        [TestMethod]
        public void CreateValueUnionState()
        {
            var method = typeof(Generator).GetMethod("CreateState", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static, null, new[] { typeof(IRandomSource), typeof(byte[]), typeof(ValueUnion[]) }, null);
            var source = new SHA256RandomSource();
            var seed = new byte[] { 1, 2, 3 };
            var state = new ValueUnion[99];
            method.Invoke(null, new object[] { source, seed, state });
            LooksRandom((state as ValueUnion[]).Select(t => t.UInt64_0).ToArray());
        }

        [TestMethod]
        public void CreateValueUnionStateWeaklyTyped()
        {
            var method = typeof(Generator).GetMethod("CreateState", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static, null, new[] { typeof(IRandomSource), typeof(byte[]), typeof(Array) }, null);
            var source = new SHA256RandomSource();
            var seed = new byte[] { 1, 2, 3 };
            Array state = new ValueUnion[99];
            method.Invoke(null, new object[] { source, seed, state });
            LooksRandom((state as ValueUnion[]).Select(t => t.UInt64_0).ToArray());
        }

        [TestMethod]
        [ExpectedException(typeof(System.Reflection.TargetInvocationException))]
        public void CreateValueUnionStateNullSource()
        {
            var method = typeof(Generator).GetMethod("CreateState", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static, null, new[] { typeof(IRandomSource), typeof(byte[]), typeof(ValueUnion[]) }, null);
            IRandomSource source = null;
            var seed = new byte[] { 1, 2, 3 };
            var state = new ValueUnion[99];
            method.Invoke(null, new object[] { source, seed, state });
        }

        [TestMethod]
        [ExpectedException(typeof(System.Reflection.TargetInvocationException))]
        public void CreateValueUnionStateNullSeed()
        {
            var method = typeof(Generator).GetMethod("CreateState", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static, null, new[] { typeof(IRandomSource), typeof(byte[]), typeof(ValueUnion[]) }, null);
            var source = new SHA256RandomSource();
            byte[] seed = null;
            var state = new ValueUnion[99];
            method.Invoke(null, new object[] { source, seed, state });
        }

        [TestMethod]
        [ExpectedException(typeof(System.Reflection.TargetInvocationException))]
        public void CreateValueUnionStateNullState()
        {
            var method = typeof(Generator).GetMethod("CreateState", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static, null, new[] { typeof(IRandomSource), typeof(byte[]), typeof(ValueUnion[]) }, null);
            var source = new SHA256RandomSource();
            byte[] seed = new byte[] { 1, 2, 3 };
            ValueUnion[] state = null;
            method.Invoke(null, new object[] { source, seed, state });
        }

        [TestMethod]
        public void RandomValueUnionSeededWithNull()
        {
            var source = new XorShiftRandomSource();
            var random = new Generator(source, (byte[])null);
            var data = new ValueUnion[99];
            random.Fill(data);
            LooksRandom(data.Select(t => t.UInt64_0).ToArray());
        }

        [TestMethod]
        public void RandomValueUnionFromEntropy()
        {
            var random = new Generator();
            var data = new ValueUnion[99];
            random.Fill(data);
            LooksRandom(data.Select(t => t.UInt64_0).ToArray());
        }

        [TestMethod]
        public void RandomValueUnionFromEntropyAndSource()
        {
            var source = Generator.DefaultSourceFactory();
            var random = new Generator(source);
            var data = new ValueUnion[99];
            random.Fill(data);
            LooksRandom(data.Select(t => t.UInt64_0).ToArray());
        }

        [TestMethod]
        public void FillZeroLengthValueUnionArray()
        {
            var random = new Generator("FillZeroLengthValueUnionArray");
            var data = new ValueUnion[99];
            random.Fill(data, 0, 0);
            Assert.AreEqual(0, data[0].Int32_0);
            Assert.AreEqual(0, data[98].Int32_0);
        }

        [TestMethod]
        public void EnumeratorOfValueUnion()
        {
            var random = new Generator("EnumeratorOfValueUnion");
            var data = random.ValueUnions().Take(99).ToArray();
            LooksRandom(data.Select(t => t.UInt64_0).ToArray());
        }

        [TestMethod]
        public void CreateValueUnionsArray()
        {
            var random = new Generator("CreateValueUnionsArray");
            var data = random.CreateValueUnions(99);
            Assert.AreEqual(99, data.Length);
            var ulongs = data.Select(t => t.UInt64_0).ToArray();
            LooksRandom(ulongs);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void CreateValueUnionsLowCount()
        {
            var random = new Generator("CreateValueUnionsLowCount");
            var data = random.CreateValueUnions(-1);
        }
    }
}
<#+
void Type(string T)
{
#>
        [TestMethod]
        public void Individual<#= T #>Values()
        {
            var random = new Generator(Generator.DefaultSourceFactory(), "Individual<#= T #>Values".ToCharArray());
            var data = new <#= T #>[99];

            for (int i = 0; i < data.Length; i++)
                data[i] = random.<#= T #>();

            LooksRandom(data);
        }
<#+
    if (T[0] == 'I' || T == "SByte")
    {
#>

        [TestMethod]
        public void IndividualNonNegative<#= T #>Values()
        {
            var random = new Generator();

            for (int i = 0; i < 1000; i++)
            {
                var value = random.<#= T #>NonNegative();
                Assert.IsTrue(value >= 0);
            }
        }

        [TestMethod]
        public void FillNonNegative<#= T #>()
        {
            var random = new Generator();
            var data = new <#= T #>[10000];
            random.FillNonNegative(data);

            for (int i = 0; i < data.Length; i++)
            {
                Assert.IsTrue(data[i] >= 0);
            }
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void FillNullNonNegative<#= T #>()
        {
            var random = new Generator();
            random.FillNonNegative((<#= T #>[])null);
        }

        [TestMethod]
        public void EnumeratorOfNonNegative<#= T #>()
        {
            var random = new Generator("EnumeratorOfNonNegative<#= T #>");
            var data = random.<#= T #>sNonNegative().Take(1000).ToArray();
            
            for (int i = 0; i < data.Length; i++)
                Assert.IsTrue(data[i] >= 0);
        }
<#+
    }
#>

        [TestMethod]
        public void Individual<#= T #>ValuesUpToRange()
        {
            var random = new Generator();
            var data = new <#= T #>[99];
            var hash = new HashSet<<#= T #>>();

            for (int i = 0; i < 10000; i++)
            {
                var x = random.<#= T #>(50);
                Assert.IsTrue(x >= 0);
                Assert.IsTrue(x < 50);
                hash.Add(x);
                if (hash.Count == 50) break;
            }

            Assert.AreEqual(50, hash.Count);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void Individual<#= T #>InvalidRange()
        {
            var random = new Generator();
            random.<#= T #>(0);
        }

        [TestMethod]
        public void Individual<#= T #>ValuesInRange()
        {
            var random = new Generator();
            var data = new <#= T #>[99];
            var hash = new HashSet<<#= T #>>();

            for (int i = 0; i < 10000; i++)
            {
                var x = random.<#= T #>(25, 50);
                Assert.IsTrue(x >= 25);
                Assert.IsTrue(x < 75);
                hash.Add(x);
                if (hash.Count == 50) break;
            }

            Assert.AreEqual(50, hash.Count);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void Individual<#= T #>ValuesInRangeTooLow()
        {
            var random = new Generator();
            random.<#= T #>(25, 0);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void Individual<#= T #>ValuesInRangeTooHigh()
        {
            var random = new Generator();
            random.<#= T #>(3 * (<#= T #>.MaxValue / 4), <#= T #>.MaxValue / 2);
        }

        [TestMethod]
        public void Random<#= T #>Arrays()
        {
            var random = new Generator("Random<#= T #>s".ToCharArray());

            for (int i = 0; i < 8; i++)
            {
                var data = new <#= T #>[99 + i];
                random.Fill(data);
                LooksRandom(data);
            }
        }

        [TestMethod]
        public void Random<#= T #>ArrayWithRange()
        {
            var random = new Generator();
            var data = new <#= T #>[10000];
            random.Fill(50, data);

            for (int i = 0; i < data.Length; i++)
            {
                Assert.IsTrue(data[i] >= 0);
                Assert.IsTrue(data[i] < 50);
            }

            Assert.IsTrue(data.Min() < 5);
            Assert.IsTrue(data.Max() >= 45);
        }

        [TestMethod]
        public void Random<#= T #>ArrayWithMinAndRange()
        {
            var random = new Generator();
            var data = new <#= T #>[9999];

            for (int p = 0; p < 10 * (8 / sizeof(<#= T #>)); p++)
            {            
                random.Fill(25, 50, data);

                for (int i = 0; i < data.Length; i++)
                {
                    Assert.IsTrue(data[i] >= 25);
                    Assert.IsTrue(data[i] < 75);
                }
            }
        }

        [TestMethod]
        public void AddFill<#= T #>ArrayWithMinAndRange()
        {
            var random = new Generator();
            var data1 = new <#= T #>[9999];
            var data2 = new <#= T #>[9999];
            var data3 = new <#= T #>[9999];

            for (int p = 0; p < 10 * (8 / sizeof(<#= T #>)); p++)
            {
                random.Fill(25, 50, data1);
                Array.Copy(data1, data3, data1.Length);
                var g = random.Clone();
                random.AddFill(25, 50, data1);
                g.Fill(25, 50, data2);

                for (int i = 0; i < data1.Length; i++)
                {
                    Assert.AreEqual(data1[i], (<#= T #>)(data3[i] + data2[i]));
                }
            }
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void AddFill<#= T #>ArrayWithMinAndLowRange()
        {
            var random = new Generator();
            var data = new <#= T #>[9999];
            random.AddFill(25, 0, data);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void AddFill<#= T #>ArrayWithMinAndHighRange()
        {
            var random = new Generator();
            var data = new <#= T #>[9999];
            random.AddFill(3 * (<#= T #>.MaxValue / 4), <#= T #>.MaxValue / 2, data);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void AddFillNull<#= T #>ArrayWithMinAndRange()
        {
            var random = new Generator();
            random.AddFill(25, 50, (<#= T #>[])null);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void Random<#= T #>ArrayWithLowRange()
        {
            var random = new Generator();
            var data = new <#= T #>[10000];
            random.Fill(0, data);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void Random<#= T #>ArrayWithHighRange()
        {
            var random = new Generator();
            var data = new <#= T #>[10000];
            random.Fill(3 * (<#= T #>.MaxValue / 4), <#= T #>.MaxValue / 2, data);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void RandomNull<#= T #>ArrayWithRange()
        {
            var random = new Generator();
            random.Fill(50, (<#= T #>[])null);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void RandomNull<#= T #>ArrayWithMinAndRange()
        {
            var random = new Generator();
            random.Fill(0, 50, (<#= T #>[])null);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void RandomNull<#= T #>SubArrayWithRange()
        {
            var random = new Generator();
            random.Fill(0, 50, (<#= T #>[])null, 0, 100);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void Random<#= T #>SubArrayWithLowOffset()
        {
            var random = new Generator("Random<#= T #>ArrayWithRange".ToCharArray());
            var data = new <#= T #>[99];
            random.Fill(0, 50, data, -1, 100);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void Random<#= T #>SubArrayWithHighOffset()
        {
            var random = new Generator("Random<#= T #>ArrayWithRange".ToCharArray());
            var data = new <#= T #>[99];
            random.Fill(0, 50, data, 99, 100);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void Random<#= T #>SubArrayWithLowCount()
        {
            var random = new Generator("Random<#= T #>ArrayWithRange".ToCharArray());
            var data = new <#= T #>[99];
            random.Fill(0, 50, data, 0, -1);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void Random<#= T #>SubArrayWithHighCount()
        {
            var random = new Generator("Random<#= T #>ArrayWithRange".ToCharArray());
            var data = new <#= T #>[99];
            random.Fill(0, 50, data, 0, 100);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void Null<#= T #>Array()
        {
            var random = new Generator("Random<#= T #>s".ToCharArray());
            <#= T #>[] data = null;
            random.Fill(data);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void Null<#= T #>ArrayWithOffsetCount()
        {
            var random = new Generator("Random<#= T #>s".ToCharArray());
            <#= T #>[] data = null;
            random.Fill(data, 0, 99);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void Low<#= T #>ArrayOffset()
        {
            var random = new Generator("Random<#= T #>s".ToCharArray());
            var data = new <#= T #>[99];
            random.Fill(data, -1, data.Length);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void High<#= T #>ArrayOffset()
        {
            var random = new Generator("Random<#= T #>s".ToCharArray());
            var data = new <#= T #>[99];
            random.Fill(data, data.Length + 1, 0);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void Low<#= T #>ArrayCount()
        {
            var random = new Generator("Random<#= T #>s".ToCharArray());
            var data = new <#= T #>[99];
            random.Fill(data, 0, -1);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void High<#= T #>ArrayCount()
        {
            var random = new Generator("Random<#= T #>s".ToCharArray());
            var data = new <#= T #>[99];
            random.Fill(data, 0, data.Length + 1);
        }

        [TestMethod]
        public void Create<#= T #>State()
        {
            var method = typeof(Generator).GetMethod("CreateState", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static, null, new[] { typeof(IRandomSource), typeof(byte[]), typeof(<#= T #>[]) }, null);
            var source = new SHA256RandomSource();
            var seed = new byte[] { 1, 2, 3 };
            var state = new <#= T #>[99];
            method.Invoke(null, new object[] { source, seed, state });
            LooksRandom(state);
        }

        [TestMethod]
        public void Create<#= T #>StateWeaklyTyped()
        {
            var method = typeof(Generator).GetMethod("CreateState", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static, null, new[] { typeof(IRandomSource), typeof(byte[]), typeof(Array) }, null);
            var source = new SHA256RandomSource();
            var seed = new byte[] { 1, 2, 3 };
            Array state = new <#= T #>[99];
            method.Invoke(null, new object[] { source, seed, state });
            LooksRandom(state as <#= T #>[]);
        }

        [TestMethod]
        [ExpectedException(typeof(System.Reflection.TargetInvocationException))]
        public void Create<#= T #>StateNullSource()
        {
            var method = typeof(Generator).GetMethod("CreateState", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static, null, new[] { typeof(IRandomSource), typeof(byte[]), typeof(<#= T #>[]) }, null);
            IRandomSource source = null;
            var seed = new byte[] { 1, 2, 3 };
            var state = new <#= T #>[99];
            method.Invoke(null, new object[] { source, seed, state });
        }

        [TestMethod]
        [ExpectedException(typeof(System.Reflection.TargetInvocationException))]
        public void Create<#= T #>StateNullSeed()
        {
            var method = typeof(Generator).GetMethod("CreateState", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static, null, new[] { typeof(IRandomSource), typeof(byte[]), typeof(<#= T #>[]) }, null);
            var source = new SHA256RandomSource();
            byte[] seed = null;
            var state = new <#= T #>[99];
            method.Invoke(null, new object[] { source, seed, state });
        }

        [TestMethod]
        [ExpectedException(typeof(System.Reflection.TargetInvocationException))]
        public void Create<#= T #>StateNullState()
        {
            var method = typeof(Generator).GetMethod("CreateState", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static, null, new[] { typeof(IRandomSource), typeof(byte[]), typeof(<#= T #>[]) }, null);
            var source = new SHA256RandomSource();
            byte[] seed = new byte[] { 1, 2, 3 };
            <#= T #>[] state = null;
            method.Invoke(null, new object[] { source, seed, state });
        }

<#+ if (T != "Decimal") { #>
        [TestMethod]
        public void SeedWith<#= T #>s()
        {
            var random = new Generator("SeedWith<#= T #>s".ToCharArray());
            var data = new <#= T #>[99];
            random.Fill(data);
            random = new Generator(data);
            random.Fill(data);
            LooksRandom(data);
        }

        [TestMethod]
        public void SeedWith<#= T #>sAndSource()
        {
            var random = new Generator("SeedWith<#= T #>s".ToCharArray());
            var data = new <#= T #>[99];
            random.Fill(data);
            var source = Generator.DefaultSourceFactory();
            random = new Generator(source, data);
            random.Fill(data);
            LooksRandom(data);
        }

<#+ } #>
        [TestMethod]
        public void Random<#= T #>SeededWithNull()
        {
            var source = new XorShiftRandomSource();
            var random = new Generator(source, (byte[])null);
            var data = new <#= T #>[99];
            random.Fill(data);
            LooksRandom(data);
        }

        [TestMethod]
        public void Random<#= T #>FromEntropy()
        {
            var random = new Generator();
            var data = new <#= T #>[99];
            random.Fill(data);
            LooksRandom(data);
        }

        [TestMethod]
        public void Random<#= T #>FromEntropyAndSource()
        {
            var source = Generator.DefaultSourceFactory();
            var random = new Generator(source);
            var data = new <#= T #>[99];
            random.Fill(data);
            LooksRandom(data);
        }

        [TestMethod]
        public void FillZeroLength<#= T #>Array()
        {
            var random = new Generator("FillZeroLength<#= T #>Array");
            var data = new <#= T #>[99];
            random.Fill(data, 0, 0);
            Assert.AreEqual((<#= T #>)0, data[0]);
            Assert.AreEqual((<#= T #>)0, data[98]);
        }

        [TestMethod]
        public void EnumeratorOf<#= T #>()
        {
            var random = new Generator("EnumeratorOf<#= T #>");
            var data = random.<#= T #>s().Take(99).ToArray();
            LooksRandom(data);
        }

        [TestMethod]
        public void EnumeratorOf<#= T #>WithRange()
        {
            var random = new Generator("EnumeratorOf<#= T #>WithRange");
            var data = random.<#= T #>s(50).Take(1000).ToArray();

            for (int i = 0; i < data.Length; i++)
            {
                Assert.IsTrue(data[i] >= 0);
                Assert.IsTrue(data[i] < 50);
            }
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void EnumeratorOf<#= T #>WithRangeLow()
        {
            var random = new Generator();
            var data = random.<#= T #>s(0).Take(1000).ToArray();
        }

        [TestMethod]
        public void EnumeratorOf<#= T #>WithOffsetAndRange()
        {
            var random = new Generator(Generator.DefaultSourceFactory(), "EnumeratorOf<#= T #>WithOffsetAndRange");
            var data = random.<#= T #>s(25, 50).Take(10000).ToArray();
            Assert.IsTrue(data.Min() < 30);
            Assert.IsTrue(data.Max() >= 70);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void EnumeratorOf<#= T #>WithOffsetAndRangeLow()
        {
            var random = new Generator();
            var data = random.<#= T #>s(25, 0).Take(1000).ToArray();
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void EnumeratorOf<#= T #>WithOffsetAndRangeHigh()
        {
            var random = new Generator();
            var data = random.<#= T #>s(3 * (System.<#= T #>.MaxValue / 4), System.<#= T #>.MaxValue / 2).Take(1000).ToArray();
        }

        [TestMethod]
        public void Create<#= T #>s()
        {
            var random = new Generator("Create<#= T #>s");
            var data = random.Create<#= T #>s(99);
            Assert.IsNotNull(data);
            Assert.AreEqual(99, data.Length);
            LooksRandom(data);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void Create<#= T #>sLowCount()
        {
            var random = new Generator("Create<#= T #>s");
            var data = random.Create<#= T #>s(-1);
        }

        [TestMethod]
        public void Create<#= T #>sZeroCount()
        {
            var random = new Generator("Create<#= T #>s");
            var data = random.Create<#= T #>s(0);
            Assert.IsNotNull(data);
            Assert.AreEqual(0, data.Length);
        }

        [TestMethod]
        public void Create<#= T #>sWithRange()
        {
            var random = new Generator("Create<#= T #>s");
            var data = random.Create<#= T #>s(9999, 50);
            Assert.IsNotNull(data);
            Assert.AreEqual(9999, data.Length);
            Assert.IsTrue(data.Min() < 5);
            Assert.IsTrue(data.Max() >= 45);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void Create<#= T #>sLowCountWithRange()
        {
            var random = new Generator("Create<#= T #>s");
            var data = random.Create<#= T #>s(-1, 50);
        }

        [TestMethod]
        public void Create<#= T #>sWithMinAndRange()
        {
            var random = new Generator("Create<#= T #>s");
            var data = random.Create<#= T #>s(9999, 25, 50);
            Assert.IsNotNull(data);
            Assert.AreEqual(9999, data.Length);
            Assert.IsTrue(data.Min() < 30);
            Assert.IsTrue(data.Max() >= 70);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void Create<#= T #>sLowCountWithMinAndRange()
        {
            var random = new Generator("Create<#= T #>s");
            var data = random.Create<#= T #>s(-1, 25, 50);
        }

        [TestMethod]
        public void AddFill<#= T #>Array()
        {
            var random = new Generator("AddFill<#= T #>Array");
            var data1 = random.Create<#= T #>s(99);
            var data2 = (<#= T #>[])data1.Clone();
            random = new Generator(1);
            var data3 = random.Create<#= T #>s(99);
            random = new Generator(1);
            random.AddFill(data1);

            for (int i = 0; i < data1.Length; i++)
            {
                Assert.AreEqual((<#= T #>)(data2[i] + data3[i]), data1[i]);
            }
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void AddFillNull<#= T #>Array()
        {
            var random = new Generator("AddFillNull<#= T #>Array");
            random.AddFill((<#= T #>[])null);
        }

        [TestMethod]
        public void AddFillWithNonPow2Range<#= T #>()
        {
            var random = new Generator("AddFillWithNonPow2Range<#= T #>");
            var data = new <#= T #>[99];
            random.AddFill(57, data);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void AddFillWithRangeAndNull<#= T #>Array()
        {
            var random = new Generator("AddFillWithRangeAndNull<#= T #>Array");
            random.AddFill(64, (<#= T #>[])null);
        }

        [TestMethod]
        public void AddFillWithRangeAnd<#= T #>Array()
        {
            var random = new Generator("AddFillWithRangeAndNull<#= T #>Array");
            var data = new <#= T #>[9999];
            random.AddFill(64, data);
            Assert.IsTrue(data.Min() < 5);
            Assert.IsTrue(data.Max() >= 59);
            Assert.IsTrue(data.Max() < 64);
        }

        [TestMethod]
        public void AddFillWithOffsetAndCount<#= T #>Array()
        {
            var random = new Generator("AddFillWithOffsetAndCount<#= T #>Array");
            var data = new <#= T #>[9999];

            for (int i = 0; i < 8; i++)
            {
                random.AddFill(data, 0, data.Length - i);
            }
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void AddFillWithOffsetAndNull<#= T #>Array()
        {
            var random = new Generator("AddFillWithOffsetAndNull<#= T #>Array");
            random.AddFill((<#= T #>[])null, 0, 99);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void AddFillWithLowOffset<#= T #>()
        {
            var random = new Generator("AddFillWithLowOffset<#= T #>");
            var data = new <#= T #>[99];
            random.AddFill(data, -1, data.Length);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void AddFillWithHighOffset<#= T #>()
        {
            var random = new Generator("AddFillWithLowOffset<#= T #>");
            var data = new <#= T #>[99];
            random.AddFill(data, data.Length, data.Length);
        }

        [TestMethod]
        public void AddFillWithZeroCount<#= T #>()
        {
            var random = new Generator("AddFillWithZeroCount<#= T #>");
            var data = Enumerable.Range(0, 99).Select(t => (<#= T #>)t).ToArray();
            random.AddFill(data, 0, 0);

            for (int i = 0; i < data.Length; i++)
            {
                Assert.AreEqual((<#= T #>)i, data[i]);
            }
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void AddFillWithLowCount<#= T #>()
        {
            var random = new Generator("AddFillWithLowCount<#= T #>");
            var data = new <#= T #>[99];
            random.AddFill(data, 0, -1);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void AddFillWithHighCount<#= T #>()
        {
            var random = new Generator("AddFillWithHighCount<#= T #>");
            var data = new <#= T #>[99];
            random.AddFill(data, 0, data.Length + 1);
        }

        [TestMethod]
        public void AddFillExactMultiple<#= T #>()
        {
            var random = new Generator("AddFillExactMultiple<#= T #>");
            var data = new <#= T #>[99 * 8];
            random.AddFill(data);
            LooksRandom(data);
        }

        [TestMethod]
        public void AddFillNonPow2WithOffset<#= T #>Array()
        {
            var random = new Generator("AddFillNonPow2WithOffset<#= T #>Array");
            var data = new <#= T #>[99 * 8];
            random.AddFill(57, data, 0, 99);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void AddFillRangedWithOffsetAndNull<#= T #>Array()
        {
            var random = new Generator("AddFillRangedWithOffsetAndNull<#= T #>Array");
            random.AddFill(64, (<#= T #>[])null, 0, 99);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void AddFillRangedWithLowOffset<#= T #>()
        {
            var random = new Generator("AddFillRangedWithLowOffset<#= T #>");
            var data = new <#= T #>[99];
            random.AddFill(64, data, -1, data.Length);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void AddFillRangedWithHighOffset<#= T #>()
        {
            var random = new Generator("AddFillRangedWithHighOffset<#= T #>");
            var data = new <#= T #>[99];
            random.AddFill(64, data, data.Length, data.Length);
        }

        [TestMethod]
        public void AddFillRangedWithZeroCount<#= T #>()
        {
            var random = new Generator("AddFillRangedWithZeroCount<#= T #>");
            var data = Enumerable.Range(0, 99).Select(t => (<#= T #>)t).ToArray();
            random.AddFill(64, data, 0, 0);

            for (int i = 0; i < data.Length; i++)
            {
                Assert.AreEqual((<#= T #>)i, data[i]);
            }
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void AddFillRangedWithLowCount<#= T #>()
        {
            var random = new Generator("AddFillRangedWithLowCount<#= T #>");
            var data = new <#= T #>[99];
            random.AddFill(64, data, 0, -1);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void AddFillRangedWithLowRange<#= T #>()
        {
            var random = new Generator("AddFillRangedWithLowCount<#= T #>");
            var data = new <#= T #>[99];
            random.AddFill(64, 0, data, 0, data.Length);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void AddFillRangedWithHighCount<#= T #>()
        {
            var random = new Generator("AddFillRangedWithHighCount<#= T #>");
            var data = new <#= T #>[99];
            random.AddFill(64, data, 0, data.Length + 1);
        }

        [TestMethod]
        public void AddFillRangedExactMultiple<#= T #>()
        {
            var random = new Generator("AddFillRangedExactMultiple<#= T #>");
            var data = new <#= T #>[99 * 8];
            random.AddFill(64, data);
            Assert.IsTrue(data.Min() < 5);
            Assert.IsTrue(data.Max() >= 59);
            Assert.IsTrue(data.Max() < 64);
        }
<#+ if (T != "Single" && T != "Double" && T != "Decimal") { #>

        [TestMethod]
        public void XorFill<#= T #>Array()
        {
            var random = new Generator("XorFill<#= T #>Array");
            var data1 = random.Create<#= T #>s(99);
            var data2 = (<#= T #>[])data1.Clone();
            random = new Generator(1);
            var data3 = random.Create<#= T #>s(99);
            random = new Generator(1);
            random.XorFill(data1);
            LooksRandom(data1);

            for (int i = 0; i < data1.Length; i++)
            {
                Assert.AreEqual(data2[i] ^ data3[i], data1[i]);
            }
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void XorFillNull<#= T #>Array()
        {
            var random = new Generator("XorFillNull<#= T #>Array");
            random.XorFill((<#= T #>[])null);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentException))]
        public void XorFillWithNonPow2Range<#= T #>()
        {
            var random = new Generator("XorFillWithNonPow2Range<#= T #>");
            var data = new <#= T #>[99];
            random.XorFill(57, data);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void XorFillWithRangeAndNull<#= T #>Array()
        {
            var random = new Generator("XorFillWithRangeAndNull<#= T #>Array");
            random.XorFill(64, (<#= T #>[])null);
        }

        [TestMethod]
        public void XorFillWithRangeAnd<#= T #>Array()
        {
            var random = new Generator("XorFillWithRangeAndNull<#= T #>Array");
            var data = new <#= T #>[9999];
            random.XorFill(64, data);
            Assert.IsTrue(data.Min() < 5);
            Assert.IsTrue(data.Max() >= 59);
            Assert.IsTrue(data.Max() < 64);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void XorFillWithOffsetAndNull<#= T #>Array()
        {
            var random = new Generator("XorFillWithOffsetAndNull<#= T #>Array");
            random.XorFill((<#= T #>[])null, 0, 99);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void XorFillWithLowOffset<#= T #>()
        {
            var random = new Generator("XorFillWithLowOffset<#= T #>");
            var data = new <#= T #>[99];
            random.XorFill(data, -1, data.Length);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void XorFillWithHighOffset<#= T #>()
        {
            var random = new Generator("XorFillWithLowOffset<#= T #>");
            var data = new <#= T #>[99];
            random.XorFill(data, data.Length, data.Length);
        }

        [TestMethod]
        public void XorFillWithZeroCount<#= T #>()
        {
            var random = new Generator("XorFillWithZeroCount<#= T #>");
            var data = Enumerable.Range(0, 99).Select(t => (<#= T #>)t).ToArray();
            random.XorFill(data, 0, 0);

            for (int i = 0; i < data.Length; i++)
            {
                Assert.AreEqual((<#= T #>)i, data[i]);
            }
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void XorFillWithLowCount<#= T #>()
        {
            var random = new Generator("XorFillWithLowCount<#= T #>");
            var data = new <#= T #>[99];
            random.XorFill(data, 0, -1);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void XorFillWithHighCount<#= T #>()
        {
            var random = new Generator("XorFillWithHighCount<#= T #>");
            var data = new <#= T #>[99];
            random.XorFill(data, 0, data.Length + 1);
        }

        [TestMethod]
        public void XorFillExactMultiple<#= T #>()
        {
            var random = new Generator("XorFillExactMultiple<#= T #>");
            var data = new <#= T #>[99 * 8];
            random.XorFill(data);
            LooksRandom(data);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentException))]
        public void XorFillNonPow2WithOffset<#= T #>Array()
        {
            var random = new Generator("XorFillNonPow2WithOffset<#= T #>Array");
            random.XorFill(57, (<#= T #>[])null, 0, 99);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void XorFillRangedWithOffsetAndNull<#= T #>Array()
        {
            var random = new Generator("XorFillRangedWithOffsetAndNull<#= T #>Array");
            random.XorFill(64, (<#= T #>[])null, 0, 99);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void XorFillRangedWithLowOffset<#= T #>()
        {
            var random = new Generator("XorFillRangedWithLowOffset<#= T #>");
            var data = new <#= T #>[99];
            random.XorFill(64, data, -1, data.Length);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void XorFillRangedWithHighOffset<#= T #>()
        {
            var random = new Generator("XorFillRangedWithHighOffset<#= T #>");
            var data = new <#= T #>[99];
            random.XorFill(64, data, data.Length, data.Length);
        }

        [TestMethod]
        public void XorFillRangedWithZeroCount<#= T #>()
        {
            var random = new Generator("XorFillRangedWithZeroCount<#= T #>");
            var data = Enumerable.Range(0, 99).Select(t => (<#= T #>)t).ToArray();
            random.XorFill(64, data, 0, 0);

            for (int i = 0; i < data.Length; i++)
            {
                Assert.AreEqual((<#= T #>)i, data[i]);
            }
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void XorFillRangedWithLowCount<#= T #>()
        {
            var random = new Generator("XorFillRangedWithLowCount<#= T #>");
            var data = new <#= T #>[99];
            random.XorFill(64, data, 0, -1);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void XorFillRangedWithHighCount<#= T #>()
        {
            var random = new Generator("XorFillRangedWithHighCount<#= T #>");
            var data = new <#= T #>[99];
            random.XorFill(64, data, 0, data.Length + 1);
        }

        [TestMethod]
        public void XorFillRangedExactMultiple<#= T #>()
        {
            var random = new Generator("XorFillRangedExactMultiple<#= T #>");
            var data = new <#= T #>[99 * 8];
            random.XorFill(64, data);
            Assert.IsTrue(data.Min() < 5);
            Assert.IsTrue(data.Max() >= 59);
            Assert.IsTrue(data.Max() < 64);
        }
<#+ } #>

        private void LooksRandom(<#= T #>[] array)
        {
<#+ if (T == "Single" || T == "Double" || T == "Decimal") { #>
            var minValue = 0.0;
            var maxValue = 1.0;
<#+ } else { #>
            var minValue = (double)<#= T #>.MinValue;
            var maxValue = (double)<#= T #>.MaxValue;
<#+ } #>
            var range = (maxValue - minValue) / 8;
            var min = array.Min(t => (double)t);
            Assert.IsTrue(min < minValue + range);
            var max = array.Max(t => (double)t);
            Assert.IsTrue(max > maxValue - range);
            var avg = array.Average(t => (double)t);
            var mid = (minValue + maxValue) / 2.0;
            Assert.IsTrue(avg > mid - range);
            Assert.IsTrue(avg < mid + range);
        }

<#+
}
#>