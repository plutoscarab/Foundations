
/*
FixedPointTests.cs

Copyright © 2016 Pluto Scarab Software. Most Rights Reserved.
Author: Bret Mulvey

This work is licensed under the Creative Commons Attribution-ShareAlike 4.0 International License. 
To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/4.0/.

THIS IS AN AUTO-GENERATED SOURCE FILE. DO NOT EDIT THIS FILE DIRECTLY.
INSTEAD, EDIT THE .tt FILE WITH THE SIMILAR NAME AND RE-RUN THE TEXT TEMPLATING
FILE GENERATOR. IF YOU SAVE THE FILE IN VISUAL STUDIO IT WILL DO THIS FOR YOU.
*/

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Foundations.RandomNumbers;

namespace Foundations.Types
{
    [TestClass]
    public class FixedPointTests
    {
        [TestMethod]
	    public void Fixed4p28Parse()
        {
            var x = Fixed4p28.Parse("3.125");
            Assert.AreEqual("3.125", x.ToString());
        }

        [TestMethod]
	    public void Fixed4p28TryParse()
        {
            Fixed4p28 x;
            var ok = Fixed4p28.TryParse("-3.125", out x);
            Assert.IsTrue(ok);
            Assert.AreEqual("-3.125", x.ToString());
            ok = Fixed4p28.TryParse("foo", out x);
            Assert.IsFalse(ok);
        }

        [TestMethod]
	    public void Fixed4p28CastFromDecimal()
        {
            var x = (Fixed4p28)3.125m;
            Assert.AreEqual("3.125", x.ToString());
        }

        [TestMethod]
	    public void Fixed4p28CastFromDouble()
        {
            var x = (Fixed4p28)(-1.75d);
            Assert.AreEqual("-1.75", x.ToString());
        }

        [TestMethod]
	    public void Fixed4p28CastToDecimal()
        {
            var x = (Fixed4p28)3.125m;
            var d = (decimal)x;
            Assert.AreEqual(3.125m, d);
        }

        [TestMethod]
	    public void Fixed4p28CastToDouble()
        {
            var x = (Fixed4p28)3.125d;
            var d = (double)x;
            Assert.AreEqual(3.125d, d);
        }

        [TestMethod]
	    public void Fixed4p28CastToFloat()
        {
            var x = (Fixed4p28)3.125f;
            var d = (float)x;
            Assert.AreEqual(3.125f, d);
        }

        [TestMethod]
        public void Fixed4p28Add()
        {
            var x = (Fixed4p28)3.125;
            var y = (Fixed4p28)(-1.75);
            var z = x + y;
            Assert.AreEqual((Fixed4p28)(3.125 - 1.75), z);
        }

        [TestMethod]
        public void Fixed4p28Subtract()
        {
            var x = (Fixed4p28)3.125;
            var y = (Fixed4p28)(-1.75);
            var z = x - y;
            Assert.AreEqual((Fixed4p28)(3.125 + 1.75), z);
        }

        [TestMethod]
        public void Fixed4p28Multiply()
        {
            var x = (Fixed4p28)3.25;
            var y = (Fixed4p28)(-1.75);
            var z = x * y;
            Assert.AreEqual((Fixed4p28)(3.25 * -1.75), z);
        }

        [TestMethod]
        public void Fixed4p28Divide()
        {
            var x = (Fixed4p28)1;
            var y = (Fixed4p28)3;
            var z = x / y;
            Assert.AreEqual((Fixed4p28)(1.0 / 3.0), z);
        }

        [TestMethod]
        public void Fixed4p28Floor()
        {
            var g = new Generator("Fixed4p28Floor");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed4p28)g.Double(-7, 7);
                var f = x.Floor();
                Assert.IsTrue(f <= x);
                Assert.IsTrue(x - f < Fixed4p28.One);
            }
        }

        [TestMethod]
        public void Fixed4p28Ceiling()
        {
            var g = new Generator("Fixed4p28Ceiling");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed4p28)g.Double(-7, 7);
                var f = x.Ceiling();
                Assert.IsTrue(f >= x);
                Assert.IsTrue(f - x < Fixed4p28.One);
            }
        }

        [TestMethod]
        public void Fixed4p28Round()
        {
            var g = new Generator("Fixed4p28Round");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed4p28)g.Double(-7, 7);
                var f = x.Round();
                Assert.IsTrue(Fixed4p28.Abs(f - x) <= (Fixed4p28)0.5);
            }
        }

        [TestMethod]
        public void Fixed4p28Truncate()
        {
            var g = new Generator("Fixed4p28Truncate");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed4p28)g.Double(-7, 7);
                var f = x.Truncate();
                
                if (x >= 0)
                {
                    Assert.IsTrue(f <= x);
                    Assert.IsTrue(x - f < Fixed4p28.One);
                }
                else
                {
                    Assert.IsTrue(f >= x);
                    Assert.IsTrue(f - x < Fixed4p28.One);
                }
            }
        }

        [TestMethod]
        public void Fixed4p28Frac()
        {
            var g = new Generator("Fixed4p28Frac");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed4p28)g.Double(-7, 7);
                var f = x.Frac();
                Assert.IsTrue(f >= 0);
                Assert.IsTrue(f < 1);
                var t = x.Truncate();
                if (x >= 0)
                    Assert.AreEqual(x, t + f);
                else
                    Assert.AreEqual(x, t - f);
            }
        }

        [TestMethod]
	    public void Fixed8p24Parse()
        {
            var x = Fixed8p24.Parse("3.125");
            Assert.AreEqual("3.125", x.ToString());
        }

        [TestMethod]
	    public void Fixed8p24TryParse()
        {
            Fixed8p24 x;
            var ok = Fixed8p24.TryParse("-3.125", out x);
            Assert.IsTrue(ok);
            Assert.AreEqual("-3.125", x.ToString());
            ok = Fixed8p24.TryParse("foo", out x);
            Assert.IsFalse(ok);
        }

        [TestMethod]
	    public void Fixed8p24CastFromDecimal()
        {
            var x = (Fixed8p24)3.125m;
            Assert.AreEqual("3.125", x.ToString());
        }

        [TestMethod]
	    public void Fixed8p24CastFromDouble()
        {
            var x = (Fixed8p24)(-1.75d);
            Assert.AreEqual("-1.75", x.ToString());
        }

        [TestMethod]
	    public void Fixed8p24CastToDecimal()
        {
            var x = (Fixed8p24)3.125m;
            var d = (decimal)x;
            Assert.AreEqual(3.125m, d);
        }

        [TestMethod]
	    public void Fixed8p24CastToDouble()
        {
            var x = (Fixed8p24)3.125d;
            var d = (double)x;
            Assert.AreEqual(3.125d, d);
        }

        [TestMethod]
	    public void Fixed8p24CastToFloat()
        {
            var x = (Fixed8p24)3.125f;
            var d = (float)x;
            Assert.AreEqual(3.125f, d);
        }

        [TestMethod]
        public void Fixed8p24Add()
        {
            var x = (Fixed8p24)3.125;
            var y = (Fixed8p24)(-1.75);
            var z = x + y;
            Assert.AreEqual((Fixed8p24)(3.125 - 1.75), z);
        }

        [TestMethod]
        public void Fixed8p24Subtract()
        {
            var x = (Fixed8p24)3.125;
            var y = (Fixed8p24)(-1.75);
            var z = x - y;
            Assert.AreEqual((Fixed8p24)(3.125 + 1.75), z);
        }

        [TestMethod]
        public void Fixed8p24Multiply()
        {
            var x = (Fixed8p24)3.25;
            var y = (Fixed8p24)(-1.75);
            var z = x * y;
            Assert.AreEqual((Fixed8p24)(3.25 * -1.75), z);
        }

        [TestMethod]
        public void Fixed8p24Divide()
        {
            var x = (Fixed8p24)1;
            var y = (Fixed8p24)3;
            var z = x / y;
            Assert.AreEqual((Fixed8p24)(1.0 / 3.0), z);
        }

        [TestMethod]
        public void Fixed8p24Floor()
        {
            var g = new Generator("Fixed8p24Floor");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed8p24)g.Double(-7, 7);
                var f = x.Floor();
                Assert.IsTrue(f <= x);
                Assert.IsTrue(x - f < Fixed8p24.One);
            }
        }

        [TestMethod]
        public void Fixed8p24Ceiling()
        {
            var g = new Generator("Fixed8p24Ceiling");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed8p24)g.Double(-7, 7);
                var f = x.Ceiling();
                Assert.IsTrue(f >= x);
                Assert.IsTrue(f - x < Fixed8p24.One);
            }
        }

        [TestMethod]
        public void Fixed8p24Round()
        {
            var g = new Generator("Fixed8p24Round");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed8p24)g.Double(-7, 7);
                var f = x.Round();
                Assert.IsTrue(Fixed8p24.Abs(f - x) <= (Fixed8p24)0.5);
            }
        }

        [TestMethod]
        public void Fixed8p24Truncate()
        {
            var g = new Generator("Fixed8p24Truncate");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed8p24)g.Double(-7, 7);
                var f = x.Truncate();
                
                if (x >= 0)
                {
                    Assert.IsTrue(f <= x);
                    Assert.IsTrue(x - f < Fixed8p24.One);
                }
                else
                {
                    Assert.IsTrue(f >= x);
                    Assert.IsTrue(f - x < Fixed8p24.One);
                }
            }
        }

        [TestMethod]
        public void Fixed8p24Frac()
        {
            var g = new Generator("Fixed8p24Frac");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed8p24)g.Double(-7, 7);
                var f = x.Frac();
                Assert.IsTrue(f >= 0);
                Assert.IsTrue(f < 1);
                var t = x.Truncate();
                if (x >= 0)
                    Assert.AreEqual(x, t + f);
                else
                    Assert.AreEqual(x, t - f);
            }
        }

        [TestMethod]
	    public void Fixed12p20Parse()
        {
            var x = Fixed12p20.Parse("3.125");
            Assert.AreEqual("3.125", x.ToString());
        }

        [TestMethod]
	    public void Fixed12p20TryParse()
        {
            Fixed12p20 x;
            var ok = Fixed12p20.TryParse("-3.125", out x);
            Assert.IsTrue(ok);
            Assert.AreEqual("-3.125", x.ToString());
            ok = Fixed12p20.TryParse("foo", out x);
            Assert.IsFalse(ok);
        }

        [TestMethod]
	    public void Fixed12p20CastFromDecimal()
        {
            var x = (Fixed12p20)3.125m;
            Assert.AreEqual("3.125", x.ToString());
        }

        [TestMethod]
	    public void Fixed12p20CastFromDouble()
        {
            var x = (Fixed12p20)(-1.75d);
            Assert.AreEqual("-1.75", x.ToString());
        }

        [TestMethod]
	    public void Fixed12p20CastToDecimal()
        {
            var x = (Fixed12p20)3.125m;
            var d = (decimal)x;
            Assert.AreEqual(3.125m, d);
        }

        [TestMethod]
	    public void Fixed12p20CastToDouble()
        {
            var x = (Fixed12p20)3.125d;
            var d = (double)x;
            Assert.AreEqual(3.125d, d);
        }

        [TestMethod]
	    public void Fixed12p20CastToFloat()
        {
            var x = (Fixed12p20)3.125f;
            var d = (float)x;
            Assert.AreEqual(3.125f, d);
        }

        [TestMethod]
        public void Fixed12p20Add()
        {
            var x = (Fixed12p20)3.125;
            var y = (Fixed12p20)(-1.75);
            var z = x + y;
            Assert.AreEqual((Fixed12p20)(3.125 - 1.75), z);
        }

        [TestMethod]
        public void Fixed12p20Subtract()
        {
            var x = (Fixed12p20)3.125;
            var y = (Fixed12p20)(-1.75);
            var z = x - y;
            Assert.AreEqual((Fixed12p20)(3.125 + 1.75), z);
        }

        [TestMethod]
        public void Fixed12p20Multiply()
        {
            var x = (Fixed12p20)3.25;
            var y = (Fixed12p20)(-1.75);
            var z = x * y;
            Assert.AreEqual((Fixed12p20)(3.25 * -1.75), z);
        }

        [TestMethod]
        public void Fixed12p20Divide()
        {
            var x = (Fixed12p20)1;
            var y = (Fixed12p20)3;
            var z = x / y;
            Assert.AreEqual((Fixed12p20)(1.0 / 3.0), z);
        }

        [TestMethod]
        public void Fixed12p20Floor()
        {
            var g = new Generator("Fixed12p20Floor");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed12p20)g.Double(-7, 7);
                var f = x.Floor();
                Assert.IsTrue(f <= x);
                Assert.IsTrue(x - f < Fixed12p20.One);
            }
        }

        [TestMethod]
        public void Fixed12p20Ceiling()
        {
            var g = new Generator("Fixed12p20Ceiling");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed12p20)g.Double(-7, 7);
                var f = x.Ceiling();
                Assert.IsTrue(f >= x);
                Assert.IsTrue(f - x < Fixed12p20.One);
            }
        }

        [TestMethod]
        public void Fixed12p20Round()
        {
            var g = new Generator("Fixed12p20Round");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed12p20)g.Double(-7, 7);
                var f = x.Round();
                Assert.IsTrue(Fixed12p20.Abs(f - x) <= (Fixed12p20)0.5);
            }
        }

        [TestMethod]
        public void Fixed12p20Truncate()
        {
            var g = new Generator("Fixed12p20Truncate");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed12p20)g.Double(-7, 7);
                var f = x.Truncate();
                
                if (x >= 0)
                {
                    Assert.IsTrue(f <= x);
                    Assert.IsTrue(x - f < Fixed12p20.One);
                }
                else
                {
                    Assert.IsTrue(f >= x);
                    Assert.IsTrue(f - x < Fixed12p20.One);
                }
            }
        }

        [TestMethod]
        public void Fixed12p20Frac()
        {
            var g = new Generator("Fixed12p20Frac");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed12p20)g.Double(-7, 7);
                var f = x.Frac();
                Assert.IsTrue(f >= 0);
                Assert.IsTrue(f < 1);
                var t = x.Truncate();
                if (x >= 0)
                    Assert.AreEqual(x, t + f);
                else
                    Assert.AreEqual(x, t - f);
            }
        }

        [TestMethod]
	    public void Fixed16p16Parse()
        {
            var x = Fixed16p16.Parse("3.125");
            Assert.AreEqual("3.125", x.ToString());
        }

        [TestMethod]
	    public void Fixed16p16TryParse()
        {
            Fixed16p16 x;
            var ok = Fixed16p16.TryParse("-3.125", out x);
            Assert.IsTrue(ok);
            Assert.AreEqual("-3.125", x.ToString());
            ok = Fixed16p16.TryParse("foo", out x);
            Assert.IsFalse(ok);
        }

        [TestMethod]
	    public void Fixed16p16CastFromDecimal()
        {
            var x = (Fixed16p16)3.125m;
            Assert.AreEqual("3.125", x.ToString());
        }

        [TestMethod]
	    public void Fixed16p16CastFromDouble()
        {
            var x = (Fixed16p16)(-1.75d);
            Assert.AreEqual("-1.75", x.ToString());
        }

        [TestMethod]
	    public void Fixed16p16CastToDecimal()
        {
            var x = (Fixed16p16)3.125m;
            var d = (decimal)x;
            Assert.AreEqual(3.125m, d);
        }

        [TestMethod]
	    public void Fixed16p16CastToDouble()
        {
            var x = (Fixed16p16)3.125d;
            var d = (double)x;
            Assert.AreEqual(3.125d, d);
        }

        [TestMethod]
	    public void Fixed16p16CastToFloat()
        {
            var x = (Fixed16p16)3.125f;
            var d = (float)x;
            Assert.AreEqual(3.125f, d);
        }

        [TestMethod]
        public void Fixed16p16Add()
        {
            var x = (Fixed16p16)3.125;
            var y = (Fixed16p16)(-1.75);
            var z = x + y;
            Assert.AreEqual((Fixed16p16)(3.125 - 1.75), z);
        }

        [TestMethod]
        public void Fixed16p16Subtract()
        {
            var x = (Fixed16p16)3.125;
            var y = (Fixed16p16)(-1.75);
            var z = x - y;
            Assert.AreEqual((Fixed16p16)(3.125 + 1.75), z);
        }

        [TestMethod]
        public void Fixed16p16Multiply()
        {
            var x = (Fixed16p16)3.25;
            var y = (Fixed16p16)(-1.75);
            var z = x * y;
            Assert.AreEqual((Fixed16p16)(3.25 * -1.75), z);
        }

        [TestMethod]
        public void Fixed16p16Divide()
        {
            var x = (Fixed16p16)1;
            var y = (Fixed16p16)3;
            var z = x / y;
            Assert.AreEqual((Fixed16p16)(1.0 / 3.0), z);
        }

        [TestMethod]
        public void Fixed16p16Floor()
        {
            var g = new Generator("Fixed16p16Floor");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed16p16)g.Double(-7, 7);
                var f = x.Floor();
                Assert.IsTrue(f <= x);
                Assert.IsTrue(x - f < Fixed16p16.One);
            }
        }

        [TestMethod]
        public void Fixed16p16Ceiling()
        {
            var g = new Generator("Fixed16p16Ceiling");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed16p16)g.Double(-7, 7);
                var f = x.Ceiling();
                Assert.IsTrue(f >= x);
                Assert.IsTrue(f - x < Fixed16p16.One);
            }
        }

        [TestMethod]
        public void Fixed16p16Round()
        {
            var g = new Generator("Fixed16p16Round");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed16p16)g.Double(-7, 7);
                var f = x.Round();
                Assert.IsTrue(Fixed16p16.Abs(f - x) <= (Fixed16p16)0.5);
            }
        }

        [TestMethod]
        public void Fixed16p16Truncate()
        {
            var g = new Generator("Fixed16p16Truncate");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed16p16)g.Double(-7, 7);
                var f = x.Truncate();
                
                if (x >= 0)
                {
                    Assert.IsTrue(f <= x);
                    Assert.IsTrue(x - f < Fixed16p16.One);
                }
                else
                {
                    Assert.IsTrue(f >= x);
                    Assert.IsTrue(f - x < Fixed16p16.One);
                }
            }
        }

        [TestMethod]
        public void Fixed16p16Frac()
        {
            var g = new Generator("Fixed16p16Frac");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed16p16)g.Double(-7, 7);
                var f = x.Frac();
                Assert.IsTrue(f >= 0);
                Assert.IsTrue(f < 1);
                var t = x.Truncate();
                if (x >= 0)
                    Assert.AreEqual(x, t + f);
                else
                    Assert.AreEqual(x, t - f);
            }
        }

        [TestMethod]
	    public void Fixed20p12Parse()
        {
            var x = Fixed20p12.Parse("3.125");
            Assert.AreEqual("3.125", x.ToString());
        }

        [TestMethod]
	    public void Fixed20p12TryParse()
        {
            Fixed20p12 x;
            var ok = Fixed20p12.TryParse("-3.125", out x);
            Assert.IsTrue(ok);
            Assert.AreEqual("-3.125", x.ToString());
            ok = Fixed20p12.TryParse("foo", out x);
            Assert.IsFalse(ok);
        }

        [TestMethod]
	    public void Fixed20p12CastFromDecimal()
        {
            var x = (Fixed20p12)3.125m;
            Assert.AreEqual("3.125", x.ToString());
        }

        [TestMethod]
	    public void Fixed20p12CastFromDouble()
        {
            var x = (Fixed20p12)(-1.75d);
            Assert.AreEqual("-1.75", x.ToString());
        }

        [TestMethod]
	    public void Fixed20p12CastToDecimal()
        {
            var x = (Fixed20p12)3.125m;
            var d = (decimal)x;
            Assert.AreEqual(3.125m, d);
        }

        [TestMethod]
	    public void Fixed20p12CastToDouble()
        {
            var x = (Fixed20p12)3.125d;
            var d = (double)x;
            Assert.AreEqual(3.125d, d);
        }

        [TestMethod]
	    public void Fixed20p12CastToFloat()
        {
            var x = (Fixed20p12)3.125f;
            var d = (float)x;
            Assert.AreEqual(3.125f, d);
        }

        [TestMethod]
        public void Fixed20p12Add()
        {
            var x = (Fixed20p12)3.125;
            var y = (Fixed20p12)(-1.75);
            var z = x + y;
            Assert.AreEqual((Fixed20p12)(3.125 - 1.75), z);
        }

        [TestMethod]
        public void Fixed20p12Subtract()
        {
            var x = (Fixed20p12)3.125;
            var y = (Fixed20p12)(-1.75);
            var z = x - y;
            Assert.AreEqual((Fixed20p12)(3.125 + 1.75), z);
        }

        [TestMethod]
        public void Fixed20p12Multiply()
        {
            var x = (Fixed20p12)3.25;
            var y = (Fixed20p12)(-1.75);
            var z = x * y;
            Assert.AreEqual((Fixed20p12)(3.25 * -1.75), z);
        }

        [TestMethod]
        public void Fixed20p12Divide()
        {
            var x = (Fixed20p12)1;
            var y = (Fixed20p12)3;
            var z = x / y;
            Assert.AreEqual((Fixed20p12)(1.0 / 3.0), z);
        }

        [TestMethod]
        public void Fixed20p12Floor()
        {
            var g = new Generator("Fixed20p12Floor");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed20p12)g.Double(-7, 7);
                var f = x.Floor();
                Assert.IsTrue(f <= x);
                Assert.IsTrue(x - f < Fixed20p12.One);
            }
        }

        [TestMethod]
        public void Fixed20p12Ceiling()
        {
            var g = new Generator("Fixed20p12Ceiling");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed20p12)g.Double(-7, 7);
                var f = x.Ceiling();
                Assert.IsTrue(f >= x);
                Assert.IsTrue(f - x < Fixed20p12.One);
            }
        }

        [TestMethod]
        public void Fixed20p12Round()
        {
            var g = new Generator("Fixed20p12Round");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed20p12)g.Double(-7, 7);
                var f = x.Round();
                Assert.IsTrue(Fixed20p12.Abs(f - x) <= (Fixed20p12)0.5);
            }
        }

        [TestMethod]
        public void Fixed20p12Truncate()
        {
            var g = new Generator("Fixed20p12Truncate");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed20p12)g.Double(-7, 7);
                var f = x.Truncate();
                
                if (x >= 0)
                {
                    Assert.IsTrue(f <= x);
                    Assert.IsTrue(x - f < Fixed20p12.One);
                }
                else
                {
                    Assert.IsTrue(f >= x);
                    Assert.IsTrue(f - x < Fixed20p12.One);
                }
            }
        }

        [TestMethod]
        public void Fixed20p12Frac()
        {
            var g = new Generator("Fixed20p12Frac");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed20p12)g.Double(-7, 7);
                var f = x.Frac();
                Assert.IsTrue(f >= 0);
                Assert.IsTrue(f < 1);
                var t = x.Truncate();
                if (x >= 0)
                    Assert.AreEqual(x, t + f);
                else
                    Assert.AreEqual(x, t - f);
            }
        }

        [TestMethod]
	    public void Fixed24p8Parse()
        {
            var x = Fixed24p8.Parse("3.125");
            Assert.AreEqual("3.125", x.ToString());
        }

        [TestMethod]
	    public void Fixed24p8TryParse()
        {
            Fixed24p8 x;
            var ok = Fixed24p8.TryParse("-3.125", out x);
            Assert.IsTrue(ok);
            Assert.AreEqual("-3.125", x.ToString());
            ok = Fixed24p8.TryParse("foo", out x);
            Assert.IsFalse(ok);
        }

        [TestMethod]
	    public void Fixed24p8CastFromDecimal()
        {
            var x = (Fixed24p8)3.125m;
            Assert.AreEqual("3.125", x.ToString());
        }

        [TestMethod]
	    public void Fixed24p8CastFromDouble()
        {
            var x = (Fixed24p8)(-1.75d);
            Assert.AreEqual("-1.75", x.ToString());
        }

        [TestMethod]
	    public void Fixed24p8CastToDecimal()
        {
            var x = (Fixed24p8)3.125m;
            var d = (decimal)x;
            Assert.AreEqual(3.125m, d);
        }

        [TestMethod]
	    public void Fixed24p8CastToDouble()
        {
            var x = (Fixed24p8)3.125d;
            var d = (double)x;
            Assert.AreEqual(3.125d, d);
        }

        [TestMethod]
	    public void Fixed24p8CastToFloat()
        {
            var x = (Fixed24p8)3.125f;
            var d = (float)x;
            Assert.AreEqual(3.125f, d);
        }

        [TestMethod]
        public void Fixed24p8Add()
        {
            var x = (Fixed24p8)3.125;
            var y = (Fixed24p8)(-1.75);
            var z = x + y;
            Assert.AreEqual((Fixed24p8)(3.125 - 1.75), z);
        }

        [TestMethod]
        public void Fixed24p8Subtract()
        {
            var x = (Fixed24p8)3.125;
            var y = (Fixed24p8)(-1.75);
            var z = x - y;
            Assert.AreEqual((Fixed24p8)(3.125 + 1.75), z);
        }

        [TestMethod]
        public void Fixed24p8Multiply()
        {
            var x = (Fixed24p8)3.25;
            var y = (Fixed24p8)(-1.75);
            var z = x * y;
            Assert.AreEqual((Fixed24p8)(3.25 * -1.75), z);
        }

        [TestMethod]
        public void Fixed24p8Divide()
        {
            var x = (Fixed24p8)1;
            var y = (Fixed24p8)3;
            var z = x / y;
            Assert.AreEqual((Fixed24p8)(1.0 / 3.0), z);
        }

        [TestMethod]
        public void Fixed24p8Floor()
        {
            var g = new Generator("Fixed24p8Floor");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed24p8)g.Double(-7, 7);
                var f = x.Floor();
                Assert.IsTrue(f <= x);
                Assert.IsTrue(x - f < Fixed24p8.One);
            }
        }

        [TestMethod]
        public void Fixed24p8Ceiling()
        {
            var g = new Generator("Fixed24p8Ceiling");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed24p8)g.Double(-7, 7);
                var f = x.Ceiling();
                Assert.IsTrue(f >= x);
                Assert.IsTrue(f - x < Fixed24p8.One);
            }
        }

        [TestMethod]
        public void Fixed24p8Round()
        {
            var g = new Generator("Fixed24p8Round");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed24p8)g.Double(-7, 7);
                var f = x.Round();
                Assert.IsTrue(Fixed24p8.Abs(f - x) <= (Fixed24p8)0.5);
            }
        }

        [TestMethod]
        public void Fixed24p8Truncate()
        {
            var g = new Generator("Fixed24p8Truncate");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed24p8)g.Double(-7, 7);
                var f = x.Truncate();
                
                if (x >= 0)
                {
                    Assert.IsTrue(f <= x);
                    Assert.IsTrue(x - f < Fixed24p8.One);
                }
                else
                {
                    Assert.IsTrue(f >= x);
                    Assert.IsTrue(f - x < Fixed24p8.One);
                }
            }
        }

        [TestMethod]
        public void Fixed24p8Frac()
        {
            var g = new Generator("Fixed24p8Frac");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed24p8)g.Double(-7, 7);
                var f = x.Frac();
                Assert.IsTrue(f >= 0);
                Assert.IsTrue(f < 1);
                var t = x.Truncate();
                if (x >= 0)
                    Assert.AreEqual(x, t + f);
                else
                    Assert.AreEqual(x, t - f);
            }
        }

        [TestMethod]
	    public void Fixed28p4Parse()
        {
            var x = Fixed28p4.Parse("3.125");
            Assert.AreEqual("3.125", x.ToString());
        }

        [TestMethod]
	    public void Fixed28p4TryParse()
        {
            Fixed28p4 x;
            var ok = Fixed28p4.TryParse("-3.125", out x);
            Assert.IsTrue(ok);
            Assert.AreEqual("-3.125", x.ToString());
            ok = Fixed28p4.TryParse("foo", out x);
            Assert.IsFalse(ok);
        }

        [TestMethod]
	    public void Fixed28p4CastFromDecimal()
        {
            var x = (Fixed28p4)3.125m;
            Assert.AreEqual("3.125", x.ToString());
        }

        [TestMethod]
	    public void Fixed28p4CastFromDouble()
        {
            var x = (Fixed28p4)(-1.75d);
            Assert.AreEqual("-1.75", x.ToString());
        }

        [TestMethod]
	    public void Fixed28p4CastToDecimal()
        {
            var x = (Fixed28p4)3.125m;
            var d = (decimal)x;
            Assert.AreEqual(3.125m, d);
        }

        [TestMethod]
	    public void Fixed28p4CastToDouble()
        {
            var x = (Fixed28p4)3.125d;
            var d = (double)x;
            Assert.AreEqual(3.125d, d);
        }

        [TestMethod]
	    public void Fixed28p4CastToFloat()
        {
            var x = (Fixed28p4)3.125f;
            var d = (float)x;
            Assert.AreEqual(3.125f, d);
        }

        [TestMethod]
        public void Fixed28p4Add()
        {
            var x = (Fixed28p4)3.125;
            var y = (Fixed28p4)(-1.75);
            var z = x + y;
            Assert.AreEqual((Fixed28p4)(3.125 - 1.75), z);
        }

        [TestMethod]
        public void Fixed28p4Subtract()
        {
            var x = (Fixed28p4)3.125;
            var y = (Fixed28p4)(-1.75);
            var z = x - y;
            Assert.AreEqual((Fixed28p4)(3.125 + 1.75), z);
        }

        [TestMethod]
        public void Fixed28p4Multiply()
        {
            var x = (Fixed28p4)3.25;
            var y = (Fixed28p4)(-1.75);
            var z = x * y;
            Assert.AreEqual((Fixed28p4)(3.25 * -1.75), z);
        }

        [TestMethod]
        public void Fixed28p4Divide()
        {
            var x = (Fixed28p4)1;
            var y = (Fixed28p4)3;
            var z = x / y;
            Assert.AreEqual((Fixed28p4)(1.0 / 3.0), z);
        }

        [TestMethod]
        public void Fixed28p4Floor()
        {
            var g = new Generator("Fixed28p4Floor");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed28p4)g.Double(-7, 7);
                var f = x.Floor();
                Assert.IsTrue(f <= x);
                Assert.IsTrue(x - f < Fixed28p4.One);
            }
        }

        [TestMethod]
        public void Fixed28p4Ceiling()
        {
            var g = new Generator("Fixed28p4Ceiling");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed28p4)g.Double(-7, 7);
                var f = x.Ceiling();
                Assert.IsTrue(f >= x);
                Assert.IsTrue(f - x < Fixed28p4.One);
            }
        }

        [TestMethod]
        public void Fixed28p4Round()
        {
            var g = new Generator("Fixed28p4Round");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed28p4)g.Double(-7, 7);
                var f = x.Round();
                Assert.IsTrue(Fixed28p4.Abs(f - x) <= (Fixed28p4)0.5);
            }
        }

        [TestMethod]
        public void Fixed28p4Truncate()
        {
            var g = new Generator("Fixed28p4Truncate");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed28p4)g.Double(-7, 7);
                var f = x.Truncate();
                
                if (x >= 0)
                {
                    Assert.IsTrue(f <= x);
                    Assert.IsTrue(x - f < Fixed28p4.One);
                }
                else
                {
                    Assert.IsTrue(f >= x);
                    Assert.IsTrue(f - x < Fixed28p4.One);
                }
            }
        }

        [TestMethod]
        public void Fixed28p4Frac()
        {
            var g = new Generator("Fixed28p4Frac");

            for (int i = 0; i < 100; i++)
            {
                var x = (Fixed28p4)g.Double(-7, 7);
                var f = x.Frac();
                Assert.IsTrue(f >= 0);
                Assert.IsTrue(f < 1);
                var t = x.Truncate();
                if (x >= 0)
                    Assert.AreEqual(x, t + f);
                else
                    Assert.AreEqual(x, t - f);
            }
        }

    }
}
