<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

/*
ByteCodingTests.cs

<#@ include file="../../License.txt" #>
*/

using System;
using System.Collections.Generic;
using System.IO;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Foundations.RandomNumbers;

namespace Foundations.Coding
{
    /// <summary>
    /// 
    /// </summary>
    [TestClass]
    public class ByteCodingTests
    {
<#
    Test("Base128");

    foreach (var type in types)
    {
        var T = type.Name;
#>
        private void Encoding<#= T #>Test(IByteEncoding encoding)
        {
            var stream = new MemoryStream();
            var values = new List<<#= T #>>();
            var g = new Generator(encoding.GetType().Name);

            for (int i = 0; i < 1000; i++)
            {
<#
        if (T == "DateTime")
        {
#>
                var v = new DateTime(g.Int64(DateTime.MinValue.Ticks, DateTime.MaxValue.Ticks - DateTime.MinValue.Ticks + 1));
<#
        }
        else if (T == "Char")
        {
#>
                var v = (char)g.UInt16();
<#
        }
        else if (T == "Boolean")
        {
#>
                var v = g.Boolean();
<#
        }
        else
        {
#>
                var v = (<#= T #>)(g.<#= T #>() >> g.Int32(<#= 8 * System.Runtime.InteropServices.Marshal.SizeOf(type) #>));
<#
        }
#>
                values.Add(v);
                encoding.Write(stream, v);
            }

            stream.Position = 0;

            for (int i = 0; i < values.Count; i++)
            {
                var v = encoding.Read<#= T #>(stream);
                Assert.AreEqual(values[i], v);
            }

            try
            {
                using (var r = new RandomStream(g))
                {
                    for (int i = 0; i < 500; i++)
                    {
                        encoding.Read<#= T #>(r);
                    }
                }

                Assert.Fail("Expected InvalidDataException");
            }
            catch(Exception e)
            {
                Assert.AreEqual("InvalidDataException", e.GetType().Name);
            }
        }

<#
    }
#>
    }
}
<#+
List<Type> types = new List<Type> { typeof(byte), typeof(sbyte), typeof(char), typeof(short),
typeof(ushort), typeof(int), typeof(uint), typeof(long), typeof(ulong), typeof(DateTime), typeof(bool) };

void Test(string encoding)
{
    foreach (var type in types)
    {
        var T = type.Name;
#>
        [TestMethod]
        public void <#= encoding #><#= T #>Test()
        {
            Encoding<#= T #>Test(Codes.<#= encoding #>);
        }

<#+
    }
}
#>