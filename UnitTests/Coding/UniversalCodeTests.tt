<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

/*
UniversalCodeTests.cs

<#@ include file="../../License.txt" #>
*/

using System;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Foundations.RandomNumbers;

namespace Foundations.Coding
{
    /// <summary>
    /// 
    /// </summary>
    [TestClass]
    public class UniversalCodeTests
    {
<#
    Test("UnaryZeros");
    Test("UnaryOnes");
    Test("EliasGamma");
    Test("EliasDelta");
    Test("EliasOmega");
    Test("Fibonacci");
    Test("Levenshtein");
    Test("EliasFibonacci");
    ParameterizedTest("TruncatedBinary", "6000");
    ParameterizedTest("Golomb", "141");
    ParameterizedTest("Rice", "8");
#>
        private void EncodingTest(IEncoding<int, Code> encoding)
        {
            var writer = new BitWriter(1000);
            var values = new List<int>();
            var g = new Generator(encoding.GetType().Name);

            for (int i = 0; i < 1000; i++)
            {
                int v = g.Int32() >> g.Int32(32);
                if (v < encoding.MinEncodable || v > encoding.MaxEncodable) continue;
                values.Add(v);
                writer.Write(encoding.GetCode(v));
            }

            var buffer = writer.ToArray();
            var reader = new BitReader(buffer);

            for (int i = 0; i < values.Count; i++)
            {
                int v = encoding.Read(reader);
                Assert.AreEqual(values[i], v);
            }
        }
    }
}
<#+
void Test(string encoding)
{
#>
        [TestMethod]
        public void <#= encoding #>Test()
        {
            EncodingTest(Codes.<#= encoding #>);
        }

<#+
}

void ParameterizedTest(string encoding, string args)
{
#>
        [TestMethod]
        public void <#= encoding #>Test()
        {
            EncodingTest(Codes.<#= encoding #>(<#= args #>));
        }

<#+
}
#>