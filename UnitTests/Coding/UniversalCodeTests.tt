<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

/*
UniversalCodeTests.cs

<#@ include file="../../License.txt" #>
*/

using System;
using Foundations.RandomNumbers;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Foundations.Coding
{
    /// <summary>
    /// 
    /// </summary>
    [TestClass]
    public class UniversalCodeTests
    {
<#
    Test("EliasGamma");
    Test("EliasDelta");
#>
        private void EncodingTest(IEncoding<int, Code> encoding)
        {
            for (int i = encoding.MinEncodable; i < 5000; i++)
            {
                var code = encoding.GetCode(i);
                var value = encoding.GetValue(code);
                Assert.AreEqual(i, value);
            }

            for (int i = encoding.MaxEncodable - 5000; i > 0 && i <= encoding.MaxEncodable; i++)
            {
                var code = encoding.GetCode(i);
                var value = encoding.GetValue(code);
                Assert.AreEqual(i, value);
            }

            var rand = new Generator($"{encoding.GetType().Name}Test");

            for (int n = 0; n < 1000; n++)
            {
                int i = rand.Int32();
                if (i < encoding.MinEncodable || i > encoding.MaxEncodable) continue;
                var code = encoding.GetCode(i);
                var value = encoding.GetValue(code);
                Assert.AreEqual(i, value);
            }
        }
    }
}
<#+
void Test(string encoding)
{
#>
        [TestMethod]
        public void <#= encoding #>Test()
        {
            EncodingTest(Codes.<#= encoding #>);
        }

<#+
}
#>