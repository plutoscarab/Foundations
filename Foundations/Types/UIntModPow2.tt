<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

/*
UIntModPow2.cs

<#@ include file="../../License.txt" #>
*/

using System;

namespace Foundations.Types
{
<#
Enumerable.Range(1, 63).ToList().ForEach(Make);
#>
}
<#+
void Make(int n)
{
    var T = "UInt" + n;
    if (n == 16 || n == 32) T += "Ex";
    var mod = $"& 0x{(1L<<n)-1:X}";
    var U = n <= 8 ? "byte" : n <= 16 ? "ushort" : n <= 32 ? "uint" : "ulong";    
    var L = n <= 16 ? "int" : "long";
#>
    /// <summary>
    /// Unsigned <#= n #>-bit integer.
    /// </summary>
    public struct <#= T #> : IEquatable<<#= T #>>, IComparable<<#= T #>>
    {
        /// <summary>
        /// The numeric value of the <see cref="<#= T #>"/>.
        /// </summary>
        public readonly <#= U #> Value;

        /// <summary>
        /// Creates a <see cref="<#= T #>"/>.
        /// </summary>
        public <#= T #>(<#= U #> value)
        {
            Value = (<#= U #>)(value <#= mod #>);
        }

        /// <summary>
        /// Creates a <see cref="<#= T #>"/>.
        /// </summary>
        public <#= T #>(int value)
        {
            Value = (<#= U #>)(value <#= mod #>);
        }

        /// <summary>
        /// Creates a <see cref="<#= T #>"/>.
        /// </summary>
        public <#= T #>(long value)
        {
            Value = (<#= U #>)(value <#= mod #>);
        }

        /// <summary>
        /// Explicitly converts a <see cref="<#= T #>"/> to a <see cref="System.Int32"/>.
        /// </summary>
        public static explicit operator <#= U #>(<#= T #> value)
        { return value.Value; }

        /// <summary>
        /// Implicitly converts a <see cref="System.Int32"/> to a <see cref="<#= T #>"/>.
        /// </summary>
        public static implicit operator <#= T #>(<#= U #> value)
        { return new <#= T #>(value); }

        /// <summary>
        /// Implementation of <see cref="object.ToString"/>.
        /// </summary>
        public override string ToString()
        { return Value.ToString(); }
        
        /// <summary>
        /// Implementation of <see cref="object.GetHashCode"/>.
        /// </summary>
        public override int GetHashCode()
        { return Value.GetHashCode(); }

        /// <summary>
        /// Implementation of <see cref="object.Equals(object)"/>.
        /// </summary>
        public override bool Equals(object obj)
        { return obj is <#= T #> && Equals((<#= T #>)obj); }

        /// <summary>
        /// Implementation of <see cref="IEquatable{<#= T #>}"/>.
        /// </summary>
        public bool Equals(<#= T #> other)
        { return Value == other.Value; }

        /// <summary>
        /// Equality operator.
        /// </summary>
        public static bool operator ==(<#= T #> a, <#= T #> b)
        { return a.Equals(b); }

        /// <summary>
        /// Inequality operator.
        /// </summary>
        public static bool operator !=(<#= T #> a, <#= T #> b)
        { return !a.Equals(b); }

        /// <summary>
        /// Implementation of <see cref="IComparable{<#= T #>}"/>.
        /// </summary>
        public int CompareTo(<#= T #> other)
        {
            return Value.CompareTo(other.Value);
        }

        /// <summary>
        /// Addition operator.
        /// </summary>
        public static <#= T #> operator +(<#= T #> a, <#= T #> b)
        {
            return new <#= T #>(a.Value + b.Value);
        }

        /// <summary>
        /// Add.
        /// </summary>
        public <#= T #> Add(<#= T #> other)
        {
            return this + other;
        }

        /// <summary>
        /// Subtraction operator.
        /// </summary>
        public static <#= T #> operator -(<#= T #> a, <#= T #> b)
        {
            return new <#= T #>(a.Value - b.Value);
        }

        /// <summary>
        /// Subtract.
        /// </summary>
        public <#= T #> Subtract(<#= T #> other)
        {
            return this - other;
        }

        /// <summary>
        /// Unary negation operator.
        /// </summary>
        public static <#= T #> operator -(<#= T #> value)
        {
            return new <#= T #>(0 - value.Value);
        }

        /// <summary>
        /// Multiplication operator.
        /// </summary>
        public static <#= T #> operator *(<#= T #> a, <#= T #> b)
        {
            return new <#= T #>(a.Value * b.Value);
        }

        /// <summary>
        /// Multiply.
        /// </summary>
        public <#= T #> Multiply(<#= T #> other)
        {
            return this * other;
        }

        /// <summary>
        /// Division operator.
        /// </summary>
        public static <#= T #> operator /(<#= T #> a, <#= T #> b)
        {
            return new <#= T #>(a.Value / b.Value);
        }

        /// <summary>
        /// Divide.
        /// </summary>
        public <#= T #> Divide(<#= T #> other)
        {
            return this / other;
        }

        /// <summary>
        /// Modulo operator.
        /// </summary>
        public static <#= T #> operator %(<#= T #> a, <#= T #> b)
        {
            return new <#= T #>(a.Value % b.Value);
        }

        /// <summary>
        /// Modulo.
        /// </summary>
        public <#= T #> Modulo(<#= T #> other)
        {
            return this % other;
        }
<#+ if (n <= 32) { #>

        /// <summary>
        /// Modular exponentiation.
        /// </summary>
        public static <#= T #> Pow(<#= T #> value, int exponent)
        {
            if (exponent < 0) throw new ArgumentOutOfRangeException(nameof(exponent));
            if (exponent == 0) return 1;
            if (value.Value == 0) return 0;
            <#= L #> result = 1;
            <#= L #> b = value.Value;
            var e = Math.Abs(exponent);

            while (e > 0)
            {
                if ((e & 1) == 1)
                {
                    result = (result * b) <#= mod #>;
                }

                e >>= 1;
                b = (b * b) <#= mod #>;
            }

            return new <#= T #>(result);
        }
<#+ } #>

        /// <summary>
        /// Bitwise AND.
        /// </summary>
        public static <#= T #> operator &(<#= T #> a, <#= T #> b)
        {
            return new <#= T #>(a.Value & b.Value);
        }

        /// <summary>
        /// Bitwise AND.
        /// </summary>
        public <#= T #> And(<#= T #> other)
        {
            return this & other;
        }

        /// <summary>
        /// Bitwise OR.
        /// </summary>
        public static <#= T #> operator |(<#= T #> a, <#= T #> b)
        {
            return new <#= T #>(a.Value | b.Value);
        }

        /// <summary>
        /// Bitwise OR.
        /// </summary>
        public <#= T #> Or(<#= T #> other)
        {
            return this | other;
        }

        /// <summary>
        /// Bitwise XOR.
        /// </summary>
        public static <#= T #> operator ^(<#= T #> a, <#= T #> b)
        {
            return new <#= T #>(a.Value ^ b.Value);
        }

        /// <summary>
        /// Bitwise XOR.
        /// </summary>
        public <#= T #> Xor(<#= T #> other)
        {
            return this ^ other;
        }

        /// <summary>
        /// Bitwise NOT.
        /// </summary>
        public static <#= T #> operator ~(<#= T #> value)
        {
            return new <#= T #>(~value.Value);
        }

        /// <summary>
        /// Bitwise NOT.
        /// </summary>
        public <#= T #> Not()
        {
            return ~this;
        }

        /// <summary>
        /// Right-shift operator.
        /// </summary>
        public static <#= T #> operator >>(<#= T #> value, int shift)
        {
            return new <#= T #>(value.Value >> shift);
        }

        /// <summary>
        /// Left-shift operator.
        /// </summary>
        public static <#= T #> operator <<(<#= T #> value, int shift)
        {
            return new <#= T #>(value.Value << shift);
        }
    }

<#+
}
#>