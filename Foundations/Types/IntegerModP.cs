
/*
IntegerModP.cs

Copyright © 2016 Pluto Scarab Software. Most Rights Reserved.
Author: Bret Mulvey

This work is licensed under the Creative Commons Attribution-ShareAlike 4.0 International License. 
To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/4.0/.

THIS IS AN AUTO-GENERATED SOURCE FILE. DO NOT EDIT THIS FILE DIRECTLY.
INSTEAD, EDIT THE .tt FILE WITH THE SAME NAME AND RE-RUN THE TEXT TEMPLATING
FILE GENERATOR. IF YOU SAVE THE FILE IN VISUAL STUDIO IT WILL DO THIS FOR YOU.
*/

using System;

namespace Foundations.Types
{
    /// <summary>
    /// Integer modulo 2.
    /// </summary>
    public struct Z2 : IEquatable<Z2>
    {
        private static readonly byte[] mul = new byte[] { 0,0,0,1, };
        private static readonly byte[] inv = new byte[] { 0,1, };
        private static readonly byte[] div = new byte[] { 0,0,0,1, };
        private static readonly byte[] rem = new byte[] { 0,0,0,0, };

        /// <summary>
        /// The numeric value of the <see cref="Z2"/>.
        /// </summary>
        public readonly int Value;

        /// <summary>
        /// Creates a <see cref="Z2"/>.
        /// </summary>
        public Z2(int value)
        {
            Value = value & 0x1;
        }

        private Z2(bool dummy, int value)
        { Value = value; }

        /// <summary>
        /// Explicitly converts a <see cref="Z2"/> to a <see cref="System.Int32"/>.
        /// </summary>
        public static explicit operator int(Z2 value)
        { return value.Value; }

        /// <summary>
        /// Implicitly converts a <see cref="System.Int32"/> to a <see cref="Z2"/>.
        /// </summary>
        public static implicit operator Z2(int value)
        { return new Z2(value); }

        /// <summary>
        /// </summary>
        public override string ToString()
        { return Value.ToString(); }
        
        /// <summary>
        /// </summary>
        public override int GetHashCode()
        { return Value.GetHashCode(); }

        /// <summary>
        /// </summary>
        public override bool Equals(object obj)
        { return obj is Z2 && Equals((Z2)obj); }

        /// <summary>
        /// </summary>
        public bool Equals(Z2 other)
        { return Value == other.Value; }

        /// <summary>
        /// </summary>
        public static bool operator ==(Z2 a, Z2 b)
        { return a.Equals(b); }

        /// <summary>
        /// </summary>
        public static bool operator !=(Z2 a, Z2 b)
        { return !a.Equals(b); }

        /// <summary>
        /// </summary>
        public static Z2 operator +(Z2 a, Z2 b)
        {
            var result = a.Value + b.Value;
            if (result >= 2) result -= 2;
            return new Z2(false, result);
        }

        /// <summary>
        /// </summary>
        public Z2 Add(Z2 other)
        {
            return this + other;
        }

        /// <summary>
        /// </summary>
        public static Z2 operator -(Z2 a, Z2 b)
        {
            var result = a.Value + b.Value;
            if (result < 0) result += 2;
            return new Z2(false, result);
        }

        /// <summary>
        /// </summary>
        public Z2 Subtract(Z2 other)
        {
            return this - other;
        }

        /// <summary>
        /// </summary>
        public static Z2 operator -(Z2 value)
        {
            if (value.Value == 0) return value;
            return new Z2(false, 2 - value.Value);
        }

        /// <summary>
        /// </summary>
        public static Z2 operator *(Z2 a, Z2 b)
        {
            return new Z2(false, mul[a.Value * 2 + b.Value]);
        }

        /// <summary>
        /// </summary>
        public Z2 Multiply(Z2 other)
        {
            return this * other;
        }

        /// <summary>
        /// </summary>
        public static Z2 operator /(Z2 a, Z2 b)
        {
            return new Z2(false, div[a.Value * 2 + b.Value]);
        }

        /// <summary>
        /// </summary>
        public Z2 Divide(Z2 other)
        {
            return this / other;
        }

        /// <summary>
        /// </summary>
        public static Z2 operator %(Z2 a, Z2 b)
        {
            return new Z2(false, rem[a.Value * 2 + b.Value]);
        }

        /// <summary>
        /// </summary>
        public Z2 Modulo(Z2 other)
        {
            return this % other;
        }

        /// <summary>
        /// </summary>
        public static Z2 DivRem(Z2 a, Z2 b, out Z2 r)
        {
            int index = a.Value * 2 + b.Value;
            r = new Z2(false, rem[index]);
            return new Z2(false, div[index]);
        }

        /// <summary>
        /// </summary>
        public Z2 Inverse()
        {
            return Inverse(this);
        }

        /// <summary>
        /// </summary>
        public static Z2 Inverse(Z2 value)
        {
            var result = inv[value.Value];
            if (result == 0) throw new DivideByZeroException();
            return new Z2(false, div[result]);
        }

        /// <summary>
        /// </summary>
        public static Z2 Pow(Z2 value, int exponent)
        {
            if (exponent == 0) return 1;
            var result = 1;
            var b = value.Value;
            var e = Math.Abs(exponent);

            while (e > 0)
            {
                if ((e & 1) == 1)
                {
                    result = (result * b) & 0x1;
                }

                e >>= 1;
                b = (b * b) & 0x1;
            }

            if (exponent < 0) 
            {
                result = inv[result];
                if (result == 0) throw new DivideByZeroException();
            }

            return new Z2(false, result);
        }

        /// <summary>
        /// </summary>
        public static Z2 operator &(Z2 a, Z2 b)
        {
            return new Z2(false, a.Value & b.Value);
        }

        /// <summary>
        /// </summary>
        public Z2 And(Z2 other)
        {
            return this & other;
        }

        /// <summary>
        /// </summary>
        public static Z2 operator |(Z2 a, Z2 b)
        {
            return new Z2(false, a.Value | b.Value);
        }

        /// <summary>
        /// </summary>
        public Z2 Or(Z2 other)
        {
            return this | other;
        }

        /// <summary>
        /// </summary>
        public static Z2 operator ^(Z2 a, Z2 b)
        {
            return new Z2(false, a.Value ^ b.Value);
        }

        /// <summary>
        /// </summary>
        public Z2 Xor(Z2 other)
        {
            return this ^ other;
        }

        /// <summary>
        /// </summary>
        public static Z2 operator ~(Z2 value)
        {
            return new Z2(false, ~value.Value);
        }

        /// <summary>
        /// </summary>
        public Z2 Not()
        {
            return ~this;
        }

    }

    /// <summary>
    /// Integer modulo 3.
    /// </summary>
    public struct Z3 : IEquatable<Z3>
    {
        private static readonly byte[] mul = new byte[] { 0,0,0,0,1,2,0,2,1, };
        private static readonly byte[] inv = new byte[] { 0,1,2, };
        private static readonly byte[] div = new byte[] { 0,0,0,0,1,0,0,2,1, };
        private static readonly byte[] rem = new byte[] { 0,0,0,0,0,1,0,0,0, };

        /// <summary>
        /// The numeric value of the <see cref="Z3"/>.
        /// </summary>
        public readonly int Value;

        /// <summary>
        /// Creates a <see cref="Z3"/>.
        /// </summary>
        public Z3(int value)
        {
            Value = value % 3;
            if (Value < 0) Value += 3;
        }

        private Z3(bool dummy, int value)
        { Value = value; }

        /// <summary>
        /// Explicitly converts a <see cref="Z3"/> to a <see cref="System.Int32"/>.
        /// </summary>
        public static explicit operator int(Z3 value)
        { return value.Value; }

        /// <summary>
        /// Implicitly converts a <see cref="System.Int32"/> to a <see cref="Z3"/>.
        /// </summary>
        public static implicit operator Z3(int value)
        { return new Z3(value); }

        /// <summary>
        /// </summary>
        public override string ToString()
        { return Value.ToString(); }
        
        /// <summary>
        /// </summary>
        public override int GetHashCode()
        { return Value.GetHashCode(); }

        /// <summary>
        /// </summary>
        public override bool Equals(object obj)
        { return obj is Z3 && Equals((Z3)obj); }

        /// <summary>
        /// </summary>
        public bool Equals(Z3 other)
        { return Value == other.Value; }

        /// <summary>
        /// </summary>
        public static bool operator ==(Z3 a, Z3 b)
        { return a.Equals(b); }

        /// <summary>
        /// </summary>
        public static bool operator !=(Z3 a, Z3 b)
        { return !a.Equals(b); }

        /// <summary>
        /// </summary>
        public static Z3 operator +(Z3 a, Z3 b)
        {
            var result = a.Value + b.Value;
            if (result >= 3) result -= 3;
            return new Z3(false, result);
        }

        /// <summary>
        /// </summary>
        public Z3 Add(Z3 other)
        {
            return this + other;
        }

        /// <summary>
        /// </summary>
        public static Z3 operator -(Z3 a, Z3 b)
        {
            var result = a.Value + b.Value;
            if (result < 0) result += 3;
            return new Z3(false, result);
        }

        /// <summary>
        /// </summary>
        public Z3 Subtract(Z3 other)
        {
            return this - other;
        }

        /// <summary>
        /// </summary>
        public static Z3 operator -(Z3 value)
        {
            if (value.Value == 0) return value;
            return new Z3(false, 3 - value.Value);
        }

        /// <summary>
        /// </summary>
        public static Z3 operator *(Z3 a, Z3 b)
        {
            return new Z3(false, mul[a.Value * 3 + b.Value]);
        }

        /// <summary>
        /// </summary>
        public Z3 Multiply(Z3 other)
        {
            return this * other;
        }

        /// <summary>
        /// </summary>
        public static Z3 operator /(Z3 a, Z3 b)
        {
            return new Z3(false, div[a.Value * 3 + b.Value]);
        }

        /// <summary>
        /// </summary>
        public Z3 Divide(Z3 other)
        {
            return this / other;
        }

        /// <summary>
        /// </summary>
        public static Z3 operator %(Z3 a, Z3 b)
        {
            return new Z3(false, rem[a.Value * 3 + b.Value]);
        }

        /// <summary>
        /// </summary>
        public Z3 Modulo(Z3 other)
        {
            return this % other;
        }

        /// <summary>
        /// </summary>
        public static Z3 DivRem(Z3 a, Z3 b, out Z3 r)
        {
            int index = a.Value * 3 + b.Value;
            r = new Z3(false, rem[index]);
            return new Z3(false, div[index]);
        }

        /// <summary>
        /// </summary>
        public Z3 Inverse()
        {
            return Inverse(this);
        }

        /// <summary>
        /// </summary>
        public static Z3 Inverse(Z3 value)
        {
            var result = inv[value.Value];
            if (result == 0) throw new DivideByZeroException();
            return new Z3(false, div[result]);
        }

        /// <summary>
        /// </summary>
        public static Z3 Pow(Z3 value, int exponent)
        {
            if (exponent == 0) return 1;
            var result = 1;
            var b = value.Value;
            var e = Math.Abs(exponent);

            while (e > 0)
            {
                if ((e & 1) == 1)
                {
                    result = (result * b) % 3;
                }

                e >>= 1;
                b = (b * b) % 3;
            }

            if (exponent < 0) 
            {
                result = inv[result];
                if (result == 0) throw new DivideByZeroException();
            }

            return new Z3(false, result);
        }

    }

    /// <summary>
    /// Integer modulo 4.
    /// </summary>
    /// <remarks>
    /// Note that this is not isomorphic to a finite field because 4 is composite.
    /// </remarks>
    public struct Z4 : IEquatable<Z4>
    {
        private static readonly byte[] mul = new byte[] { 0,0,0,0,0,1,2,3,0,2,0,2,0,3,2,1, };
        private static readonly byte[] inv = new byte[] { 0,1,0,3, };
        private static readonly byte[] div = new byte[] { 0,0,0,0,0,1,0,0,0,2,1,0,0,3,1,1, };
        private static readonly byte[] rem = new byte[] { 0,0,0,0,0,0,1,1,0,0,0,2,0,0,1,0, };

        /// <summary>
        /// The numeric value of the <see cref="Z4"/>.
        /// </summary>
        public readonly int Value;

        /// <summary>
        /// Creates a <see cref="Z4"/>.
        /// </summary>
        public Z4(int value)
        {
            Value = value & 0x3;
        }

        private Z4(bool dummy, int value)
        { Value = value; }

        /// <summary>
        /// Explicitly converts a <see cref="Z4"/> to a <see cref="System.Int32"/>.
        /// </summary>
        public static explicit operator int(Z4 value)
        { return value.Value; }

        /// <summary>
        /// Implicitly converts a <see cref="System.Int32"/> to a <see cref="Z4"/>.
        /// </summary>
        public static implicit operator Z4(int value)
        { return new Z4(value); }

        /// <summary>
        /// </summary>
        public override string ToString()
        { return Value.ToString(); }
        
        /// <summary>
        /// </summary>
        public override int GetHashCode()
        { return Value.GetHashCode(); }

        /// <summary>
        /// </summary>
        public override bool Equals(object obj)
        { return obj is Z4 && Equals((Z4)obj); }

        /// <summary>
        /// </summary>
        public bool Equals(Z4 other)
        { return Value == other.Value; }

        /// <summary>
        /// </summary>
        public static bool operator ==(Z4 a, Z4 b)
        { return a.Equals(b); }

        /// <summary>
        /// </summary>
        public static bool operator !=(Z4 a, Z4 b)
        { return !a.Equals(b); }

        /// <summary>
        /// </summary>
        public static Z4 operator +(Z4 a, Z4 b)
        {
            var result = a.Value + b.Value;
            if (result >= 4) result -= 4;
            return new Z4(false, result);
        }

        /// <summary>
        /// </summary>
        public Z4 Add(Z4 other)
        {
            return this + other;
        }

        /// <summary>
        /// </summary>
        public static Z4 operator -(Z4 a, Z4 b)
        {
            var result = a.Value + b.Value;
            if (result < 0) result += 4;
            return new Z4(false, result);
        }

        /// <summary>
        /// </summary>
        public Z4 Subtract(Z4 other)
        {
            return this - other;
        }

        /// <summary>
        /// </summary>
        public static Z4 operator -(Z4 value)
        {
            if (value.Value == 0) return value;
            return new Z4(false, 4 - value.Value);
        }

        /// <summary>
        /// </summary>
        public static Z4 operator *(Z4 a, Z4 b)
        {
            return new Z4(false, mul[a.Value * 4 + b.Value]);
        }

        /// <summary>
        /// </summary>
        public Z4 Multiply(Z4 other)
        {
            return this * other;
        }

        /// <summary>
        /// </summary>
        public static Z4 operator /(Z4 a, Z4 b)
        {
            return new Z4(false, div[a.Value * 4 + b.Value]);
        }

        /// <summary>
        /// </summary>
        public Z4 Divide(Z4 other)
        {
            return this / other;
        }

        /// <summary>
        /// </summary>
        public static Z4 operator %(Z4 a, Z4 b)
        {
            return new Z4(false, rem[a.Value * 4 + b.Value]);
        }

        /// <summary>
        /// </summary>
        public Z4 Modulo(Z4 other)
        {
            return this % other;
        }

        /// <summary>
        /// </summary>
        public static Z4 DivRem(Z4 a, Z4 b, out Z4 r)
        {
            int index = a.Value * 4 + b.Value;
            r = new Z4(false, rem[index]);
            return new Z4(false, div[index]);
        }

        /// <summary>
        /// </summary>
        public Z4 Inverse()
        {
            return Inverse(this);
        }

        /// <summary>
        /// </summary>
        public static Z4 Inverse(Z4 value)
        {
            var result = inv[value.Value];
            if (result == 0) throw new DivideByZeroException();
            return new Z4(false, div[result]);
        }

        /// <summary>
        /// </summary>
        public static Z4 Pow(Z4 value, int exponent)
        {
            if (exponent == 0) return 1;
            var result = 1;
            var b = value.Value;
            var e = Math.Abs(exponent);

            while (e > 0)
            {
                if ((e & 1) == 1)
                {
                    result = (result * b) & 0x3;
                }

                e >>= 1;
                b = (b * b) & 0x3;
            }

            if (exponent < 0) 
            {
                result = inv[result];
                if (result == 0) throw new DivideByZeroException();
            }

            return new Z4(false, result);
        }

        /// <summary>
        /// </summary>
        public static Z4 operator &(Z4 a, Z4 b)
        {
            return new Z4(false, a.Value & b.Value);
        }

        /// <summary>
        /// </summary>
        public Z4 And(Z4 other)
        {
            return this & other;
        }

        /// <summary>
        /// </summary>
        public static Z4 operator |(Z4 a, Z4 b)
        {
            return new Z4(false, a.Value | b.Value);
        }

        /// <summary>
        /// </summary>
        public Z4 Or(Z4 other)
        {
            return this | other;
        }

        /// <summary>
        /// </summary>
        public static Z4 operator ^(Z4 a, Z4 b)
        {
            return new Z4(false, a.Value ^ b.Value);
        }

        /// <summary>
        /// </summary>
        public Z4 Xor(Z4 other)
        {
            return this ^ other;
        }

        /// <summary>
        /// </summary>
        public static Z4 operator ~(Z4 value)
        {
            return new Z4(false, ~value.Value);
        }

        /// <summary>
        /// </summary>
        public Z4 Not()
        {
            return ~this;
        }

    }

    /// <summary>
    /// Integer modulo 5.
    /// </summary>
    public struct Z5 : IEquatable<Z5>
    {
        private static readonly byte[] mul = new byte[] { 0,0,0,0,0,0,1,2,3,4,0,2,4,1,3,0,3,1,4,2,0,4,3,2,1, };
        private static readonly byte[] inv = new byte[] { 0,1,3,2,4, };
        private static readonly byte[] div = new byte[] { 0,0,0,0,0,0,1,0,0,0,0,2,1,0,0,0,3,1,1,0,0,4,2,1,1, };
        private static readonly byte[] rem = new byte[] { 0,0,0,0,0,0,0,1,1,1,0,0,0,2,2,0,0,1,0,3,0,0,0,1,0, };

        /// <summary>
        /// The numeric value of the <see cref="Z5"/>.
        /// </summary>
        public readonly int Value;

        /// <summary>
        /// Creates a <see cref="Z5"/>.
        /// </summary>
        public Z5(int value)
        {
            Value = value % 5;
            if (Value < 0) Value += 5;
        }

        private Z5(bool dummy, int value)
        { Value = value; }

        /// <summary>
        /// Explicitly converts a <see cref="Z5"/> to a <see cref="System.Int32"/>.
        /// </summary>
        public static explicit operator int(Z5 value)
        { return value.Value; }

        /// <summary>
        /// Implicitly converts a <see cref="System.Int32"/> to a <see cref="Z5"/>.
        /// </summary>
        public static implicit operator Z5(int value)
        { return new Z5(value); }

        /// <summary>
        /// </summary>
        public override string ToString()
        { return Value.ToString(); }
        
        /// <summary>
        /// </summary>
        public override int GetHashCode()
        { return Value.GetHashCode(); }

        /// <summary>
        /// </summary>
        public override bool Equals(object obj)
        { return obj is Z5 && Equals((Z5)obj); }

        /// <summary>
        /// </summary>
        public bool Equals(Z5 other)
        { return Value == other.Value; }

        /// <summary>
        /// </summary>
        public static bool operator ==(Z5 a, Z5 b)
        { return a.Equals(b); }

        /// <summary>
        /// </summary>
        public static bool operator !=(Z5 a, Z5 b)
        { return !a.Equals(b); }

        /// <summary>
        /// </summary>
        public static Z5 operator +(Z5 a, Z5 b)
        {
            var result = a.Value + b.Value;
            if (result >= 5) result -= 5;
            return new Z5(false, result);
        }

        /// <summary>
        /// </summary>
        public Z5 Add(Z5 other)
        {
            return this + other;
        }

        /// <summary>
        /// </summary>
        public static Z5 operator -(Z5 a, Z5 b)
        {
            var result = a.Value + b.Value;
            if (result < 0) result += 5;
            return new Z5(false, result);
        }

        /// <summary>
        /// </summary>
        public Z5 Subtract(Z5 other)
        {
            return this - other;
        }

        /// <summary>
        /// </summary>
        public static Z5 operator -(Z5 value)
        {
            if (value.Value == 0) return value;
            return new Z5(false, 5 - value.Value);
        }

        /// <summary>
        /// </summary>
        public static Z5 operator *(Z5 a, Z5 b)
        {
            return new Z5(false, mul[a.Value * 5 + b.Value]);
        }

        /// <summary>
        /// </summary>
        public Z5 Multiply(Z5 other)
        {
            return this * other;
        }

        /// <summary>
        /// </summary>
        public static Z5 operator /(Z5 a, Z5 b)
        {
            return new Z5(false, div[a.Value * 5 + b.Value]);
        }

        /// <summary>
        /// </summary>
        public Z5 Divide(Z5 other)
        {
            return this / other;
        }

        /// <summary>
        /// </summary>
        public static Z5 operator %(Z5 a, Z5 b)
        {
            return new Z5(false, rem[a.Value * 5 + b.Value]);
        }

        /// <summary>
        /// </summary>
        public Z5 Modulo(Z5 other)
        {
            return this % other;
        }

        /// <summary>
        /// </summary>
        public static Z5 DivRem(Z5 a, Z5 b, out Z5 r)
        {
            int index = a.Value * 5 + b.Value;
            r = new Z5(false, rem[index]);
            return new Z5(false, div[index]);
        }

        /// <summary>
        /// </summary>
        public Z5 Inverse()
        {
            return Inverse(this);
        }

        /// <summary>
        /// </summary>
        public static Z5 Inverse(Z5 value)
        {
            var result = inv[value.Value];
            if (result == 0) throw new DivideByZeroException();
            return new Z5(false, div[result]);
        }

        /// <summary>
        /// </summary>
        public static Z5 Pow(Z5 value, int exponent)
        {
            if (exponent == 0) return 1;
            var result = 1;
            var b = value.Value;
            var e = Math.Abs(exponent);

            while (e > 0)
            {
                if ((e & 1) == 1)
                {
                    result = (result * b) % 5;
                }

                e >>= 1;
                b = (b * b) % 5;
            }

            if (exponent < 0) 
            {
                result = inv[result];
                if (result == 0) throw new DivideByZeroException();
            }

            return new Z5(false, result);
        }

    }

    /// <summary>
    /// Integer modulo 7.
    /// </summary>
    public struct Z7 : IEquatable<Z7>
    {
        private static readonly byte[] mul = new byte[] { 0,0,0,0,0,0,0,0,1,2,3,4,5,6,0,2,4,6,1,3,5,0,3,6,2,5,1,4,0,4,1,5,2,6,3,0,5,3,1,6,4,2,0,6,5,4,3,2,1, };
        private static readonly byte[] inv = new byte[] { 0,1,4,5,2,3,6, };
        private static readonly byte[] div = new byte[] { 0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,2,1,0,0,0,0,0,3,1,1,0,0,0,0,4,2,1,1,0,0,0,5,2,1,1,1,0,0,6,3,2,1,1,1, };
        private static readonly byte[] rem = new byte[] { 0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,2,2,2,2,0,0,1,0,3,3,3,0,0,0,1,0,4,4,0,0,1,2,1,0,5,0,0,0,0,2,1,0, };

        /// <summary>
        /// The numeric value of the <see cref="Z7"/>.
        /// </summary>
        public readonly int Value;

        /// <summary>
        /// Creates a <see cref="Z7"/>.
        /// </summary>
        public Z7(int value)
        {
            Value = value % 7;
            if (Value < 0) Value += 7;
        }

        private Z7(bool dummy, int value)
        { Value = value; }

        /// <summary>
        /// Explicitly converts a <see cref="Z7"/> to a <see cref="System.Int32"/>.
        /// </summary>
        public static explicit operator int(Z7 value)
        { return value.Value; }

        /// <summary>
        /// Implicitly converts a <see cref="System.Int32"/> to a <see cref="Z7"/>.
        /// </summary>
        public static implicit operator Z7(int value)
        { return new Z7(value); }

        /// <summary>
        /// </summary>
        public override string ToString()
        { return Value.ToString(); }
        
        /// <summary>
        /// </summary>
        public override int GetHashCode()
        { return Value.GetHashCode(); }

        /// <summary>
        /// </summary>
        public override bool Equals(object obj)
        { return obj is Z7 && Equals((Z7)obj); }

        /// <summary>
        /// </summary>
        public bool Equals(Z7 other)
        { return Value == other.Value; }

        /// <summary>
        /// </summary>
        public static bool operator ==(Z7 a, Z7 b)
        { return a.Equals(b); }

        /// <summary>
        /// </summary>
        public static bool operator !=(Z7 a, Z7 b)
        { return !a.Equals(b); }

        /// <summary>
        /// </summary>
        public static Z7 operator +(Z7 a, Z7 b)
        {
            var result = a.Value + b.Value;
            if (result >= 7) result -= 7;
            return new Z7(false, result);
        }

        /// <summary>
        /// </summary>
        public Z7 Add(Z7 other)
        {
            return this + other;
        }

        /// <summary>
        /// </summary>
        public static Z7 operator -(Z7 a, Z7 b)
        {
            var result = a.Value + b.Value;
            if (result < 0) result += 7;
            return new Z7(false, result);
        }

        /// <summary>
        /// </summary>
        public Z7 Subtract(Z7 other)
        {
            return this - other;
        }

        /// <summary>
        /// </summary>
        public static Z7 operator -(Z7 value)
        {
            if (value.Value == 0) return value;
            return new Z7(false, 7 - value.Value);
        }

        /// <summary>
        /// </summary>
        public static Z7 operator *(Z7 a, Z7 b)
        {
            return new Z7(false, mul[a.Value * 7 + b.Value]);
        }

        /// <summary>
        /// </summary>
        public Z7 Multiply(Z7 other)
        {
            return this * other;
        }

        /// <summary>
        /// </summary>
        public static Z7 operator /(Z7 a, Z7 b)
        {
            return new Z7(false, div[a.Value * 7 + b.Value]);
        }

        /// <summary>
        /// </summary>
        public Z7 Divide(Z7 other)
        {
            return this / other;
        }

        /// <summary>
        /// </summary>
        public static Z7 operator %(Z7 a, Z7 b)
        {
            return new Z7(false, rem[a.Value * 7 + b.Value]);
        }

        /// <summary>
        /// </summary>
        public Z7 Modulo(Z7 other)
        {
            return this % other;
        }

        /// <summary>
        /// </summary>
        public static Z7 DivRem(Z7 a, Z7 b, out Z7 r)
        {
            int index = a.Value * 7 + b.Value;
            r = new Z7(false, rem[index]);
            return new Z7(false, div[index]);
        }

        /// <summary>
        /// </summary>
        public Z7 Inverse()
        {
            return Inverse(this);
        }

        /// <summary>
        /// </summary>
        public static Z7 Inverse(Z7 value)
        {
            var result = inv[value.Value];
            if (result == 0) throw new DivideByZeroException();
            return new Z7(false, div[result]);
        }

        /// <summary>
        /// </summary>
        public static Z7 Pow(Z7 value, int exponent)
        {
            if (exponent == 0) return 1;
            var result = 1;
            var b = value.Value;
            var e = Math.Abs(exponent);

            while (e > 0)
            {
                if ((e & 1) == 1)
                {
                    result = (result * b) % 7;
                }

                e >>= 1;
                b = (b * b) % 7;
            }

            if (exponent < 0) 
            {
                result = inv[result];
                if (result == 0) throw new DivideByZeroException();
            }

            return new Z7(false, result);
        }

    }

    /// <summary>
    /// Integer modulo 8.
    /// </summary>
    /// <remarks>
    /// Note that this is not isomorphic to a finite field because 8 is composite.
    /// </remarks>
    public struct Z8 : IEquatable<Z8>
    {
        private static readonly byte[] mul = new byte[] { 0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,0,2,4,6,0,2,4,6,0,3,6,1,4,7,2,5,0,4,0,4,0,4,0,4,0,5,2,7,4,1,6,3,0,6,4,2,0,6,4,2,0,7,6,5,4,3,2,1, };
        private static readonly byte[] inv = new byte[] { 0,1,0,3,0,5,0,7, };
        private static readonly byte[] div = new byte[] { 0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,3,1,1,0,0,0,0,0,4,2,1,1,0,0,0,0,5,2,1,1,1,0,0,0,6,3,2,1,1,1,0,0,7,3,2,1,1,1,1, };
        private static readonly byte[] rem = new byte[] { 0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,2,2,2,2,2,0,0,1,0,3,3,3,3,0,0,0,1,0,4,4,4,0,0,1,2,1,0,5,5,0,0,0,0,2,1,0,6,0,0,1,1,3,2,1,0, };

        /// <summary>
        /// The numeric value of the <see cref="Z8"/>.
        /// </summary>
        public readonly int Value;

        /// <summary>
        /// Creates a <see cref="Z8"/>.
        /// </summary>
        public Z8(int value)
        {
            Value = value & 0x7;
        }

        private Z8(bool dummy, int value)
        { Value = value; }

        /// <summary>
        /// Explicitly converts a <see cref="Z8"/> to a <see cref="System.Int32"/>.
        /// </summary>
        public static explicit operator int(Z8 value)
        { return value.Value; }

        /// <summary>
        /// Implicitly converts a <see cref="System.Int32"/> to a <see cref="Z8"/>.
        /// </summary>
        public static implicit operator Z8(int value)
        { return new Z8(value); }

        /// <summary>
        /// </summary>
        public override string ToString()
        { return Value.ToString(); }
        
        /// <summary>
        /// </summary>
        public override int GetHashCode()
        { return Value.GetHashCode(); }

        /// <summary>
        /// </summary>
        public override bool Equals(object obj)
        { return obj is Z8 && Equals((Z8)obj); }

        /// <summary>
        /// </summary>
        public bool Equals(Z8 other)
        { return Value == other.Value; }

        /// <summary>
        /// </summary>
        public static bool operator ==(Z8 a, Z8 b)
        { return a.Equals(b); }

        /// <summary>
        /// </summary>
        public static bool operator !=(Z8 a, Z8 b)
        { return !a.Equals(b); }

        /// <summary>
        /// </summary>
        public static Z8 operator +(Z8 a, Z8 b)
        {
            var result = a.Value + b.Value;
            if (result >= 8) result -= 8;
            return new Z8(false, result);
        }

        /// <summary>
        /// </summary>
        public Z8 Add(Z8 other)
        {
            return this + other;
        }

        /// <summary>
        /// </summary>
        public static Z8 operator -(Z8 a, Z8 b)
        {
            var result = a.Value + b.Value;
            if (result < 0) result += 8;
            return new Z8(false, result);
        }

        /// <summary>
        /// </summary>
        public Z8 Subtract(Z8 other)
        {
            return this - other;
        }

        /// <summary>
        /// </summary>
        public static Z8 operator -(Z8 value)
        {
            if (value.Value == 0) return value;
            return new Z8(false, 8 - value.Value);
        }

        /// <summary>
        /// </summary>
        public static Z8 operator *(Z8 a, Z8 b)
        {
            return new Z8(false, mul[a.Value * 8 + b.Value]);
        }

        /// <summary>
        /// </summary>
        public Z8 Multiply(Z8 other)
        {
            return this * other;
        }

        /// <summary>
        /// </summary>
        public static Z8 operator /(Z8 a, Z8 b)
        {
            return new Z8(false, div[a.Value * 8 + b.Value]);
        }

        /// <summary>
        /// </summary>
        public Z8 Divide(Z8 other)
        {
            return this / other;
        }

        /// <summary>
        /// </summary>
        public static Z8 operator %(Z8 a, Z8 b)
        {
            return new Z8(false, rem[a.Value * 8 + b.Value]);
        }

        /// <summary>
        /// </summary>
        public Z8 Modulo(Z8 other)
        {
            return this % other;
        }

        /// <summary>
        /// </summary>
        public static Z8 DivRem(Z8 a, Z8 b, out Z8 r)
        {
            int index = a.Value * 8 + b.Value;
            r = new Z8(false, rem[index]);
            return new Z8(false, div[index]);
        }

        /// <summary>
        /// </summary>
        public Z8 Inverse()
        {
            return Inverse(this);
        }

        /// <summary>
        /// </summary>
        public static Z8 Inverse(Z8 value)
        {
            var result = inv[value.Value];
            if (result == 0) throw new DivideByZeroException();
            return new Z8(false, div[result]);
        }

        /// <summary>
        /// </summary>
        public static Z8 Pow(Z8 value, int exponent)
        {
            if (exponent == 0) return 1;
            var result = 1;
            var b = value.Value;
            var e = Math.Abs(exponent);

            while (e > 0)
            {
                if ((e & 1) == 1)
                {
                    result = (result * b) & 0x7;
                }

                e >>= 1;
                b = (b * b) & 0x7;
            }

            if (exponent < 0) 
            {
                result = inv[result];
                if (result == 0) throw new DivideByZeroException();
            }

            return new Z8(false, result);
        }

        /// <summary>
        /// </summary>
        public static Z8 operator &(Z8 a, Z8 b)
        {
            return new Z8(false, a.Value & b.Value);
        }

        /// <summary>
        /// </summary>
        public Z8 And(Z8 other)
        {
            return this & other;
        }

        /// <summary>
        /// </summary>
        public static Z8 operator |(Z8 a, Z8 b)
        {
            return new Z8(false, a.Value | b.Value);
        }

        /// <summary>
        /// </summary>
        public Z8 Or(Z8 other)
        {
            return this | other;
        }

        /// <summary>
        /// </summary>
        public static Z8 operator ^(Z8 a, Z8 b)
        {
            return new Z8(false, a.Value ^ b.Value);
        }

        /// <summary>
        /// </summary>
        public Z8 Xor(Z8 other)
        {
            return this ^ other;
        }

        /// <summary>
        /// </summary>
        public static Z8 operator ~(Z8 value)
        {
            return new Z8(false, ~value.Value);
        }

        /// <summary>
        /// </summary>
        public Z8 Not()
        {
            return ~this;
        }

    }

    /// <summary>
    /// Integer modulo 16.
    /// </summary>
    /// <remarks>
    /// Note that this is not isomorphic to a finite field because 16 is composite.
    /// </remarks>
    public struct Z16 : IEquatable<Z16>
    {
        private static readonly byte[] mul = new byte[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,2,4,6,8,10,12,14,0,2,4,6,8,10,12,14,0,3,6,9,12,15,2,5,8,11,14,1,4,7,10,13,0,4,8,12,0,4,8,12,0,4,8,12,0,4,8,12,0,5,10,15,4,9,14,3,8,13,2,7,12,1,6,11,0,6,12,2,8,14,4,10,0,6,12,2,8,14,4,10,0,7,14,5,12,3,10,1,8,15,6,13,4,11,2,9,0,8,0,8,0,8,0,8,0,8,0,8,0,8,0,8,0,9,2,11,4,13,6,15,8,1,10,3,12,5,14,7,0,10,4,14,8,2,12,6,0,10,4,14,8,2,12,6,0,11,6,1,12,7,2,13,8,3,14,9,4,15,10,5,0,12,8,4,0,12,8,4,0,12,8,4,0,12,8,4,0,13,10,7,4,1,14,11,8,5,2,15,12,9,6,3,0,14,12,10,8,6,4,2,0,14,12,10,8,6,4,2,0,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1, };
        private static readonly byte[] inv = new byte[] { 0,1,0,11,0,13,0,7,0,9,0,3,0,5,0,15, };
        private static readonly byte[] div = new byte[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,4,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,5,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,6,3,2,1,1,1,0,0,0,0,0,0,0,0,0,0,7,3,2,1,1,1,1,0,0,0,0,0,0,0,0,0,8,4,2,2,1,1,1,1,0,0,0,0,0,0,0,0,9,4,3,2,1,1,1,1,1,0,0,0,0,0,0,0,10,5,3,2,2,1,1,1,1,1,0,0,0,0,0,0,11,5,3,2,2,1,1,1,1,1,1,0,0,0,0,0,12,6,4,3,2,2,1,1,1,1,1,1,0,0,0,0,13,6,4,3,2,2,1,1,1,1,1,1,1,0,0,0,14,7,4,3,2,2,2,1,1,1,1,1,1,1,0,0,15,7,5,3,3,2,2,1,1,1,1,1,1,1,1, };
        private static readonly byte[] rem = new byte[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,1,0,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,1,0,4,4,4,4,4,4,4,4,4,4,4,0,0,1,2,1,0,5,5,5,5,5,5,5,5,5,5,0,0,0,0,2,1,0,6,6,6,6,6,6,6,6,6,0,0,1,1,3,2,1,0,7,7,7,7,7,7,7,7,0,0,0,2,0,3,2,1,0,8,8,8,8,8,8,8,0,0,1,0,1,4,3,2,1,0,9,9,9,9,9,9,0,0,0,1,2,0,4,3,2,1,0,10,10,10,10,10,0,0,1,2,3,1,5,4,3,2,1,0,11,11,11,11,0,0,0,0,0,2,0,5,4,3,2,1,0,12,12,12,0,0,1,1,1,3,1,6,5,4,3,2,1,0,13,13,0,0,0,2,2,4,2,0,6,5,4,3,2,1,0,14,0,0,1,0,3,0,3,1,7,6,5,4,3,2,1,0, };

        /// <summary>
        /// The numeric value of the <see cref="Z16"/>.
        /// </summary>
        public readonly int Value;

        /// <summary>
        /// Creates a <see cref="Z16"/>.
        /// </summary>
        public Z16(int value)
        {
            Value = value & 0xF;
        }

        private Z16(bool dummy, int value)
        { Value = value; }

        /// <summary>
        /// Explicitly converts a <see cref="Z16"/> to a <see cref="System.Int32"/>.
        /// </summary>
        public static explicit operator int(Z16 value)
        { return value.Value; }

        /// <summary>
        /// Implicitly converts a <see cref="System.Int32"/> to a <see cref="Z16"/>.
        /// </summary>
        public static implicit operator Z16(int value)
        { return new Z16(value); }

        /// <summary>
        /// </summary>
        public override string ToString()
        { return Value.ToString(); }
        
        /// <summary>
        /// </summary>
        public override int GetHashCode()
        { return Value.GetHashCode(); }

        /// <summary>
        /// </summary>
        public override bool Equals(object obj)
        { return obj is Z16 && Equals((Z16)obj); }

        /// <summary>
        /// </summary>
        public bool Equals(Z16 other)
        { return Value == other.Value; }

        /// <summary>
        /// </summary>
        public static bool operator ==(Z16 a, Z16 b)
        { return a.Equals(b); }

        /// <summary>
        /// </summary>
        public static bool operator !=(Z16 a, Z16 b)
        { return !a.Equals(b); }

        /// <summary>
        /// </summary>
        public static Z16 operator +(Z16 a, Z16 b)
        {
            var result = a.Value + b.Value;
            if (result >= 16) result -= 16;
            return new Z16(false, result);
        }

        /// <summary>
        /// </summary>
        public Z16 Add(Z16 other)
        {
            return this + other;
        }

        /// <summary>
        /// </summary>
        public static Z16 operator -(Z16 a, Z16 b)
        {
            var result = a.Value + b.Value;
            if (result < 0) result += 16;
            return new Z16(false, result);
        }

        /// <summary>
        /// </summary>
        public Z16 Subtract(Z16 other)
        {
            return this - other;
        }

        /// <summary>
        /// </summary>
        public static Z16 operator -(Z16 value)
        {
            if (value.Value == 0) return value;
            return new Z16(false, 16 - value.Value);
        }

        /// <summary>
        /// </summary>
        public static Z16 operator *(Z16 a, Z16 b)
        {
            return new Z16(false, mul[a.Value * 16 + b.Value]);
        }

        /// <summary>
        /// </summary>
        public Z16 Multiply(Z16 other)
        {
            return this * other;
        }

        /// <summary>
        /// </summary>
        public static Z16 operator /(Z16 a, Z16 b)
        {
            return new Z16(false, div[a.Value * 16 + b.Value]);
        }

        /// <summary>
        /// </summary>
        public Z16 Divide(Z16 other)
        {
            return this / other;
        }

        /// <summary>
        /// </summary>
        public static Z16 operator %(Z16 a, Z16 b)
        {
            return new Z16(false, rem[a.Value * 16 + b.Value]);
        }

        /// <summary>
        /// </summary>
        public Z16 Modulo(Z16 other)
        {
            return this % other;
        }

        /// <summary>
        /// </summary>
        public static Z16 DivRem(Z16 a, Z16 b, out Z16 r)
        {
            int index = a.Value * 16 + b.Value;
            r = new Z16(false, rem[index]);
            return new Z16(false, div[index]);
        }

        /// <summary>
        /// </summary>
        public Z16 Inverse()
        {
            return Inverse(this);
        }

        /// <summary>
        /// </summary>
        public static Z16 Inverse(Z16 value)
        {
            var result = inv[value.Value];
            if (result == 0) throw new DivideByZeroException();
            return new Z16(false, div[result]);
        }

        /// <summary>
        /// </summary>
        public static Z16 Pow(Z16 value, int exponent)
        {
            if (exponent == 0) return 1;
            var result = 1;
            var b = value.Value;
            var e = Math.Abs(exponent);

            while (e > 0)
            {
                if ((e & 1) == 1)
                {
                    result = (result * b) & 0xF;
                }

                e >>= 1;
                b = (b * b) & 0xF;
            }

            if (exponent < 0) 
            {
                result = inv[result];
                if (result == 0) throw new DivideByZeroException();
            }

            return new Z16(false, result);
        }

        /// <summary>
        /// </summary>
        public static Z16 operator &(Z16 a, Z16 b)
        {
            return new Z16(false, a.Value & b.Value);
        }

        /// <summary>
        /// </summary>
        public Z16 And(Z16 other)
        {
            return this & other;
        }

        /// <summary>
        /// </summary>
        public static Z16 operator |(Z16 a, Z16 b)
        {
            return new Z16(false, a.Value | b.Value);
        }

        /// <summary>
        /// </summary>
        public Z16 Or(Z16 other)
        {
            return this | other;
        }

        /// <summary>
        /// </summary>
        public static Z16 operator ^(Z16 a, Z16 b)
        {
            return new Z16(false, a.Value ^ b.Value);
        }

        /// <summary>
        /// </summary>
        public Z16 Xor(Z16 other)
        {
            return this ^ other;
        }

        /// <summary>
        /// </summary>
        public static Z16 operator ~(Z16 value)
        {
            return new Z16(false, ~value.Value);
        }

        /// <summary>
        /// </summary>
        public Z16 Not()
        {
            return ~this;
        }

    }

    /// <summary>
    /// Integer modulo 32.
    /// </summary>
    /// <remarks>
    /// Note that this is not isomorphic to a finite field because 32 is composite.
    /// </remarks>
    public struct Z32 : IEquatable<Z32>
    {
        private static readonly byte[] mul = new byte[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,0,3,6,9,12,15,18,21,24,27,30,1,4,7,10,13,16,19,22,25,28,31,2,5,8,11,14,17,20,23,26,29,0,4,8,12,16,20,24,28,0,4,8,12,16,20,24,28,0,4,8,12,16,20,24,28,0,4,8,12,16,20,24,28,0,5,10,15,20,25,30,3,8,13,18,23,28,1,6,11,16,21,26,31,4,9,14,19,24,29,2,7,12,17,22,27,0,6,12,18,24,30,4,10,16,22,28,2,8,14,20,26,0,6,12,18,24,30,4,10,16,22,28,2,8,14,20,26,0,7,14,21,28,3,10,17,24,31,6,13,20,27,2,9,16,23,30,5,12,19,26,1,8,15,22,29,4,11,18,25,0,8,16,24,0,8,16,24,0,8,16,24,0,8,16,24,0,8,16,24,0,8,16,24,0,8,16,24,0,8,16,24,0,9,18,27,4,13,22,31,8,17,26,3,12,21,30,7,16,25,2,11,20,29,6,15,24,1,10,19,28,5,14,23,0,10,20,30,8,18,28,6,16,26,4,14,24,2,12,22,0,10,20,30,8,18,28,6,16,26,4,14,24,2,12,22,0,11,22,1,12,23,2,13,24,3,14,25,4,15,26,5,16,27,6,17,28,7,18,29,8,19,30,9,20,31,10,21,0,12,24,4,16,28,8,20,0,12,24,4,16,28,8,20,0,12,24,4,16,28,8,20,0,12,24,4,16,28,8,20,0,13,26,7,20,1,14,27,8,21,2,15,28,9,22,3,16,29,10,23,4,17,30,11,24,5,18,31,12,25,6,19,0,14,28,10,24,6,20,2,16,30,12,26,8,22,4,18,0,14,28,10,24,6,20,2,16,30,12,26,8,22,4,18,0,15,30,13,28,11,26,9,24,7,22,5,20,3,18,1,16,31,14,29,12,27,10,25,8,23,6,21,4,19,2,17,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,17,2,19,4,21,6,23,8,25,10,27,12,29,14,31,16,1,18,3,20,5,22,7,24,9,26,11,28,13,30,15,0,18,4,22,8,26,12,30,16,2,20,6,24,10,28,14,0,18,4,22,8,26,12,30,16,2,20,6,24,10,28,14,0,19,6,25,12,31,18,5,24,11,30,17,4,23,10,29,16,3,22,9,28,15,2,21,8,27,14,1,20,7,26,13,0,20,8,28,16,4,24,12,0,20,8,28,16,4,24,12,0,20,8,28,16,4,24,12,0,20,8,28,16,4,24,12,0,21,10,31,20,9,30,19,8,29,18,7,28,17,6,27,16,5,26,15,4,25,14,3,24,13,2,23,12,1,22,11,0,22,12,2,24,14,4,26,16,6,28,18,8,30,20,10,0,22,12,2,24,14,4,26,16,6,28,18,8,30,20,10,0,23,14,5,28,19,10,1,24,15,6,29,20,11,2,25,16,7,30,21,12,3,26,17,8,31,22,13,4,27,18,9,0,24,16,8,0,24,16,8,0,24,16,8,0,24,16,8,0,24,16,8,0,24,16,8,0,24,16,8,0,24,16,8,0,25,18,11,4,29,22,15,8,1,26,19,12,5,30,23,16,9,2,27,20,13,6,31,24,17,10,3,28,21,14,7,0,26,20,14,8,2,28,22,16,10,4,30,24,18,12,6,0,26,20,14,8,2,28,22,16,10,4,30,24,18,12,6,0,27,22,17,12,7,2,29,24,19,14,9,4,31,26,21,16,11,6,1,28,23,18,13,8,3,30,25,20,15,10,5,0,28,24,20,16,12,8,4,0,28,24,20,16,12,8,4,0,28,24,20,16,12,8,4,0,28,24,20,16,12,8,4,0,29,26,23,20,17,14,11,8,5,2,31,28,25,22,19,16,13,10,7,4,1,30,27,24,21,18,15,12,9,6,3,0,30,28,26,24,22,20,18,16,14,12,10,8,6,4,2,0,30,28,26,24,22,20,18,16,14,12,10,8,6,4,2,0,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1, };
        private static readonly byte[] inv = new byte[] { 0,1,0,11,0,13,0,23,0,25,0,3,0,5,0,15,0,17,0,27,0,29,0,7,0,9,0,19,0,21,0,31, };
        private static readonly byte[] div = new byte[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,3,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,3,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,4,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,4,3,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,5,3,2,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,5,3,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,6,4,3,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,6,4,3,2,2,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,7,4,3,2,2,2,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,7,5,3,3,2,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,8,5,4,3,2,2,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,8,5,4,3,2,2,2,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,9,6,4,3,3,2,2,2,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,9,6,4,3,3,2,2,2,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,20,10,6,5,4,3,2,2,2,2,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,21,10,7,5,4,3,3,2,2,2,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,22,11,7,5,4,3,3,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,23,11,7,5,4,3,3,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,24,12,8,6,4,4,3,3,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,25,12,8,6,5,4,3,3,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,26,13,8,6,5,4,3,3,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,27,13,9,6,5,4,3,3,3,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,28,14,9,7,5,4,4,3,3,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,29,14,9,7,5,4,4,3,3,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,30,15,10,7,6,5,4,3,3,3,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,31,15,10,7,6,5,4,3,3,3,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, };
        private static readonly byte[] rem = new byte[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,1,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,1,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,1,2,1,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,2,1,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,1,1,3,2,1,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,2,0,3,2,1,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,1,0,1,4,3,2,1,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,1,2,0,4,3,2,1,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,1,2,3,1,5,4,3,2,1,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,2,0,5,4,3,2,1,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,1,1,1,3,1,6,5,4,3,2,1,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,0,2,2,4,2,0,6,5,4,3,2,1,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,1,0,3,0,3,1,7,6,5,4,3,2,1,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,1,0,1,4,2,0,7,6,5,4,3,2,1,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,1,2,1,2,5,3,1,8,7,6,5,4,3,2,1,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,0,2,3,0,4,2,0,8,7,6,5,4,3,2,1,0,18,18,18,18,18,18,18,18,18,18,18,18,18,0,0,1,1,3,4,1,5,3,1,9,8,7,6,5,4,3,2,1,0,19,19,19,19,19,19,19,19,19,19,19,19,0,0,0,2,0,0,2,6,4,2,0,9,8,7,6,5,4,3,2,1,0,20,20,20,20,20,20,20,20,20,20,20,0,0,1,0,1,1,3,0,5,3,1,10,9,8,7,6,5,4,3,2,1,0,21,21,21,21,21,21,21,21,21,21,0,0,0,1,2,2,4,1,6,4,2,0,10,9,8,7,6,5,4,3,2,1,0,22,22,22,22,22,22,22,22,22,0,0,1,2,3,3,5,2,7,5,3,1,11,10,9,8,7,6,5,4,3,2,1,0,23,23,23,23,23,23,23,23,0,0,0,0,0,4,0,3,0,6,4,2,0,11,10,9,8,7,6,5,4,3,2,1,0,24,24,24,24,24,24,24,0,0,1,1,1,0,1,4,1,7,5,3,1,12,11,10,9,8,7,6,5,4,3,2,1,0,25,25,25,25,25,25,0,0,0,2,2,1,2,5,2,8,6,4,2,0,12,11,10,9,8,7,6,5,4,3,2,1,0,26,26,26,26,26,0,0,1,0,3,2,3,6,3,0,7,5,3,1,13,12,11,10,9,8,7,6,5,4,3,2,1,0,27,27,27,27,0,0,0,1,0,3,4,0,4,1,8,6,4,2,0,13,12,11,10,9,8,7,6,5,4,3,2,1,0,28,28,28,0,0,1,2,1,4,5,1,5,2,9,7,5,3,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,29,29,0,0,0,0,2,0,0,2,6,3,0,8,6,4,2,0,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,30,0,0,1,1,3,1,1,3,7,4,1,9,7,5,3,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0, };

        /// <summary>
        /// The numeric value of the <see cref="Z32"/>.
        /// </summary>
        public readonly int Value;

        /// <summary>
        /// Creates a <see cref="Z32"/>.
        /// </summary>
        public Z32(int value)
        {
            Value = value & 0x1F;
        }

        private Z32(bool dummy, int value)
        { Value = value; }

        /// <summary>
        /// Explicitly converts a <see cref="Z32"/> to a <see cref="System.Int32"/>.
        /// </summary>
        public static explicit operator int(Z32 value)
        { return value.Value; }

        /// <summary>
        /// Implicitly converts a <see cref="System.Int32"/> to a <see cref="Z32"/>.
        /// </summary>
        public static implicit operator Z32(int value)
        { return new Z32(value); }

        /// <summary>
        /// </summary>
        public override string ToString()
        { return Value.ToString(); }
        
        /// <summary>
        /// </summary>
        public override int GetHashCode()
        { return Value.GetHashCode(); }

        /// <summary>
        /// </summary>
        public override bool Equals(object obj)
        { return obj is Z32 && Equals((Z32)obj); }

        /// <summary>
        /// </summary>
        public bool Equals(Z32 other)
        { return Value == other.Value; }

        /// <summary>
        /// </summary>
        public static bool operator ==(Z32 a, Z32 b)
        { return a.Equals(b); }

        /// <summary>
        /// </summary>
        public static bool operator !=(Z32 a, Z32 b)
        { return !a.Equals(b); }

        /// <summary>
        /// </summary>
        public static Z32 operator +(Z32 a, Z32 b)
        {
            var result = a.Value + b.Value;
            if (result >= 32) result -= 32;
            return new Z32(false, result);
        }

        /// <summary>
        /// </summary>
        public Z32 Add(Z32 other)
        {
            return this + other;
        }

        /// <summary>
        /// </summary>
        public static Z32 operator -(Z32 a, Z32 b)
        {
            var result = a.Value + b.Value;
            if (result < 0) result += 32;
            return new Z32(false, result);
        }

        /// <summary>
        /// </summary>
        public Z32 Subtract(Z32 other)
        {
            return this - other;
        }

        /// <summary>
        /// </summary>
        public static Z32 operator -(Z32 value)
        {
            if (value.Value == 0) return value;
            return new Z32(false, 32 - value.Value);
        }

        /// <summary>
        /// </summary>
        public static Z32 operator *(Z32 a, Z32 b)
        {
            return new Z32(false, mul[a.Value * 32 + b.Value]);
        }

        /// <summary>
        /// </summary>
        public Z32 Multiply(Z32 other)
        {
            return this * other;
        }

        /// <summary>
        /// </summary>
        public static Z32 operator /(Z32 a, Z32 b)
        {
            return new Z32(false, div[a.Value * 32 + b.Value]);
        }

        /// <summary>
        /// </summary>
        public Z32 Divide(Z32 other)
        {
            return this / other;
        }

        /// <summary>
        /// </summary>
        public static Z32 operator %(Z32 a, Z32 b)
        {
            return new Z32(false, rem[a.Value * 32 + b.Value]);
        }

        /// <summary>
        /// </summary>
        public Z32 Modulo(Z32 other)
        {
            return this % other;
        }

        /// <summary>
        /// </summary>
        public static Z32 DivRem(Z32 a, Z32 b, out Z32 r)
        {
            int index = a.Value * 32 + b.Value;
            r = new Z32(false, rem[index]);
            return new Z32(false, div[index]);
        }

        /// <summary>
        /// </summary>
        public Z32 Inverse()
        {
            return Inverse(this);
        }

        /// <summary>
        /// </summary>
        public static Z32 Inverse(Z32 value)
        {
            var result = inv[value.Value];
            if (result == 0) throw new DivideByZeroException();
            return new Z32(false, div[result]);
        }

        /// <summary>
        /// </summary>
        public static Z32 Pow(Z32 value, int exponent)
        {
            if (exponent == 0) return 1;
            var result = 1;
            var b = value.Value;
            var e = Math.Abs(exponent);

            while (e > 0)
            {
                if ((e & 1) == 1)
                {
                    result = (result * b) & 0x1F;
                }

                e >>= 1;
                b = (b * b) & 0x1F;
            }

            if (exponent < 0) 
            {
                result = inv[result];
                if (result == 0) throw new DivideByZeroException();
            }

            return new Z32(false, result);
        }

        /// <summary>
        /// </summary>
        public static Z32 operator &(Z32 a, Z32 b)
        {
            return new Z32(false, a.Value & b.Value);
        }

        /// <summary>
        /// </summary>
        public Z32 And(Z32 other)
        {
            return this & other;
        }

        /// <summary>
        /// </summary>
        public static Z32 operator |(Z32 a, Z32 b)
        {
            return new Z32(false, a.Value | b.Value);
        }

        /// <summary>
        /// </summary>
        public Z32 Or(Z32 other)
        {
            return this | other;
        }

        /// <summary>
        /// </summary>
        public static Z32 operator ^(Z32 a, Z32 b)
        {
            return new Z32(false, a.Value ^ b.Value);
        }

        /// <summary>
        /// </summary>
        public Z32 Xor(Z32 other)
        {
            return this ^ other;
        }

        /// <summary>
        /// </summary>
        public static Z32 operator ~(Z32 value)
        {
            return new Z32(false, ~value.Value);
        }

        /// <summary>
        /// </summary>
        public Z32 Not()
        {
            return ~this;
        }

    }

    /// <summary>
    /// Integer modulo 64.
    /// </summary>
    /// <remarks>
    /// Note that this is not isomorphic to a finite field because 64 is composite.
    /// </remarks>
    public struct Z64 : IEquatable<Z64>
    {
        private static readonly byte[] mul = new byte[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,2,5,8,11,14,17,20,23,26,29,32,35,38,41,44,47,50,53,56,59,62,1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58,61,0,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,0,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,0,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,0,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,0,5,10,15,20,25,30,35,40,45,50,55,60,1,6,11,16,21,26,31,36,41,46,51,56,61,2,7,12,17,22,27,32,37,42,47,52,57,62,3,8,13,18,23,28,33,38,43,48,53,58,63,4,9,14,19,24,29,34,39,44,49,54,59,0,6,12,18,24,30,36,42,48,54,60,2,8,14,20,26,32,38,44,50,56,62,4,10,16,22,28,34,40,46,52,58,0,6,12,18,24,30,36,42,48,54,60,2,8,14,20,26,32,38,44,50,56,62,4,10,16,22,28,34,40,46,52,58,0,7,14,21,28,35,42,49,56,63,6,13,20,27,34,41,48,55,62,5,12,19,26,33,40,47,54,61,4,11,18,25,32,39,46,53,60,3,10,17,24,31,38,45,52,59,2,9,16,23,30,37,44,51,58,1,8,15,22,29,36,43,50,57,0,8,16,24,32,40,48,56,0,8,16,24,32,40,48,56,0,8,16,24,32,40,48,56,0,8,16,24,32,40,48,56,0,8,16,24,32,40,48,56,0,8,16,24,32,40,48,56,0,8,16,24,32,40,48,56,0,8,16,24,32,40,48,56,0,9,18,27,36,45,54,63,8,17,26,35,44,53,62,7,16,25,34,43,52,61,6,15,24,33,42,51,60,5,14,23,32,41,50,59,4,13,22,31,40,49,58,3,12,21,30,39,48,57,2,11,20,29,38,47,56,1,10,19,28,37,46,55,0,10,20,30,40,50,60,6,16,26,36,46,56,2,12,22,32,42,52,62,8,18,28,38,48,58,4,14,24,34,44,54,0,10,20,30,40,50,60,6,16,26,36,46,56,2,12,22,32,42,52,62,8,18,28,38,48,58,4,14,24,34,44,54,0,11,22,33,44,55,2,13,24,35,46,57,4,15,26,37,48,59,6,17,28,39,50,61,8,19,30,41,52,63,10,21,32,43,54,1,12,23,34,45,56,3,14,25,36,47,58,5,16,27,38,49,60,7,18,29,40,51,62,9,20,31,42,53,0,12,24,36,48,60,8,20,32,44,56,4,16,28,40,52,0,12,24,36,48,60,8,20,32,44,56,4,16,28,40,52,0,12,24,36,48,60,8,20,32,44,56,4,16,28,40,52,0,12,24,36,48,60,8,20,32,44,56,4,16,28,40,52,0,13,26,39,52,1,14,27,40,53,2,15,28,41,54,3,16,29,42,55,4,17,30,43,56,5,18,31,44,57,6,19,32,45,58,7,20,33,46,59,8,21,34,47,60,9,22,35,48,61,10,23,36,49,62,11,24,37,50,63,12,25,38,51,0,14,28,42,56,6,20,34,48,62,12,26,40,54,4,18,32,46,60,10,24,38,52,2,16,30,44,58,8,22,36,50,0,14,28,42,56,6,20,34,48,62,12,26,40,54,4,18,32,46,60,10,24,38,52,2,16,30,44,58,8,22,36,50,0,15,30,45,60,11,26,41,56,7,22,37,52,3,18,33,48,63,14,29,44,59,10,25,40,55,6,21,36,51,2,17,32,47,62,13,28,43,58,9,24,39,54,5,20,35,50,1,16,31,46,61,12,27,42,57,8,23,38,53,4,19,34,49,0,16,32,48,0,16,32,48,0,16,32,48,0,16,32,48,0,16,32,48,0,16,32,48,0,16,32,48,0,16,32,48,0,16,32,48,0,16,32,48,0,16,32,48,0,16,32,48,0,16,32,48,0,16,32,48,0,16,32,48,0,16,32,48,0,17,34,51,4,21,38,55,8,25,42,59,12,29,46,63,16,33,50,3,20,37,54,7,24,41,58,11,28,45,62,15,32,49,2,19,36,53,6,23,40,57,10,27,44,61,14,31,48,1,18,35,52,5,22,39,56,9,26,43,60,13,30,47,0,18,36,54,8,26,44,62,16,34,52,6,24,42,60,14,32,50,4,22,40,58,12,30,48,2,20,38,56,10,28,46,0,18,36,54,8,26,44,62,16,34,52,6,24,42,60,14,32,50,4,22,40,58,12,30,48,2,20,38,56,10,28,46,0,19,38,57,12,31,50,5,24,43,62,17,36,55,10,29,48,3,22,41,60,15,34,53,8,27,46,1,20,39,58,13,32,51,6,25,44,63,18,37,56,11,30,49,4,23,42,61,16,35,54,9,28,47,2,21,40,59,14,33,52,7,26,45,0,20,40,60,16,36,56,12,32,52,8,28,48,4,24,44,0,20,40,60,16,36,56,12,32,52,8,28,48,4,24,44,0,20,40,60,16,36,56,12,32,52,8,28,48,4,24,44,0,20,40,60,16,36,56,12,32,52,8,28,48,4,24,44,0,21,42,63,20,41,62,19,40,61,18,39,60,17,38,59,16,37,58,15,36,57,14,35,56,13,34,55,12,33,54,11,32,53,10,31,52,9,30,51,8,29,50,7,28,49,6,27,48,5,26,47,4,25,46,3,24,45,2,23,44,1,22,43,0,22,44,2,24,46,4,26,48,6,28,50,8,30,52,10,32,54,12,34,56,14,36,58,16,38,60,18,40,62,20,42,0,22,44,2,24,46,4,26,48,6,28,50,8,30,52,10,32,54,12,34,56,14,36,58,16,38,60,18,40,62,20,42,0,23,46,5,28,51,10,33,56,15,38,61,20,43,2,25,48,7,30,53,12,35,58,17,40,63,22,45,4,27,50,9,32,55,14,37,60,19,42,1,24,47,6,29,52,11,34,57,16,39,62,21,44,3,26,49,8,31,54,13,36,59,18,41,0,24,48,8,32,56,16,40,0,24,48,8,32,56,16,40,0,24,48,8,32,56,16,40,0,24,48,8,32,56,16,40,0,24,48,8,32,56,16,40,0,24,48,8,32,56,16,40,0,24,48,8,32,56,16,40,0,24,48,8,32,56,16,40,0,25,50,11,36,61,22,47,8,33,58,19,44,5,30,55,16,41,2,27,52,13,38,63,24,49,10,35,60,21,46,7,32,57,18,43,4,29,54,15,40,1,26,51,12,37,62,23,48,9,34,59,20,45,6,31,56,17,42,3,28,53,14,39,0,26,52,14,40,2,28,54,16,42,4,30,56,18,44,6,32,58,20,46,8,34,60,22,48,10,36,62,24,50,12,38,0,26,52,14,40,2,28,54,16,42,4,30,56,18,44,6,32,58,20,46,8,34,60,22,48,10,36,62,24,50,12,38,0,27,54,17,44,7,34,61,24,51,14,41,4,31,58,21,48,11,38,1,28,55,18,45,8,35,62,25,52,15,42,5,32,59,22,49,12,39,2,29,56,19,46,9,36,63,26,53,16,43,6,33,60,23,50,13,40,3,30,57,20,47,10,37,0,28,56,20,48,12,40,4,32,60,24,52,16,44,8,36,0,28,56,20,48,12,40,4,32,60,24,52,16,44,8,36,0,28,56,20,48,12,40,4,32,60,24,52,16,44,8,36,0,28,56,20,48,12,40,4,32,60,24,52,16,44,8,36,0,29,58,23,52,17,46,11,40,5,34,63,28,57,22,51,16,45,10,39,4,33,62,27,56,21,50,15,44,9,38,3,32,61,26,55,20,49,14,43,8,37,2,31,60,25,54,19,48,13,42,7,36,1,30,59,24,53,18,47,12,41,6,35,0,30,60,26,56,22,52,18,48,14,44,10,40,6,36,2,32,62,28,58,24,54,20,50,16,46,12,42,8,38,4,34,0,30,60,26,56,22,52,18,48,14,44,10,40,6,36,2,32,62,28,58,24,54,20,50,16,46,12,42,8,38,4,34,0,31,62,29,60,27,58,25,56,23,54,21,52,19,50,17,48,15,46,13,44,11,42,9,40,7,38,5,36,3,34,1,32,63,30,61,28,59,26,57,24,55,22,53,20,51,18,49,16,47,14,45,12,43,10,41,8,39,6,37,4,35,2,33,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,33,2,35,4,37,6,39,8,41,10,43,12,45,14,47,16,49,18,51,20,53,22,55,24,57,26,59,28,61,30,63,32,1,34,3,36,5,38,7,40,9,42,11,44,13,46,15,48,17,50,19,52,21,54,23,56,25,58,27,60,29,62,31,0,34,4,38,8,42,12,46,16,50,20,54,24,58,28,62,32,2,36,6,40,10,44,14,48,18,52,22,56,26,60,30,0,34,4,38,8,42,12,46,16,50,20,54,24,58,28,62,32,2,36,6,40,10,44,14,48,18,52,22,56,26,60,30,0,35,6,41,12,47,18,53,24,59,30,1,36,7,42,13,48,19,54,25,60,31,2,37,8,43,14,49,20,55,26,61,32,3,38,9,44,15,50,21,56,27,62,33,4,39,10,45,16,51,22,57,28,63,34,5,40,11,46,17,52,23,58,29,0,36,8,44,16,52,24,60,32,4,40,12,48,20,56,28,0,36,8,44,16,52,24,60,32,4,40,12,48,20,56,28,0,36,8,44,16,52,24,60,32,4,40,12,48,20,56,28,0,36,8,44,16,52,24,60,32,4,40,12,48,20,56,28,0,37,10,47,20,57,30,3,40,13,50,23,60,33,6,43,16,53,26,63,36,9,46,19,56,29,2,39,12,49,22,59,32,5,42,15,52,25,62,35,8,45,18,55,28,1,38,11,48,21,58,31,4,41,14,51,24,61,34,7,44,17,54,27,0,38,12,50,24,62,36,10,48,22,60,34,8,46,20,58,32,6,44,18,56,30,4,42,16,54,28,2,40,14,52,26,0,38,12,50,24,62,36,10,48,22,60,34,8,46,20,58,32,6,44,18,56,30,4,42,16,54,28,2,40,14,52,26,0,39,14,53,28,3,42,17,56,31,6,45,20,59,34,9,48,23,62,37,12,51,26,1,40,15,54,29,4,43,18,57,32,7,46,21,60,35,10,49,24,63,38,13,52,27,2,41,16,55,30,5,44,19,58,33,8,47,22,61,36,11,50,25,0,40,16,56,32,8,48,24,0,40,16,56,32,8,48,24,0,40,16,56,32,8,48,24,0,40,16,56,32,8,48,24,0,40,16,56,32,8,48,24,0,40,16,56,32,8,48,24,0,40,16,56,32,8,48,24,0,40,16,56,32,8,48,24,0,41,18,59,36,13,54,31,8,49,26,3,44,21,62,39,16,57,34,11,52,29,6,47,24,1,42,19,60,37,14,55,32,9,50,27,4,45,22,63,40,17,58,35,12,53,30,7,48,25,2,43,20,61,38,15,56,33,10,51,28,5,46,23,0,42,20,62,40,18,60,38,16,58,36,14,56,34,12,54,32,10,52,30,8,50,28,6,48,26,4,46,24,2,44,22,0,42,20,62,40,18,60,38,16,58,36,14,56,34,12,54,32,10,52,30,8,50,28,6,48,26,4,46,24,2,44,22,0,43,22,1,44,23,2,45,24,3,46,25,4,47,26,5,48,27,6,49,28,7,50,29,8,51,30,9,52,31,10,53,32,11,54,33,12,55,34,13,56,35,14,57,36,15,58,37,16,59,38,17,60,39,18,61,40,19,62,41,20,63,42,21,0,44,24,4,48,28,8,52,32,12,56,36,16,60,40,20,0,44,24,4,48,28,8,52,32,12,56,36,16,60,40,20,0,44,24,4,48,28,8,52,32,12,56,36,16,60,40,20,0,44,24,4,48,28,8,52,32,12,56,36,16,60,40,20,0,45,26,7,52,33,14,59,40,21,2,47,28,9,54,35,16,61,42,23,4,49,30,11,56,37,18,63,44,25,6,51,32,13,58,39,20,1,46,27,8,53,34,15,60,41,22,3,48,29,10,55,36,17,62,43,24,5,50,31,12,57,38,19,0,46,28,10,56,38,20,2,48,30,12,58,40,22,4,50,32,14,60,42,24,6,52,34,16,62,44,26,8,54,36,18,0,46,28,10,56,38,20,2,48,30,12,58,40,22,4,50,32,14,60,42,24,6,52,34,16,62,44,26,8,54,36,18,0,47,30,13,60,43,26,9,56,39,22,5,52,35,18,1,48,31,14,61,44,27,10,57,40,23,6,53,36,19,2,49,32,15,62,45,28,11,58,41,24,7,54,37,20,3,50,33,16,63,46,29,12,59,42,25,8,55,38,21,4,51,34,17,0,48,32,16,0,48,32,16,0,48,32,16,0,48,32,16,0,48,32,16,0,48,32,16,0,48,32,16,0,48,32,16,0,48,32,16,0,48,32,16,0,48,32,16,0,48,32,16,0,48,32,16,0,48,32,16,0,48,32,16,0,48,32,16,0,49,34,19,4,53,38,23,8,57,42,27,12,61,46,31,16,1,50,35,20,5,54,39,24,9,58,43,28,13,62,47,32,17,2,51,36,21,6,55,40,25,10,59,44,29,14,63,48,33,18,3,52,37,22,7,56,41,26,11,60,45,30,15,0,50,36,22,8,58,44,30,16,2,52,38,24,10,60,46,32,18,4,54,40,26,12,62,48,34,20,6,56,42,28,14,0,50,36,22,8,58,44,30,16,2,52,38,24,10,60,46,32,18,4,54,40,26,12,62,48,34,20,6,56,42,28,14,0,51,38,25,12,63,50,37,24,11,62,49,36,23,10,61,48,35,22,9,60,47,34,21,8,59,46,33,20,7,58,45,32,19,6,57,44,31,18,5,56,43,30,17,4,55,42,29,16,3,54,41,28,15,2,53,40,27,14,1,52,39,26,13,0,52,40,28,16,4,56,44,32,20,8,60,48,36,24,12,0,52,40,28,16,4,56,44,32,20,8,60,48,36,24,12,0,52,40,28,16,4,56,44,32,20,8,60,48,36,24,12,0,52,40,28,16,4,56,44,32,20,8,60,48,36,24,12,0,53,42,31,20,9,62,51,40,29,18,7,60,49,38,27,16,5,58,47,36,25,14,3,56,45,34,23,12,1,54,43,32,21,10,63,52,41,30,19,8,61,50,39,28,17,6,59,48,37,26,15,4,57,46,35,24,13,2,55,44,33,22,11,0,54,44,34,24,14,4,58,48,38,28,18,8,62,52,42,32,22,12,2,56,46,36,26,16,6,60,50,40,30,20,10,0,54,44,34,24,14,4,58,48,38,28,18,8,62,52,42,32,22,12,2,56,46,36,26,16,6,60,50,40,30,20,10,0,55,46,37,28,19,10,1,56,47,38,29,20,11,2,57,48,39,30,21,12,3,58,49,40,31,22,13,4,59,50,41,32,23,14,5,60,51,42,33,24,15,6,61,52,43,34,25,16,7,62,53,44,35,26,17,8,63,54,45,36,27,18,9,0,56,48,40,32,24,16,8,0,56,48,40,32,24,16,8,0,56,48,40,32,24,16,8,0,56,48,40,32,24,16,8,0,56,48,40,32,24,16,8,0,56,48,40,32,24,16,8,0,56,48,40,32,24,16,8,0,56,48,40,32,24,16,8,0,57,50,43,36,29,22,15,8,1,58,51,44,37,30,23,16,9,2,59,52,45,38,31,24,17,10,3,60,53,46,39,32,25,18,11,4,61,54,47,40,33,26,19,12,5,62,55,48,41,34,27,20,13,6,63,56,49,42,35,28,21,14,7,0,58,52,46,40,34,28,22,16,10,4,62,56,50,44,38,32,26,20,14,8,2,60,54,48,42,36,30,24,18,12,6,0,58,52,46,40,34,28,22,16,10,4,62,56,50,44,38,32,26,20,14,8,2,60,54,48,42,36,30,24,18,12,6,0,59,54,49,44,39,34,29,24,19,14,9,4,63,58,53,48,43,38,33,28,23,18,13,8,3,62,57,52,47,42,37,32,27,22,17,12,7,2,61,56,51,46,41,36,31,26,21,16,11,6,1,60,55,50,45,40,35,30,25,20,15,10,5,0,60,56,52,48,44,40,36,32,28,24,20,16,12,8,4,0,60,56,52,48,44,40,36,32,28,24,20,16,12,8,4,0,60,56,52,48,44,40,36,32,28,24,20,16,12,8,4,0,60,56,52,48,44,40,36,32,28,24,20,16,12,8,4,0,61,58,55,52,49,46,43,40,37,34,31,28,25,22,19,16,13,10,7,4,1,62,59,56,53,50,47,44,41,38,35,32,29,26,23,20,17,14,11,8,5,2,63,60,57,54,51,48,45,42,39,36,33,30,27,24,21,18,15,12,9,6,3,0,62,60,58,56,54,52,50,48,46,44,42,40,38,36,34,32,30,28,26,24,22,20,18,16,14,12,10,8,6,4,2,0,62,60,58,56,54,52,50,48,46,44,42,40,38,36,34,32,30,28,26,24,22,20,18,16,14,12,10,8,6,4,2,0,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1, };
        private static readonly byte[] inv = new byte[] { 0,1,0,43,0,13,0,55,0,57,0,35,0,5,0,47,0,49,0,27,0,61,0,39,0,41,0,19,0,53,0,31,0,33,0,11,0,45,0,23,0,25,0,3,0,37,0,15,0,17,0,59,0,29,0,7,0,9,0,51,0,21,0,63, };
        private static readonly byte[] div = new byte[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,3,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,3,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,4,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,4,3,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,5,3,2,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,5,3,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,6,4,3,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,6,4,3,2,2,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,7,4,3,2,2,2,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,7,5,3,3,2,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,8,5,4,3,2,2,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,8,5,4,3,2,2,2,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,9,6,4,3,3,2,2,2,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,9,6,4,3,3,2,2,2,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,10,6,5,4,3,2,2,2,2,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,10,7,5,4,3,3,2,2,2,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,11,7,5,4,3,3,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,11,7,5,4,3,3,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,12,8,6,4,4,3,3,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,12,8,6,5,4,3,3,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,13,8,6,5,4,3,3,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,13,9,6,5,4,3,3,3,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,14,9,7,5,4,4,3,3,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,14,9,7,5,4,4,3,3,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,15,10,7,6,5,4,3,3,3,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,15,10,7,6,5,4,3,3,3,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,16,10,8,6,5,4,4,3,3,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,16,11,8,6,5,4,4,3,3,3,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,17,11,8,6,5,4,4,3,3,3,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,17,11,8,7,5,5,4,3,3,3,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,18,12,9,7,6,5,4,4,3,3,3,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,18,12,9,7,6,5,4,4,3,3,3,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,19,12,9,7,6,5,4,4,3,3,3,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,19,13,9,7,6,5,4,4,3,3,3,3,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,20,13,10,8,6,5,5,4,4,3,3,3,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,20,13,10,8,6,5,5,4,4,3,3,3,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,21,14,10,8,7,6,5,4,4,3,3,3,3,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,21,14,10,8,7,6,5,4,4,3,3,3,3,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,22,14,11,8,7,6,5,4,4,4,3,3,3,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,22,15,11,9,7,6,5,5,4,4,3,3,3,3,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,23,15,11,9,7,6,5,5,4,4,3,3,3,3,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,23,15,11,9,7,6,5,5,4,4,3,3,3,3,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,24,16,12,9,8,6,6,5,4,4,4,3,3,3,3,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,24,16,12,9,8,7,6,5,4,4,4,3,3,3,3,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,25,16,12,10,8,7,6,5,5,4,4,3,3,3,3,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,25,17,12,10,8,7,6,5,5,4,4,3,3,3,3,3,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,52,26,17,13,10,8,7,6,5,5,4,4,4,3,3,3,3,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,53,26,17,13,10,8,7,6,5,5,4,4,4,3,3,3,3,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,54,27,18,13,10,9,7,6,6,5,4,4,4,3,3,3,3,3,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,55,27,18,13,11,9,7,6,6,5,5,4,4,3,3,3,3,3,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,56,28,18,14,11,9,8,7,6,5,5,4,4,4,3,3,3,3,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,57,28,19,14,11,9,8,7,6,5,5,4,4,4,3,3,3,3,3,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,58,29,19,14,11,9,8,7,6,5,5,4,4,4,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,59,29,19,14,11,9,8,7,6,5,5,4,4,4,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,60,30,20,15,12,10,8,7,6,6,5,5,4,4,4,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,61,30,20,15,12,10,8,7,6,6,5,5,4,4,4,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,62,31,20,15,12,10,8,7,6,6,5,5,4,4,4,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,63,31,21,15,12,10,9,7,7,6,5,5,4,4,4,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, };
        private static readonly byte[] rem = new byte[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,1,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,1,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,1,2,1,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,2,1,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,1,1,3,2,1,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,2,0,3,2,1,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,1,0,1,4,3,2,1,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,1,2,0,4,3,2,1,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,1,2,3,1,5,4,3,2,1,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,2,0,5,4,3,2,1,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,1,1,1,3,1,6,5,4,3,2,1,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,0,2,2,4,2,0,6,5,4,3,2,1,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,1,0,3,0,3,1,7,6,5,4,3,2,1,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,1,0,1,4,2,0,7,6,5,4,3,2,1,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,1,2,1,2,5,3,1,8,7,6,5,4,3,2,1,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,0,2,3,0,4,2,0,8,7,6,5,4,3,2,1,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,0,1,1,3,4,1,5,3,1,9,8,7,6,5,4,3,2,1,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,0,0,2,0,0,2,6,4,2,0,9,8,7,6,5,4,3,2,1,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,0,1,0,1,1,3,0,5,3,1,10,9,8,7,6,5,4,3,2,1,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,0,0,1,2,2,4,1,6,4,2,0,10,9,8,7,6,5,4,3,2,1,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,0,1,2,3,3,5,2,7,5,3,1,11,10,9,8,7,6,5,4,3,2,1,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,0,0,0,0,4,0,3,0,6,4,2,0,11,10,9,8,7,6,5,4,3,2,1,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,0,1,1,1,0,1,4,1,7,5,3,1,12,11,10,9,8,7,6,5,4,3,2,1,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,0,0,2,2,1,2,5,2,8,6,4,2,0,12,11,10,9,8,7,6,5,4,3,2,1,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,0,1,0,3,2,3,6,3,0,7,5,3,1,13,12,11,10,9,8,7,6,5,4,3,2,1,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,0,0,1,0,3,4,0,4,1,8,6,4,2,0,13,12,11,10,9,8,7,6,5,4,3,2,1,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,0,1,2,1,4,5,1,5,2,9,7,5,3,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,0,0,0,2,0,0,2,6,3,0,8,6,4,2,0,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,0,1,1,3,1,1,3,7,4,1,9,7,5,3,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,0,0,2,0,2,2,4,0,5,2,10,8,6,4,2,0,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,0,1,0,1,3,3,5,1,6,3,0,9,7,5,3,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,0,0,0,1,2,4,4,6,2,7,4,1,10,8,6,4,2,0,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,0,1,2,3,0,5,0,3,8,5,2,11,9,7,5,3,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,0,0,0,0,1,0,1,4,0,6,3,0,10,8,6,4,2,0,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,0,1,1,1,2,1,2,5,1,7,4,1,11,9,7,5,3,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,0,0,2,2,3,2,3,6,2,8,5,2,12,10,8,6,4,2,0,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,0,0,1,0,3,4,3,4,7,3,9,6,3,0,11,9,7,5,3,1,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,0,0,1,0,0,4,5,0,4,0,7,4,1,12,10,8,6,4,2,0,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,1,2,1,1,5,6,1,5,1,8,5,2,13,11,9,7,5,3,1,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,0,0,0,2,2,0,0,2,6,2,9,6,3,0,12,10,8,6,4,2,0,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,0,1,1,3,3,1,1,3,7,3,10,7,4,1,13,11,9,7,5,3,1,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,0,0,2,0,4,2,2,4,8,4,0,8,5,2,14,12,10,8,6,4,2,0,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,1,0,1,0,3,3,5,0,5,1,9,6,3,0,13,11,9,7,5,3,1,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,0,0,1,2,1,4,4,6,1,6,2,10,7,4,1,14,12,10,8,6,4,2,0,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,0,0,1,2,3,2,5,5,7,2,7,3,11,8,5,2,15,13,11,9,7,5,3,1,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,0,0,0,0,3,0,6,0,3,8,4,0,9,6,3,0,14,12,10,8,6,4,2,0,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,0,1,1,1,4,1,0,1,4,9,5,1,10,7,4,1,15,13,11,9,7,5,3,1,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,0,0,2,2,0,2,1,2,5,0,6,2,11,8,5,2,16,14,12,10,8,6,4,2,0,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,50,50,50,50,50,50,50,50,50,50,50,50,50,0,0,1,0,3,1,3,2,3,6,1,7,3,12,9,6,3,0,15,13,11,9,7,5,3,1,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,51,51,51,51,51,51,51,51,51,51,51,51,0,0,0,1,0,2,4,3,4,7,2,8,4,0,10,7,4,1,16,14,12,10,8,6,4,2,0,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,52,52,52,52,52,52,52,52,52,52,52,0,0,1,2,1,3,5,4,5,8,3,9,5,1,11,8,5,2,17,15,13,11,9,7,5,3,1,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,53,53,53,53,53,53,53,53,53,53,0,0,0,0,2,4,0,5,6,0,4,10,6,2,12,9,6,3,0,16,14,12,10,8,6,4,2,0,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,54,54,54,54,54,54,54,54,54,0,0,1,1,3,0,1,6,7,1,5,0,7,3,13,10,7,4,1,17,15,13,11,9,7,5,3,1,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,55,55,55,55,55,55,55,55,0,0,0,2,0,1,2,0,0,2,6,1,8,4,0,11,8,5,2,18,16,14,12,10,8,6,4,2,0,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,56,56,56,56,56,56,56,0,0,1,0,1,2,3,1,1,3,7,2,9,5,1,12,9,6,3,0,17,15,13,11,9,7,5,3,1,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,57,57,57,57,57,57,0,0,0,1,2,3,4,2,2,4,8,3,10,6,2,13,10,7,4,1,18,16,14,12,10,8,6,4,2,0,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,58,58,58,58,58,0,0,1,2,3,4,5,3,3,5,9,4,11,7,3,14,11,8,5,2,19,17,15,13,11,9,7,5,3,1,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,59,59,59,59,0,0,0,0,0,0,0,4,4,6,0,5,0,8,4,0,12,9,6,3,0,18,16,14,12,10,8,6,4,2,0,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,60,60,60,0,0,1,1,1,1,1,5,5,7,1,6,1,9,5,1,13,10,7,4,1,19,17,15,13,11,9,7,5,3,1,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,61,61,0,0,0,2,2,2,2,6,6,8,2,7,2,10,6,2,14,11,8,5,2,20,18,16,14,12,10,8,6,4,2,0,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,62,0,0,1,0,3,3,3,0,7,0,3,8,3,11,7,3,15,12,9,6,3,0,19,17,15,13,11,9,7,5,3,1,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0, };

        /// <summary>
        /// The numeric value of the <see cref="Z64"/>.
        /// </summary>
        public readonly int Value;

        /// <summary>
        /// Creates a <see cref="Z64"/>.
        /// </summary>
        public Z64(int value)
        {
            Value = value & 0x3F;
        }

        private Z64(bool dummy, int value)
        { Value = value; }

        /// <summary>
        /// Explicitly converts a <see cref="Z64"/> to a <see cref="System.Int32"/>.
        /// </summary>
        public static explicit operator int(Z64 value)
        { return value.Value; }

        /// <summary>
        /// Implicitly converts a <see cref="System.Int32"/> to a <see cref="Z64"/>.
        /// </summary>
        public static implicit operator Z64(int value)
        { return new Z64(value); }

        /// <summary>
        /// </summary>
        public override string ToString()
        { return Value.ToString(); }
        
        /// <summary>
        /// </summary>
        public override int GetHashCode()
        { return Value.GetHashCode(); }

        /// <summary>
        /// </summary>
        public override bool Equals(object obj)
        { return obj is Z64 && Equals((Z64)obj); }

        /// <summary>
        /// </summary>
        public bool Equals(Z64 other)
        { return Value == other.Value; }

        /// <summary>
        /// </summary>
        public static bool operator ==(Z64 a, Z64 b)
        { return a.Equals(b); }

        /// <summary>
        /// </summary>
        public static bool operator !=(Z64 a, Z64 b)
        { return !a.Equals(b); }

        /// <summary>
        /// </summary>
        public static Z64 operator +(Z64 a, Z64 b)
        {
            var result = a.Value + b.Value;
            if (result >= 64) result -= 64;
            return new Z64(false, result);
        }

        /// <summary>
        /// </summary>
        public Z64 Add(Z64 other)
        {
            return this + other;
        }

        /// <summary>
        /// </summary>
        public static Z64 operator -(Z64 a, Z64 b)
        {
            var result = a.Value + b.Value;
            if (result < 0) result += 64;
            return new Z64(false, result);
        }

        /// <summary>
        /// </summary>
        public Z64 Subtract(Z64 other)
        {
            return this - other;
        }

        /// <summary>
        /// </summary>
        public static Z64 operator -(Z64 value)
        {
            if (value.Value == 0) return value;
            return new Z64(false, 64 - value.Value);
        }

        /// <summary>
        /// </summary>
        public static Z64 operator *(Z64 a, Z64 b)
        {
            return new Z64(false, mul[a.Value * 64 + b.Value]);
        }

        /// <summary>
        /// </summary>
        public Z64 Multiply(Z64 other)
        {
            return this * other;
        }

        /// <summary>
        /// </summary>
        public static Z64 operator /(Z64 a, Z64 b)
        {
            return new Z64(false, div[a.Value * 64 + b.Value]);
        }

        /// <summary>
        /// </summary>
        public Z64 Divide(Z64 other)
        {
            return this / other;
        }

        /// <summary>
        /// </summary>
        public static Z64 operator %(Z64 a, Z64 b)
        {
            return new Z64(false, rem[a.Value * 64 + b.Value]);
        }

        /// <summary>
        /// </summary>
        public Z64 Modulo(Z64 other)
        {
            return this % other;
        }

        /// <summary>
        /// </summary>
        public static Z64 DivRem(Z64 a, Z64 b, out Z64 r)
        {
            int index = a.Value * 64 + b.Value;
            r = new Z64(false, rem[index]);
            return new Z64(false, div[index]);
        }

        /// <summary>
        /// </summary>
        public Z64 Inverse()
        {
            return Inverse(this);
        }

        /// <summary>
        /// </summary>
        public static Z64 Inverse(Z64 value)
        {
            var result = inv[value.Value];
            if (result == 0) throw new DivideByZeroException();
            return new Z64(false, div[result]);
        }

        /// <summary>
        /// </summary>
        public static Z64 Pow(Z64 value, int exponent)
        {
            if (exponent == 0) return 1;
            var result = 1;
            var b = value.Value;
            var e = Math.Abs(exponent);

            while (e > 0)
            {
                if ((e & 1) == 1)
                {
                    result = (result * b) & 0x3F;
                }

                e >>= 1;
                b = (b * b) & 0x3F;
            }

            if (exponent < 0) 
            {
                result = inv[result];
                if (result == 0) throw new DivideByZeroException();
            }

            return new Z64(false, result);
        }

        /// <summary>
        /// </summary>
        public static Z64 operator &(Z64 a, Z64 b)
        {
            return new Z64(false, a.Value & b.Value);
        }

        /// <summary>
        /// </summary>
        public Z64 And(Z64 other)
        {
            return this & other;
        }

        /// <summary>
        /// </summary>
        public static Z64 operator |(Z64 a, Z64 b)
        {
            return new Z64(false, a.Value | b.Value);
        }

        /// <summary>
        /// </summary>
        public Z64 Or(Z64 other)
        {
            return this | other;
        }

        /// <summary>
        /// </summary>
        public static Z64 operator ^(Z64 a, Z64 b)
        {
            return new Z64(false, a.Value ^ b.Value);
        }

        /// <summary>
        /// </summary>
        public Z64 Xor(Z64 other)
        {
            return this ^ other;
        }

        /// <summary>
        /// </summary>
        public static Z64 operator ~(Z64 value)
        {
            return new Z64(false, ~value.Value);
        }

        /// <summary>
        /// </summary>
        public Z64 Not()
        {
            return ~this;
        }

    }

}
