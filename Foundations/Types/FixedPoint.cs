
/*
FixedPoint.cs

Copyright © 2016 Pluto Scarab Software. Most Rights Reserved.
Author: Bret Mulvey

This work is licensed under the Creative Commons Attribution-ShareAlike 4.0 International License. 
To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/4.0/.

THIS IS AN AUTO-GENERATED SOURCE FILE. DO NOT EDIT THIS FILE DIRECTLY.
INSTEAD, EDIT THE .tt FILE WITH THE SAME NAME AND RE-RUN THE TEXT TEMPLATING
FILE GENERATOR. IF YOU SAVE THE FILE IN VISUAL STUDIO IT WILL DO THIS FOR YOU.
*/

using System;
using System.Globalization;
using Foundations.RandomNumbers;

namespace Foundations.Types
{
    /// <summary>
    /// Signed 32-bit number with 28 fractional bits and 4 integer bits.
    /// Represents values from -8 to 7.999999996274709701538085938 in increments of 0.0000000037252902984619140625.
    /// </summary>
    public partial struct Fixed4p28 : IEquatable<Fixed4p28>, IComparable<Fixed4p28>
    {
        /// <summary>
        /// The constant value 0.
        /// </summary>
        public static readonly Fixed4p28 Zero = new Fixed4p28(0);

        /// <summary>
        /// The constant value 1.
        /// </summary>
        public static readonly Fixed4p28 One = new Fixed4p28(268435456);

        /// <summary>
        /// The constant value -8.
        /// </summary>
        public static readonly Fixed4p28 MinValue = new Fixed4p28(int.MinValue);

        /// <summary>
        /// The constant value 7.999999996274709701538085938.
        /// </summary>
        public static readonly Fixed4p28 MaxValue = new Fixed4p28(int.MaxValue);

        /// <summary>
        /// The constant value 0.0000000037252902984619140625.
        /// </summary>
        public static readonly Fixed4p28 ε = new Fixed4p28(1);

        /// <summary>PI</summary>
        public static readonly Fixed4p28 π          = (Fixed4p28)3.1415926535897932384626433833;

        /// <summary>Base of natural logarithm.</summary>
        public static readonly Fixed4p28 e          = (Fixed4p28)2.7182818284590452353602874714;

        /// <summary>Golden ratio.</summary>
        public static readonly Fixed4p28 φ          = (Fixed4p28)1.6180339887498948482045868344;

        /// <summary>Euler–Mascheroni constant.</summary>
        public static readonly Fixed4p28 γ          = (Fixed4p28)0.5772156649015328606065120901;

        /// <summary>Square root of 2π.</summary>
        public static readonly Fixed4p28 Sqrt2π     = (Fixed4p28)2.5066282746310005024157652848;

        /// <summary>Square root of 5.</summary>
        public static readonly Fixed4p28 Sqrt5      = (Fixed4p28)2.2360679774997896964091736687;

        /// <summary>Square root of π.</summary>
        public static readonly Fixed4p28 Sqrtπ      = (Fixed4p28)1.7724538509055160272981674833;

        /// <summary>Square root of 3.</summary>
        public static readonly Fixed4p28 Sqrt3      = (Fixed4p28)1.7320508075688772935274463415;

        /// <summary>Square root of 2.</summary>
        public static readonly Fixed4p28 Sqrt2      = (Fixed4p28)1.4142135623730950488016887242;

        /// <summary>Square root of π/2.</summary>
        public static readonly Fixed4p28 SqrtHalfπ  = (Fixed4p28)1.2533141373155002512078826424;

        /// <summary>Base-2 logarithm of 10.</summary>
        public static readonly Fixed4p28 Lg10       = (Fixed4p28)3.3219280948873623478703194295;
   
        /// <summary>Natural logarithm of 10.</summary>
        public static readonly Fixed4p28 Ln10       = (Fixed4p28)2.3025850929940456840179914547;

        /// <summary>Base-2 logarithm of e.</summary>
        public static readonly Fixed4p28 LgE        = (Fixed4p28)1.4426950408889634073599246810;
   
        /// <summary>Natural logarithm of 2.</summary>
        public static readonly Fixed4p28 Ln2        = (Fixed4p28)0.6931471805599453094172321215;

        /// <summary>Base-10 logarithm of e.</summary>
        public static readonly Fixed4p28 LogE       = (Fixed4p28)0.4342944819032518276511289189;

        /// <summary>Base-10 logarithm of 2.</summary>
        public static readonly Fixed4p28 Log2       = (Fixed4p28)0.3010299956639811952137388947;

        internal readonly int value;

        private Fixed4p28(int value)
        {
            this.value = value;
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed4p28"/>.
        /// </summary>
        public static Fixed4p28 Parse(string s)
        {
            return new Fixed4p28((int)(double.Parse(s) * 268435456d + .5d));
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed4p28"/>.
        /// </summary>
        public static Fixed4p28 Parse(string s, IFormatProvider provider)
        {
            return new Fixed4p28((int)(double.Parse(s, provider) * 268435456d + .5d));
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed4p28"/>.
        /// </summary>
        public static Fixed4p28 Parse(string s, NumberStyles style)
        {
            return new Fixed4p28((int)(double.Parse(s, style) * 268435456d + .5d));
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed4p28"/>.
        /// </summary>
        public static Fixed4p28 Parse(string s, NumberStyles style, IFormatProvider provider)
        {
            return new Fixed4p28((int)(double.Parse(s, style, provider) * 268435456d + .5d));
        }

        /// <summary>
        /// Tries to parse a string representation of a <see cref="Fixed4p28"/>.
        /// </summary>
        public static bool TryParse(string s, out Fixed4p28 result)
        {
            double d;
            
            if (!double.TryParse(s, out d))
            {
                result = Zero;
                return false;
            }

            result = new Fixed4p28((int)(d * 268435456d + .5d));
            return true;
        }

        /// <summary>
        /// Tries to parse a string representation of a <see cref="Fixed4p28"/>.
        /// </summary>
        public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out Fixed4p28 result)
        {
            double d;
            
            if (!double.TryParse(s, style, provider, out d))
            {
                result = Zero;
                return false;
            }

            result = new Fixed4p28((int)(d * 268435456d + .5d));
            return true;
        }

        /// <summary>
        /// Implementation of <see cref="object.ToString"/>.
        /// </summary>
        public override string ToString()
        {
            return (value * 0.0000000037252902984619140625d).ToString();
        }

        /// <summary>
        /// Gets a string representation of this <see cref="Fixed4p28"/>.
        /// </summary>
        public string ToString(string format)
        {
            return (value * 0.0000000037252902984619140625d).ToString(format);
        }

        /// <summary>
        /// Gets a string representation of this <see cref="Fixed4p28"/>.
        /// </summary>
        public string ToString(IFormatProvider provider)
        {
            return (value * 0.0000000037252902984619140625d).ToString(provider);
        }

        /// <summary>
        /// Gets a string representation of this <see cref="Fixed4p28"/>.
        /// </summary>
        public string ToString(string format, IFormatProvider provider)
        {
            return (value * 0.0000000037252902984619140625d).ToString(format, provider);
        }

        /// <summary>
        /// Explicitly converts a <see cref="Decimal"/> to a Fixed4p28.
        /// </summary>
        public static explicit operator Fixed4p28(decimal value)
        {
            if (value < -8m || value > 7.999999996274709701538085938m) throw new ArgumentOutOfRangeException();
            return new Fixed4p28((int)(value * 268435456m + .5m));
        }

        /// <summary>
        /// Implicitly converts a Fixed4p28 to a <see cref="Decimal"/>.
        /// </summary>
        public static implicit operator decimal(Fixed4p28 value)
        {
            return value.value * 0.0000000037252902984619140625m;
        }

        /// <summary>
        /// Explicitly converts a <see cref="Double"/> to a Fixed4p28.
        /// </summary>
        public static explicit operator Fixed4p28(double value)
        {
            if (value < -8d || value > 7.999999996274709701538085938d) throw new ArgumentOutOfRangeException();
            return new Fixed4p28((int)(value * 268435456d + .5d));
        }

        /// <summary>
        /// Implicitly converts a Fixed4p28 to a <see cref="Double"/>.
        /// </summary>
        public static implicit operator double(Fixed4p28 value)
        {
            return value.value * 0.0000000037252902984619140625d;
        }

        /// <summary>
        /// Explicitly converts a Fixed4p28 to a <see cref="Single"/>.
        /// </summary>
        public static explicit operator float(Fixed4p28 value)
        {
            return value.value * 0.0000000037252902984619140625f;
        }

        /// <summary>
        /// Implicitly converts a <see cref="Int64"/> to a Fixed4p28.
        /// </summary>
        public static implicit operator Fixed4p28(long value)
        {
            return new Fixed4p28((int)(value << 28));
        }

        /// <summary>
        /// Explicitly converts a Fixed4p28 to a <see cref="System.Int64"/>.
        /// </summary>
        public static explicit operator long(Fixed4p28 value)
        {
            return (long)(value.value >> 28);
        }

        /// <summary>
        /// Explicitly converts a Fixed4p28 to a <see cref="System.UInt64"/>.
        /// </summary>
        public static explicit operator ulong(Fixed4p28 value)
        {
            return (ulong)(value.value >> 28);
        }

        /// <summary>
        /// Explicitly converts a Fixed4p28 to a <see cref="System.Int32"/>.
        /// </summary>
        public static explicit operator int(Fixed4p28 value)
        {
            return (int)(value.value >> 28);
        }

        /// <summary>
        /// Explicitly converts a Fixed4p28 to a <see cref="System.UInt32"/>.
        /// </summary>
        public static explicit operator uint(Fixed4p28 value)
        {
            return (uint)(value.value >> 28);
        }

        /// <summary>
        /// Explicitly converts a Fixed4p28 to a <see cref="System.Int16"/>.
        /// </summary>
        public static explicit operator short(Fixed4p28 value)
        {
            return (short)(value.value >> 28);
        }

        /// <summary>
        /// Explicitly converts a Fixed4p28 to a <see cref="System.UInt16"/>.
        /// </summary>
        public static explicit operator ushort(Fixed4p28 value)
        {
            return (ushort)(value.value >> 28);
        }

        /// <summary>
        /// Explicitly converts a Fixed4p28 to a <see cref="System.SByte"/>.
        /// </summary>
        public static explicit operator sbyte(Fixed4p28 value)
        {
            return (sbyte)(value.value >> 28);
        }

        /// <summary>
        /// Explicitly converts a Fixed4p28 to a <see cref="System.Byte"/>.
        /// </summary>
        public static explicit operator byte(Fixed4p28 value)
        {
            return (byte)(value.value >> 28);
        }

        /// <summary>
        /// Implementation of <see cref="object.Equals(object)"/>.
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is Fixed4p28 && Equals((Fixed4p28)obj);
        }

        /// <summary>
        /// Implementation of <see cref="IEquatable{Fixed4p28}"/>.
        /// </summary>
        public bool Equals(Fixed4p28 other)
        {
            return value == other.value;
        }

        /// <summary>
        /// Equality operator.
        /// </summary>
        public static bool operator ==(Fixed4p28 a, Fixed4p28 b)
        {
            return a.value == b.value;
        }

        /// <summary>
        /// Inequality operator.
        /// </summary>
        public static bool operator !=(Fixed4p28 a, Fixed4p28 b)
        {
            return a.value != b.value;
        }

        /// <summary>
        /// Implementation of <see cref="object.GetHashCode"/>.
        /// </summary>
        public override int GetHashCode()
        {
            return value ^ 476151281;
        }

        /// <summary>
        /// Implementation of <see cref="IComparable{Fixed4p28}"/>.
        /// </summary>
        public int CompareTo(Fixed4p28 other)
        {
            return value.CompareTo(other.value);
        }

        /// <summary>
        /// Right-shift operator.
        /// </summary>
        public static Fixed4p28 operator >>(Fixed4p28 value, int shift)
        {
            return new Fixed4p28((int)(value.value >> shift));
        }

        /// <summary>
        /// Left-shift operator.
        /// </summary>
        public static Fixed4p28 operator <<(Fixed4p28 value, int shift)
        {
            return new Fixed4p28((int)(value.value << shift));
        }

        /// <summary>
        /// Gets the underlying bits that represent this <see cref="Fixed4p28"/>.
        /// </summary>
        public static int ToInt32Bits(Fixed4p28 value)
        {
            return value.value;
        }

        /// <summary>
        /// Creates a <see cref="Fixed4p28"/> from the underlying bit representation.
        /// </summary>
        public static Fixed4p28 FromInt32Bits(int value)
        {
            return new Fixed4p28(value);
        }

        /// <summary>
        /// Unary plus operator.
        /// </summary>
        public static Fixed4p28 operator +(Fixed4p28 value)
        {
            return value;
        }

        /// <summary>
        /// Unary minus operator.
        /// </summary>
        public static Fixed4p28 operator -(Fixed4p28 value)
        {
            return new Fixed4p28((int)(-value.value));
        }

        /// <summary>
        /// Addition operator.
        /// </summary>
        public static Fixed4p28 operator +(Fixed4p28 a, Fixed4p28 b)
        {
            return new Fixed4p28((int)(a.value + b.value));
        }

        /// <summary>
        /// Subtraction operator.
        /// </summary>
        public static Fixed4p28 operator -(Fixed4p28 a, Fixed4p28 b)
        {
            return new Fixed4p28((int)(a.value - b.value));
        }

        /// <summary>
        /// Multiplication operator.
        /// </summary>
        public static Fixed4p28 operator *(Fixed4p28 a, Fixed4p28 b)
        {
            return new Fixed4p28((int)(((long)a.value * (long)b.value + ((long)1 << 27)) >> 28));
        }

        /// <summary>
        /// Division operator.
        /// </summary>
        public static Fixed4p28 operator /(Fixed4p28 a, Fixed4p28 b)
        {
            return new Fixed4p28((int)((((long)a.value << 32) / b.value) >> 4));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed8p24"/> to a <see cref="Fixed4p28"/>.
        /// </summary>
        public static explicit operator Fixed4p28(Fixed8p24 other)
        {
            if (other.value < -134217728 || other.value > 134217727) throw new ArgumentOutOfRangeException();
            return new Fixed4p28((int)(other.value << 4));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed12p20"/> to a <see cref="Fixed4p28"/>.
        /// </summary>
        public static explicit operator Fixed4p28(Fixed12p20 other)
        {
            if (other.value < -8388608 || other.value > 8388607) throw new ArgumentOutOfRangeException();
            return new Fixed4p28((int)(other.value << 8));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed16p16"/> to a <see cref="Fixed4p28"/>.
        /// </summary>
        public static explicit operator Fixed4p28(Fixed16p16 other)
        {
            if (other.value < -524288 || other.value > 524287) throw new ArgumentOutOfRangeException();
            return new Fixed4p28((int)(other.value << 12));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed20p12"/> to a <see cref="Fixed4p28"/>.
        /// </summary>
        public static explicit operator Fixed4p28(Fixed20p12 other)
        {
            if (other.value < -32768 || other.value > 32767) throw new ArgumentOutOfRangeException();
            return new Fixed4p28((int)(other.value << 16));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed24p8"/> to a <see cref="Fixed4p28"/>.
        /// </summary>
        public static explicit operator Fixed4p28(Fixed24p8 other)
        {
            if (other.value < -2048 || other.value > 2047) throw new ArgumentOutOfRangeException();
            return new Fixed4p28((int)(other.value << 20));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed28p4"/> to a <see cref="Fixed4p28"/>.
        /// </summary>
        public static explicit operator Fixed4p28(Fixed28p4 other)
        {
            if (other.value < -128 || other.value > 127) throw new ArgumentOutOfRangeException();
            return new Fixed4p28((int)(other.value << 24));
        }

        /// <summary>
        /// Gets the absolute value of a <see cref="Fixed4p28"/>.
        /// </summary>
        public static Fixed4p28 Abs(Fixed4p28 value)
        {
            return new Fixed4p28(Math.Abs(value.value));
        }

        /// <summary>
        /// Gets the absolute value of this <see cref="Fixed4p28"/>.
        /// </summary>
        public Fixed4p28 Abs()
        {
            return new Fixed4p28(Math.Abs(value));
        }

        /// <summary>
        /// Gets the greatest integer <see cref="Fixed4p28"/> that is not greater than the specified value.
        /// </summary>
        public static Fixed4p28 Floor(Fixed4p28 value)
        {
            return new Fixed4p28((int)(value.value & 0xF0000000));
        }

        /// <summary>
        /// Gets the greatest integer <see cref="Fixed4p28"/> that is not greater than this value.
        /// </summary>
        public Fixed4p28 Floor()
        {
            return new Fixed4p28((int)(value & 0xF0000000));
        }

        /// <summary>
        /// Gets the least integer <see cref="Fixed4p28"/> that is not less than the specified value.
        /// </summary>
        public static Fixed4p28 Ceiling(Fixed4p28 value)
        {
            return new Fixed4p28((int)((value.value + 0xFFFFFFF) & 0xF0000000));
        }

        /// <summary>
        /// Gets the least integer <see cref="Fixed4p28"/> that is not less than this value.
        /// </summary>
        public Fixed4p28 Ceiling()
        {
            return new Fixed4p28((int)((value + 0xFFFFFFF) & 0xF0000000));
        }

        /// <summary>
        /// Gets the nearest integer <see cref="Fixed4p28"/> to the specified value.
        /// </summary>
        public static Fixed4p28 Round(Fixed4p28 value)
        {
            return new Fixed4p28((int)((value.value + 0x8000000) & 0xF0000000));
        }

        /// <summary>
        /// Gets the nearest integer <see cref="Fixed4p28"/> to this value.
        /// </summary>
        public Fixed4p28 Round()
        {
            return new Fixed4p28((int)((value + 0x8000000) & 0xF0000000));
        }

        /// <summary>
        /// Gets the fractional portion of a <see cref="Fixed4p28"/>.
        /// </summary>
        public static Fixed4p28 Frac(Fixed4p28 value)
        {
            return new Fixed4p28((int)(Math.Abs(value.value) & 0xFFFFFFF));
        }

        /// <summary>
        /// Gets the fractional portion of this <see cref="Fixed4p28"/>.
        /// </summary>
        public Fixed4p28 Frac()
        {
            return new Fixed4p28((int)(Math.Abs(value) & 0xFFFFFFF));
        }

        /// <summary>
        /// Rounds a <see cref="Fixed4p28"/> toward zero.
        /// </summary>
        public static Fixed4p28 Truncate(Fixed4p28 value)
        {
            return value.value >= 0 ? Floor(value) : Ceiling(value);
        }

        /// <summary>
        /// Rounds this <see cref="Fixed4p28"/> toward zero.
        /// </summary>
        public Fixed4p28 Truncate()
        {
            return value >= 0 ? Floor() : Ceiling();
        }

        /// <summary>
        /// Gets the sign of a <see cref="Fixed4p28"/>.
        /// </summary>
        public static int Sign(Fixed4p28 value)
        {
            return Math.Sign(value.value);
        }

        /// <summary>
        /// Gets the sign of this <see cref="Fixed4p28"/>.
        /// </summary>
        public int Sign()
        {
            return Math.Sign(value);
        }

        /// <summary>
        /// Gets the lesser of two <see cref="Fixed4p28"/> values.
        /// </summary>
        public static Fixed4p28 Min(Fixed4p28 a, Fixed4p28 b)
        {
            return a.value < b.value ? a : b;
        }

        /// <summary>
        /// Gets the greater of two <see cref="Fixed4p28"/> values.
        /// </summary>
        public static Fixed4p28 Max(Fixed4p28 a, Fixed4p28 b)
        {
            return a.value > b.value ? a : b;
        }

        /// <summary>
        /// Acos function.
        /// </summary>
        public static Fixed4p28 Acos(Fixed4p28 x) => (Fixed4p28)Math.Acos((double)x);

        /// <summary>
        /// Acos function.
        /// </summary>
        public Fixed4p28 Acos() => (Fixed4p28)Math.Acos((double)this);

        /// <summary>
        /// Asin function.
        /// </summary>
        public static Fixed4p28 Asin(Fixed4p28 x) => (Fixed4p28)Math.Asin((double)x);

        /// <summary>
        /// Asin function.
        /// </summary>
        public Fixed4p28 Asin() => (Fixed4p28)Math.Asin((double)this);

        /// <summary>
        /// Atan function.
        /// </summary>
        public static Fixed4p28 Atan(Fixed4p28 x) => (Fixed4p28)Math.Atan((double)x);

        /// <summary>
        /// Atan function.
        /// </summary>
        public Fixed4p28 Atan() => (Fixed4p28)Math.Atan((double)this);

        /// <summary>
        /// Cos function.
        /// </summary>
        public static Fixed4p28 Cos(Fixed4p28 x) => (Fixed4p28)Math.Cos((double)x);

        /// <summary>
        /// Cos function.
        /// </summary>
        public Fixed4p28 Cos() => (Fixed4p28)Math.Cos((double)this);

        /// <summary>
        /// Cosh function.
        /// </summary>
        public static Fixed4p28 Cosh(Fixed4p28 x) => (Fixed4p28)Math.Cosh((double)x);

        /// <summary>
        /// Cosh function.
        /// </summary>
        public Fixed4p28 Cosh() => (Fixed4p28)Math.Cosh((double)this);

        /// <summary>
        /// Exp function.
        /// </summary>
        public static Fixed4p28 Exp(Fixed4p28 x) => (Fixed4p28)Math.Exp((double)x);

        /// <summary>
        /// Exp function.
        /// </summary>
        public Fixed4p28 Exp() => (Fixed4p28)Math.Exp((double)this);

        /// <summary>
        /// Log10 function.
        /// </summary>
        public static Fixed4p28 Log10(Fixed4p28 x) => (Fixed4p28)Math.Log10((double)x);

        /// <summary>
        /// Log10 function.
        /// </summary>
        public Fixed4p28 Log10() => (Fixed4p28)Math.Log10((double)this);

        /// <summary>
        /// Sin function.
        /// </summary>
        public static Fixed4p28 Sin(Fixed4p28 x) => (Fixed4p28)Math.Sin((double)x);

        /// <summary>
        /// Sin function.
        /// </summary>
        public Fixed4p28 Sin() => (Fixed4p28)Math.Sin((double)this);

        /// <summary>
        /// Sinh function.
        /// </summary>
        public static Fixed4p28 Sinh(Fixed4p28 x) => (Fixed4p28)Math.Sinh((double)x);

        /// <summary>
        /// Sinh function.
        /// </summary>
        public Fixed4p28 Sinh() => (Fixed4p28)Math.Sinh((double)this);

        /// <summary>
        /// Sqrt function.
        /// </summary>
        public static Fixed4p28 Sqrt(Fixed4p28 x) => (Fixed4p28)Math.Sqrt((double)x);

        /// <summary>
        /// Sqrt function.
        /// </summary>
        public Fixed4p28 Sqrt() => (Fixed4p28)Math.Sqrt((double)this);

        /// <summary>
        /// Tan function.
        /// </summary>
        public static Fixed4p28 Tan(Fixed4p28 x) => (Fixed4p28)Math.Tan((double)x);

        /// <summary>
        /// Tan function.
        /// </summary>
        public Fixed4p28 Tan() => (Fixed4p28)Math.Tan((double)this);

        /// <summary>
        /// Tanh function.
        /// </summary>
        public static Fixed4p28 Tanh(Fixed4p28 x) => (Fixed4p28)Math.Tanh((double)x);

        /// <summary>
        /// Tanh function.
        /// </summary>
        public Fixed4p28 Tanh() => (Fixed4p28)Math.Tanh((double)this);

        /// <summary>
        /// Gets a random <see cref="Fixed4p28"/> from 0 (inclusive) to 1 (exclusive).
        /// </summary>
        public static Fixed4p28 Random(Generator g)
        {
            return new Fixed4p28(g.Int32(268435456));
        }
    }

    /// <summary>
    /// Signed 32-bit number with 24 fractional bits and 8 integer bits.
    /// Represents values from -128 to 127.999999940395355224609375 in increments of 0.000000059604644775390625.
    /// </summary>
    public partial struct Fixed8p24 : IEquatable<Fixed8p24>, IComparable<Fixed8p24>
    {
        /// <summary>
        /// The constant value 0.
        /// </summary>
        public static readonly Fixed8p24 Zero = new Fixed8p24(0);

        /// <summary>
        /// The constant value 1.
        /// </summary>
        public static readonly Fixed8p24 One = new Fixed8p24(16777216);

        /// <summary>
        /// The constant value -128.
        /// </summary>
        public static readonly Fixed8p24 MinValue = new Fixed8p24(int.MinValue);

        /// <summary>
        /// The constant value 127.999999940395355224609375.
        /// </summary>
        public static readonly Fixed8p24 MaxValue = new Fixed8p24(int.MaxValue);

        /// <summary>
        /// The constant value 0.000000059604644775390625.
        /// </summary>
        public static readonly Fixed8p24 ε = new Fixed8p24(1);

        /// <summary>PI</summary>
        public static readonly Fixed8p24 π          = (Fixed8p24)3.1415926535897932384626433833;

        /// <summary>Base of natural logarithm.</summary>
        public static readonly Fixed8p24 e          = (Fixed8p24)2.7182818284590452353602874714;

        /// <summary>Golden ratio.</summary>
        public static readonly Fixed8p24 φ          = (Fixed8p24)1.6180339887498948482045868344;

        /// <summary>Euler–Mascheroni constant.</summary>
        public static readonly Fixed8p24 γ          = (Fixed8p24)0.5772156649015328606065120901;

        /// <summary>Square root of 2π.</summary>
        public static readonly Fixed8p24 Sqrt2π     = (Fixed8p24)2.5066282746310005024157652848;

        /// <summary>Square root of 5.</summary>
        public static readonly Fixed8p24 Sqrt5      = (Fixed8p24)2.2360679774997896964091736687;

        /// <summary>Square root of π.</summary>
        public static readonly Fixed8p24 Sqrtπ      = (Fixed8p24)1.7724538509055160272981674833;

        /// <summary>Square root of 3.</summary>
        public static readonly Fixed8p24 Sqrt3      = (Fixed8p24)1.7320508075688772935274463415;

        /// <summary>Square root of 2.</summary>
        public static readonly Fixed8p24 Sqrt2      = (Fixed8p24)1.4142135623730950488016887242;

        /// <summary>Square root of π/2.</summary>
        public static readonly Fixed8p24 SqrtHalfπ  = (Fixed8p24)1.2533141373155002512078826424;

        /// <summary>Base-2 logarithm of 10.</summary>
        public static readonly Fixed8p24 Lg10       = (Fixed8p24)3.3219280948873623478703194295;
   
        /// <summary>Natural logarithm of 10.</summary>
        public static readonly Fixed8p24 Ln10       = (Fixed8p24)2.3025850929940456840179914547;

        /// <summary>Base-2 logarithm of e.</summary>
        public static readonly Fixed8p24 LgE        = (Fixed8p24)1.4426950408889634073599246810;
   
        /// <summary>Natural logarithm of 2.</summary>
        public static readonly Fixed8p24 Ln2        = (Fixed8p24)0.6931471805599453094172321215;

        /// <summary>Base-10 logarithm of e.</summary>
        public static readonly Fixed8p24 LogE       = (Fixed8p24)0.4342944819032518276511289189;

        /// <summary>Base-10 logarithm of 2.</summary>
        public static readonly Fixed8p24 Log2       = (Fixed8p24)0.3010299956639811952137388947;

        internal readonly int value;

        private Fixed8p24(int value)
        {
            this.value = value;
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed8p24"/>.
        /// </summary>
        public static Fixed8p24 Parse(string s)
        {
            return new Fixed8p24((int)(double.Parse(s) * 16777216d + .5d));
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed8p24"/>.
        /// </summary>
        public static Fixed8p24 Parse(string s, IFormatProvider provider)
        {
            return new Fixed8p24((int)(double.Parse(s, provider) * 16777216d + .5d));
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed8p24"/>.
        /// </summary>
        public static Fixed8p24 Parse(string s, NumberStyles style)
        {
            return new Fixed8p24((int)(double.Parse(s, style) * 16777216d + .5d));
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed8p24"/>.
        /// </summary>
        public static Fixed8p24 Parse(string s, NumberStyles style, IFormatProvider provider)
        {
            return new Fixed8p24((int)(double.Parse(s, style, provider) * 16777216d + .5d));
        }

        /// <summary>
        /// Tries to parse a string representation of a <see cref="Fixed8p24"/>.
        /// </summary>
        public static bool TryParse(string s, out Fixed8p24 result)
        {
            double d;
            
            if (!double.TryParse(s, out d))
            {
                result = Zero;
                return false;
            }

            result = new Fixed8p24((int)(d * 16777216d + .5d));
            return true;
        }

        /// <summary>
        /// Tries to parse a string representation of a <see cref="Fixed8p24"/>.
        /// </summary>
        public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out Fixed8p24 result)
        {
            double d;
            
            if (!double.TryParse(s, style, provider, out d))
            {
                result = Zero;
                return false;
            }

            result = new Fixed8p24((int)(d * 16777216d + .5d));
            return true;
        }

        /// <summary>
        /// Implementation of <see cref="object.ToString"/>.
        /// </summary>
        public override string ToString()
        {
            return (value * 0.000000059604644775390625d).ToString();
        }

        /// <summary>
        /// Gets a string representation of this <see cref="Fixed8p24"/>.
        /// </summary>
        public string ToString(string format)
        {
            return (value * 0.000000059604644775390625d).ToString(format);
        }

        /// <summary>
        /// Gets a string representation of this <see cref="Fixed8p24"/>.
        /// </summary>
        public string ToString(IFormatProvider provider)
        {
            return (value * 0.000000059604644775390625d).ToString(provider);
        }

        /// <summary>
        /// Gets a string representation of this <see cref="Fixed8p24"/>.
        /// </summary>
        public string ToString(string format, IFormatProvider provider)
        {
            return (value * 0.000000059604644775390625d).ToString(format, provider);
        }

        /// <summary>
        /// Explicitly converts a <see cref="Decimal"/> to a Fixed8p24.
        /// </summary>
        public static explicit operator Fixed8p24(decimal value)
        {
            if (value < -128m || value > 127.999999940395355224609375m) throw new ArgumentOutOfRangeException();
            return new Fixed8p24((int)(value * 16777216m + .5m));
        }

        /// <summary>
        /// Implicitly converts a Fixed8p24 to a <see cref="Decimal"/>.
        /// </summary>
        public static implicit operator decimal(Fixed8p24 value)
        {
            return value.value * 0.000000059604644775390625m;
        }

        /// <summary>
        /// Explicitly converts a <see cref="Double"/> to a Fixed8p24.
        /// </summary>
        public static explicit operator Fixed8p24(double value)
        {
            if (value < -128d || value > 127.999999940395355224609375d) throw new ArgumentOutOfRangeException();
            return new Fixed8p24((int)(value * 16777216d + .5d));
        }

        /// <summary>
        /// Implicitly converts a Fixed8p24 to a <see cref="Double"/>.
        /// </summary>
        public static implicit operator double(Fixed8p24 value)
        {
            return value.value * 0.000000059604644775390625d;
        }

        /// <summary>
        /// Explicitly converts a Fixed8p24 to a <see cref="Single"/>.
        /// </summary>
        public static explicit operator float(Fixed8p24 value)
        {
            return value.value * 0.000000059604644775390625f;
        }

        /// <summary>
        /// Implicitly converts a <see cref="Int64"/> to a Fixed8p24.
        /// </summary>
        public static implicit operator Fixed8p24(long value)
        {
            return new Fixed8p24((int)(value << 24));
        }

        /// <summary>
        /// Explicitly converts a Fixed8p24 to a <see cref="System.Int64"/>.
        /// </summary>
        public static explicit operator long(Fixed8p24 value)
        {
            return (long)(value.value >> 24);
        }

        /// <summary>
        /// Explicitly converts a Fixed8p24 to a <see cref="System.UInt64"/>.
        /// </summary>
        public static explicit operator ulong(Fixed8p24 value)
        {
            return (ulong)(value.value >> 24);
        }

        /// <summary>
        /// Explicitly converts a Fixed8p24 to a <see cref="System.Int32"/>.
        /// </summary>
        public static explicit operator int(Fixed8p24 value)
        {
            return (int)(value.value >> 24);
        }

        /// <summary>
        /// Explicitly converts a Fixed8p24 to a <see cref="System.UInt32"/>.
        /// </summary>
        public static explicit operator uint(Fixed8p24 value)
        {
            return (uint)(value.value >> 24);
        }

        /// <summary>
        /// Explicitly converts a Fixed8p24 to a <see cref="System.Int16"/>.
        /// </summary>
        public static explicit operator short(Fixed8p24 value)
        {
            return (short)(value.value >> 24);
        }

        /// <summary>
        /// Explicitly converts a Fixed8p24 to a <see cref="System.UInt16"/>.
        /// </summary>
        public static explicit operator ushort(Fixed8p24 value)
        {
            return (ushort)(value.value >> 24);
        }

        /// <summary>
        /// Explicitly converts a Fixed8p24 to a <see cref="System.SByte"/>.
        /// </summary>
        public static explicit operator sbyte(Fixed8p24 value)
        {
            return (sbyte)(value.value >> 24);
        }

        /// <summary>
        /// Explicitly converts a Fixed8p24 to a <see cref="System.Byte"/>.
        /// </summary>
        public static explicit operator byte(Fixed8p24 value)
        {
            return (byte)(value.value >> 24);
        }

        /// <summary>
        /// Implementation of <see cref="object.Equals(object)"/>.
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is Fixed8p24 && Equals((Fixed8p24)obj);
        }

        /// <summary>
        /// Implementation of <see cref="IEquatable{Fixed8p24}"/>.
        /// </summary>
        public bool Equals(Fixed8p24 other)
        {
            return value == other.value;
        }

        /// <summary>
        /// Equality operator.
        /// </summary>
        public static bool operator ==(Fixed8p24 a, Fixed8p24 b)
        {
            return a.value == b.value;
        }

        /// <summary>
        /// Inequality operator.
        /// </summary>
        public static bool operator !=(Fixed8p24 a, Fixed8p24 b)
        {
            return a.value != b.value;
        }

        /// <summary>
        /// Implementation of <see cref="object.GetHashCode"/>.
        /// </summary>
        public override int GetHashCode()
        {
            return value ^ 502103533;
        }

        /// <summary>
        /// Implementation of <see cref="IComparable{Fixed8p24}"/>.
        /// </summary>
        public int CompareTo(Fixed8p24 other)
        {
            return value.CompareTo(other.value);
        }

        /// <summary>
        /// Right-shift operator.
        /// </summary>
        public static Fixed8p24 operator >>(Fixed8p24 value, int shift)
        {
            return new Fixed8p24((int)(value.value >> shift));
        }

        /// <summary>
        /// Left-shift operator.
        /// </summary>
        public static Fixed8p24 operator <<(Fixed8p24 value, int shift)
        {
            return new Fixed8p24((int)(value.value << shift));
        }

        /// <summary>
        /// Gets the underlying bits that represent this <see cref="Fixed8p24"/>.
        /// </summary>
        public static int ToInt32Bits(Fixed8p24 value)
        {
            return value.value;
        }

        /// <summary>
        /// Creates a <see cref="Fixed8p24"/> from the underlying bit representation.
        /// </summary>
        public static Fixed8p24 FromInt32Bits(int value)
        {
            return new Fixed8p24(value);
        }

        /// <summary>
        /// Unary plus operator.
        /// </summary>
        public static Fixed8p24 operator +(Fixed8p24 value)
        {
            return value;
        }

        /// <summary>
        /// Unary minus operator.
        /// </summary>
        public static Fixed8p24 operator -(Fixed8p24 value)
        {
            return new Fixed8p24((int)(-value.value));
        }

        /// <summary>
        /// Addition operator.
        /// </summary>
        public static Fixed8p24 operator +(Fixed8p24 a, Fixed8p24 b)
        {
            return new Fixed8p24((int)(a.value + b.value));
        }

        /// <summary>
        /// Subtraction operator.
        /// </summary>
        public static Fixed8p24 operator -(Fixed8p24 a, Fixed8p24 b)
        {
            return new Fixed8p24((int)(a.value - b.value));
        }

        /// <summary>
        /// Multiplication operator.
        /// </summary>
        public static Fixed8p24 operator *(Fixed8p24 a, Fixed8p24 b)
        {
            return new Fixed8p24((int)(((long)a.value * (long)b.value + ((long)1 << 23)) >> 24));
        }

        /// <summary>
        /// Division operator.
        /// </summary>
        public static Fixed8p24 operator /(Fixed8p24 a, Fixed8p24 b)
        {
            return new Fixed8p24((int)((((long)a.value << 32) / b.value) >> 8));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed4p28"/> to a <see cref="Fixed8p24"/>.
        /// </summary>
        public static explicit operator Fixed8p24(Fixed4p28 other)
        {
            return new Fixed8p24((int)(other.value >> 4));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed12p20"/> to a <see cref="Fixed8p24"/>.
        /// </summary>
        public static explicit operator Fixed8p24(Fixed12p20 other)
        {
            if (other.value < -134217728 || other.value > 134217727) throw new ArgumentOutOfRangeException();
            return new Fixed8p24((int)(other.value << 4));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed16p16"/> to a <see cref="Fixed8p24"/>.
        /// </summary>
        public static explicit operator Fixed8p24(Fixed16p16 other)
        {
            if (other.value < -8388608 || other.value > 8388607) throw new ArgumentOutOfRangeException();
            return new Fixed8p24((int)(other.value << 8));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed20p12"/> to a <see cref="Fixed8p24"/>.
        /// </summary>
        public static explicit operator Fixed8p24(Fixed20p12 other)
        {
            if (other.value < -524288 || other.value > 524287) throw new ArgumentOutOfRangeException();
            return new Fixed8p24((int)(other.value << 12));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed24p8"/> to a <see cref="Fixed8p24"/>.
        /// </summary>
        public static explicit operator Fixed8p24(Fixed24p8 other)
        {
            if (other.value < -32768 || other.value > 32767) throw new ArgumentOutOfRangeException();
            return new Fixed8p24((int)(other.value << 16));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed28p4"/> to a <see cref="Fixed8p24"/>.
        /// </summary>
        public static explicit operator Fixed8p24(Fixed28p4 other)
        {
            if (other.value < -2048 || other.value > 2047) throw new ArgumentOutOfRangeException();
            return new Fixed8p24((int)(other.value << 20));
        }

        /// <summary>
        /// Gets the absolute value of a <see cref="Fixed8p24"/>.
        /// </summary>
        public static Fixed8p24 Abs(Fixed8p24 value)
        {
            return new Fixed8p24(Math.Abs(value.value));
        }

        /// <summary>
        /// Gets the absolute value of this <see cref="Fixed8p24"/>.
        /// </summary>
        public Fixed8p24 Abs()
        {
            return new Fixed8p24(Math.Abs(value));
        }

        /// <summary>
        /// Gets the greatest integer <see cref="Fixed8p24"/> that is not greater than the specified value.
        /// </summary>
        public static Fixed8p24 Floor(Fixed8p24 value)
        {
            return new Fixed8p24((int)(value.value & 0xFF000000));
        }

        /// <summary>
        /// Gets the greatest integer <see cref="Fixed8p24"/> that is not greater than this value.
        /// </summary>
        public Fixed8p24 Floor()
        {
            return new Fixed8p24((int)(value & 0xFF000000));
        }

        /// <summary>
        /// Gets the least integer <see cref="Fixed8p24"/> that is not less than the specified value.
        /// </summary>
        public static Fixed8p24 Ceiling(Fixed8p24 value)
        {
            return new Fixed8p24((int)((value.value + 0xFFFFFF) & 0xFF000000));
        }

        /// <summary>
        /// Gets the least integer <see cref="Fixed8p24"/> that is not less than this value.
        /// </summary>
        public Fixed8p24 Ceiling()
        {
            return new Fixed8p24((int)((value + 0xFFFFFF) & 0xFF000000));
        }

        /// <summary>
        /// Gets the nearest integer <see cref="Fixed8p24"/> to the specified value.
        /// </summary>
        public static Fixed8p24 Round(Fixed8p24 value)
        {
            return new Fixed8p24((int)((value.value + 0x800000) & 0xFF000000));
        }

        /// <summary>
        /// Gets the nearest integer <see cref="Fixed8p24"/> to this value.
        /// </summary>
        public Fixed8p24 Round()
        {
            return new Fixed8p24((int)((value + 0x800000) & 0xFF000000));
        }

        /// <summary>
        /// Gets the fractional portion of a <see cref="Fixed8p24"/>.
        /// </summary>
        public static Fixed8p24 Frac(Fixed8p24 value)
        {
            return new Fixed8p24((int)(Math.Abs(value.value) & 0xFFFFFF));
        }

        /// <summary>
        /// Gets the fractional portion of this <see cref="Fixed8p24"/>.
        /// </summary>
        public Fixed8p24 Frac()
        {
            return new Fixed8p24((int)(Math.Abs(value) & 0xFFFFFF));
        }

        /// <summary>
        /// Rounds a <see cref="Fixed8p24"/> toward zero.
        /// </summary>
        public static Fixed8p24 Truncate(Fixed8p24 value)
        {
            return value.value >= 0 ? Floor(value) : Ceiling(value);
        }

        /// <summary>
        /// Rounds this <see cref="Fixed8p24"/> toward zero.
        /// </summary>
        public Fixed8p24 Truncate()
        {
            return value >= 0 ? Floor() : Ceiling();
        }

        /// <summary>
        /// Gets the sign of a <see cref="Fixed8p24"/>.
        /// </summary>
        public static int Sign(Fixed8p24 value)
        {
            return Math.Sign(value.value);
        }

        /// <summary>
        /// Gets the sign of this <see cref="Fixed8p24"/>.
        /// </summary>
        public int Sign()
        {
            return Math.Sign(value);
        }

        /// <summary>
        /// Gets the lesser of two <see cref="Fixed8p24"/> values.
        /// </summary>
        public static Fixed8p24 Min(Fixed8p24 a, Fixed8p24 b)
        {
            return a.value < b.value ? a : b;
        }

        /// <summary>
        /// Gets the greater of two <see cref="Fixed8p24"/> values.
        /// </summary>
        public static Fixed8p24 Max(Fixed8p24 a, Fixed8p24 b)
        {
            return a.value > b.value ? a : b;
        }

        /// <summary>
        /// Acos function.
        /// </summary>
        public static Fixed8p24 Acos(Fixed8p24 x) => (Fixed8p24)Math.Acos((double)x);

        /// <summary>
        /// Acos function.
        /// </summary>
        public Fixed8p24 Acos() => (Fixed8p24)Math.Acos((double)this);

        /// <summary>
        /// Asin function.
        /// </summary>
        public static Fixed8p24 Asin(Fixed8p24 x) => (Fixed8p24)Math.Asin((double)x);

        /// <summary>
        /// Asin function.
        /// </summary>
        public Fixed8p24 Asin() => (Fixed8p24)Math.Asin((double)this);

        /// <summary>
        /// Atan function.
        /// </summary>
        public static Fixed8p24 Atan(Fixed8p24 x) => (Fixed8p24)Math.Atan((double)x);

        /// <summary>
        /// Atan function.
        /// </summary>
        public Fixed8p24 Atan() => (Fixed8p24)Math.Atan((double)this);

        /// <summary>
        /// Cos function.
        /// </summary>
        public static Fixed8p24 Cos(Fixed8p24 x) => (Fixed8p24)Math.Cos((double)x);

        /// <summary>
        /// Cos function.
        /// </summary>
        public Fixed8p24 Cos() => (Fixed8p24)Math.Cos((double)this);

        /// <summary>
        /// Cosh function.
        /// </summary>
        public static Fixed8p24 Cosh(Fixed8p24 x) => (Fixed8p24)Math.Cosh((double)x);

        /// <summary>
        /// Cosh function.
        /// </summary>
        public Fixed8p24 Cosh() => (Fixed8p24)Math.Cosh((double)this);

        /// <summary>
        /// Exp function.
        /// </summary>
        public static Fixed8p24 Exp(Fixed8p24 x) => (Fixed8p24)Math.Exp((double)x);

        /// <summary>
        /// Exp function.
        /// </summary>
        public Fixed8p24 Exp() => (Fixed8p24)Math.Exp((double)this);

        /// <summary>
        /// Log10 function.
        /// </summary>
        public static Fixed8p24 Log10(Fixed8p24 x) => (Fixed8p24)Math.Log10((double)x);

        /// <summary>
        /// Log10 function.
        /// </summary>
        public Fixed8p24 Log10() => (Fixed8p24)Math.Log10((double)this);

        /// <summary>
        /// Sin function.
        /// </summary>
        public static Fixed8p24 Sin(Fixed8p24 x) => (Fixed8p24)Math.Sin((double)x);

        /// <summary>
        /// Sin function.
        /// </summary>
        public Fixed8p24 Sin() => (Fixed8p24)Math.Sin((double)this);

        /// <summary>
        /// Sinh function.
        /// </summary>
        public static Fixed8p24 Sinh(Fixed8p24 x) => (Fixed8p24)Math.Sinh((double)x);

        /// <summary>
        /// Sinh function.
        /// </summary>
        public Fixed8p24 Sinh() => (Fixed8p24)Math.Sinh((double)this);

        /// <summary>
        /// Sqrt function.
        /// </summary>
        public static Fixed8p24 Sqrt(Fixed8p24 x) => (Fixed8p24)Math.Sqrt((double)x);

        /// <summary>
        /// Sqrt function.
        /// </summary>
        public Fixed8p24 Sqrt() => (Fixed8p24)Math.Sqrt((double)this);

        /// <summary>
        /// Tan function.
        /// </summary>
        public static Fixed8p24 Tan(Fixed8p24 x) => (Fixed8p24)Math.Tan((double)x);

        /// <summary>
        /// Tan function.
        /// </summary>
        public Fixed8p24 Tan() => (Fixed8p24)Math.Tan((double)this);

        /// <summary>
        /// Tanh function.
        /// </summary>
        public static Fixed8p24 Tanh(Fixed8p24 x) => (Fixed8p24)Math.Tanh((double)x);

        /// <summary>
        /// Tanh function.
        /// </summary>
        public Fixed8p24 Tanh() => (Fixed8p24)Math.Tanh((double)this);

        /// <summary>
        /// Gets a random <see cref="Fixed8p24"/> from 0 (inclusive) to 1 (exclusive).
        /// </summary>
        public static Fixed8p24 Random(Generator g)
        {
            return new Fixed8p24(g.Int32(16777216));
        }
    }

    /// <summary>
    /// Signed 32-bit number with 20 fractional bits and 12 integer bits.
    /// Represents values from -2048 to 2047.99999904632568359375 in increments of 0.00000095367431640625.
    /// </summary>
    public partial struct Fixed12p20 : IEquatable<Fixed12p20>, IComparable<Fixed12p20>
    {
        /// <summary>
        /// The constant value 0.
        /// </summary>
        public static readonly Fixed12p20 Zero = new Fixed12p20(0);

        /// <summary>
        /// The constant value 1.
        /// </summary>
        public static readonly Fixed12p20 One = new Fixed12p20(1048576);

        /// <summary>
        /// The constant value -2048.
        /// </summary>
        public static readonly Fixed12p20 MinValue = new Fixed12p20(int.MinValue);

        /// <summary>
        /// The constant value 2047.99999904632568359375.
        /// </summary>
        public static readonly Fixed12p20 MaxValue = new Fixed12p20(int.MaxValue);

        /// <summary>
        /// The constant value 0.00000095367431640625.
        /// </summary>
        public static readonly Fixed12p20 ε = new Fixed12p20(1);

        /// <summary>PI</summary>
        public static readonly Fixed12p20 π          = (Fixed12p20)3.1415926535897932384626433833;

        /// <summary>Base of natural logarithm.</summary>
        public static readonly Fixed12p20 e          = (Fixed12p20)2.7182818284590452353602874714;

        /// <summary>Golden ratio.</summary>
        public static readonly Fixed12p20 φ          = (Fixed12p20)1.6180339887498948482045868344;

        /// <summary>Euler–Mascheroni constant.</summary>
        public static readonly Fixed12p20 γ          = (Fixed12p20)0.5772156649015328606065120901;

        /// <summary>Square root of 2π.</summary>
        public static readonly Fixed12p20 Sqrt2π     = (Fixed12p20)2.5066282746310005024157652848;

        /// <summary>Square root of 5.</summary>
        public static readonly Fixed12p20 Sqrt5      = (Fixed12p20)2.2360679774997896964091736687;

        /// <summary>Square root of π.</summary>
        public static readonly Fixed12p20 Sqrtπ      = (Fixed12p20)1.7724538509055160272981674833;

        /// <summary>Square root of 3.</summary>
        public static readonly Fixed12p20 Sqrt3      = (Fixed12p20)1.7320508075688772935274463415;

        /// <summary>Square root of 2.</summary>
        public static readonly Fixed12p20 Sqrt2      = (Fixed12p20)1.4142135623730950488016887242;

        /// <summary>Square root of π/2.</summary>
        public static readonly Fixed12p20 SqrtHalfπ  = (Fixed12p20)1.2533141373155002512078826424;

        /// <summary>Base-2 logarithm of 10.</summary>
        public static readonly Fixed12p20 Lg10       = (Fixed12p20)3.3219280948873623478703194295;
   
        /// <summary>Natural logarithm of 10.</summary>
        public static readonly Fixed12p20 Ln10       = (Fixed12p20)2.3025850929940456840179914547;

        /// <summary>Base-2 logarithm of e.</summary>
        public static readonly Fixed12p20 LgE        = (Fixed12p20)1.4426950408889634073599246810;
   
        /// <summary>Natural logarithm of 2.</summary>
        public static readonly Fixed12p20 Ln2        = (Fixed12p20)0.6931471805599453094172321215;

        /// <summary>Base-10 logarithm of e.</summary>
        public static readonly Fixed12p20 LogE       = (Fixed12p20)0.4342944819032518276511289189;

        /// <summary>Base-10 logarithm of 2.</summary>
        public static readonly Fixed12p20 Log2       = (Fixed12p20)0.3010299956639811952137388947;

        internal readonly int value;

        private Fixed12p20(int value)
        {
            this.value = value;
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed12p20"/>.
        /// </summary>
        public static Fixed12p20 Parse(string s)
        {
            return new Fixed12p20((int)(double.Parse(s) * 1048576d + .5d));
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed12p20"/>.
        /// </summary>
        public static Fixed12p20 Parse(string s, IFormatProvider provider)
        {
            return new Fixed12p20((int)(double.Parse(s, provider) * 1048576d + .5d));
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed12p20"/>.
        /// </summary>
        public static Fixed12p20 Parse(string s, NumberStyles style)
        {
            return new Fixed12p20((int)(double.Parse(s, style) * 1048576d + .5d));
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed12p20"/>.
        /// </summary>
        public static Fixed12p20 Parse(string s, NumberStyles style, IFormatProvider provider)
        {
            return new Fixed12p20((int)(double.Parse(s, style, provider) * 1048576d + .5d));
        }

        /// <summary>
        /// Tries to parse a string representation of a <see cref="Fixed12p20"/>.
        /// </summary>
        public static bool TryParse(string s, out Fixed12p20 result)
        {
            double d;
            
            if (!double.TryParse(s, out d))
            {
                result = Zero;
                return false;
            }

            result = new Fixed12p20((int)(d * 1048576d + .5d));
            return true;
        }

        /// <summary>
        /// Tries to parse a string representation of a <see cref="Fixed12p20"/>.
        /// </summary>
        public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out Fixed12p20 result)
        {
            double d;
            
            if (!double.TryParse(s, style, provider, out d))
            {
                result = Zero;
                return false;
            }

            result = new Fixed12p20((int)(d * 1048576d + .5d));
            return true;
        }

        /// <summary>
        /// Implementation of <see cref="object.ToString"/>.
        /// </summary>
        public override string ToString()
        {
            return (value * 0.00000095367431640625d).ToString();
        }

        /// <summary>
        /// Gets a string representation of this <see cref="Fixed12p20"/>.
        /// </summary>
        public string ToString(string format)
        {
            return (value * 0.00000095367431640625d).ToString(format);
        }

        /// <summary>
        /// Gets a string representation of this <see cref="Fixed12p20"/>.
        /// </summary>
        public string ToString(IFormatProvider provider)
        {
            return (value * 0.00000095367431640625d).ToString(provider);
        }

        /// <summary>
        /// Gets a string representation of this <see cref="Fixed12p20"/>.
        /// </summary>
        public string ToString(string format, IFormatProvider provider)
        {
            return (value * 0.00000095367431640625d).ToString(format, provider);
        }

        /// <summary>
        /// Explicitly converts a <see cref="Decimal"/> to a Fixed12p20.
        /// </summary>
        public static explicit operator Fixed12p20(decimal value)
        {
            if (value < -2048m || value > 2047.99999904632568359375m) throw new ArgumentOutOfRangeException();
            return new Fixed12p20((int)(value * 1048576m + .5m));
        }

        /// <summary>
        /// Implicitly converts a Fixed12p20 to a <see cref="Decimal"/>.
        /// </summary>
        public static implicit operator decimal(Fixed12p20 value)
        {
            return value.value * 0.00000095367431640625m;
        }

        /// <summary>
        /// Explicitly converts a <see cref="Double"/> to a Fixed12p20.
        /// </summary>
        public static explicit operator Fixed12p20(double value)
        {
            if (value < -2048d || value > 2047.99999904632568359375d) throw new ArgumentOutOfRangeException();
            return new Fixed12p20((int)(value * 1048576d + .5d));
        }

        /// <summary>
        /// Implicitly converts a Fixed12p20 to a <see cref="Double"/>.
        /// </summary>
        public static implicit operator double(Fixed12p20 value)
        {
            return value.value * 0.00000095367431640625d;
        }

        /// <summary>
        /// Explicitly converts a Fixed12p20 to a <see cref="Single"/>.
        /// </summary>
        public static explicit operator float(Fixed12p20 value)
        {
            return value.value * 0.00000095367431640625f;
        }

        /// <summary>
        /// Implicitly converts a <see cref="Int64"/> to a Fixed12p20.
        /// </summary>
        public static implicit operator Fixed12p20(long value)
        {
            return new Fixed12p20((int)(value << 20));
        }

        /// <summary>
        /// Explicitly converts a Fixed12p20 to a <see cref="System.Int64"/>.
        /// </summary>
        public static explicit operator long(Fixed12p20 value)
        {
            return (long)(value.value >> 20);
        }

        /// <summary>
        /// Explicitly converts a Fixed12p20 to a <see cref="System.UInt64"/>.
        /// </summary>
        public static explicit operator ulong(Fixed12p20 value)
        {
            return (ulong)(value.value >> 20);
        }

        /// <summary>
        /// Explicitly converts a Fixed12p20 to a <see cref="System.Int32"/>.
        /// </summary>
        public static explicit operator int(Fixed12p20 value)
        {
            return (int)(value.value >> 20);
        }

        /// <summary>
        /// Explicitly converts a Fixed12p20 to a <see cref="System.UInt32"/>.
        /// </summary>
        public static explicit operator uint(Fixed12p20 value)
        {
            return (uint)(value.value >> 20);
        }

        /// <summary>
        /// Explicitly converts a Fixed12p20 to a <see cref="System.Int16"/>.
        /// </summary>
        public static explicit operator short(Fixed12p20 value)
        {
            return (short)(value.value >> 20);
        }

        /// <summary>
        /// Explicitly converts a Fixed12p20 to a <see cref="System.UInt16"/>.
        /// </summary>
        public static explicit operator ushort(Fixed12p20 value)
        {
            return (ushort)(value.value >> 20);
        }

        /// <summary>
        /// Explicitly converts a Fixed12p20 to a <see cref="System.SByte"/>.
        /// </summary>
        public static explicit operator sbyte(Fixed12p20 value)
        {
            return (sbyte)(value.value >> 20);
        }

        /// <summary>
        /// Explicitly converts a Fixed12p20 to a <see cref="System.Byte"/>.
        /// </summary>
        public static explicit operator byte(Fixed12p20 value)
        {
            return (byte)(value.value >> 20);
        }

        /// <summary>
        /// Implementation of <see cref="object.Equals(object)"/>.
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is Fixed12p20 && Equals((Fixed12p20)obj);
        }

        /// <summary>
        /// Implementation of <see cref="IEquatable{Fixed12p20}"/>.
        /// </summary>
        public bool Equals(Fixed12p20 other)
        {
            return value == other.value;
        }

        /// <summary>
        /// Equality operator.
        /// </summary>
        public static bool operator ==(Fixed12p20 a, Fixed12p20 b)
        {
            return a.value == b.value;
        }

        /// <summary>
        /// Inequality operator.
        /// </summary>
        public static bool operator !=(Fixed12p20 a, Fixed12p20 b)
        {
            return a.value != b.value;
        }

        /// <summary>
        /// Implementation of <see cref="object.GetHashCode"/>.
        /// </summary>
        public override int GetHashCode()
        {
            return value ^ 1136180085;
        }

        /// <summary>
        /// Implementation of <see cref="IComparable{Fixed12p20}"/>.
        /// </summary>
        public int CompareTo(Fixed12p20 other)
        {
            return value.CompareTo(other.value);
        }

        /// <summary>
        /// Right-shift operator.
        /// </summary>
        public static Fixed12p20 operator >>(Fixed12p20 value, int shift)
        {
            return new Fixed12p20((int)(value.value >> shift));
        }

        /// <summary>
        /// Left-shift operator.
        /// </summary>
        public static Fixed12p20 operator <<(Fixed12p20 value, int shift)
        {
            return new Fixed12p20((int)(value.value << shift));
        }

        /// <summary>
        /// Gets the underlying bits that represent this <see cref="Fixed12p20"/>.
        /// </summary>
        public static int ToInt32Bits(Fixed12p20 value)
        {
            return value.value;
        }

        /// <summary>
        /// Creates a <see cref="Fixed12p20"/> from the underlying bit representation.
        /// </summary>
        public static Fixed12p20 FromInt32Bits(int value)
        {
            return new Fixed12p20(value);
        }

        /// <summary>
        /// Unary plus operator.
        /// </summary>
        public static Fixed12p20 operator +(Fixed12p20 value)
        {
            return value;
        }

        /// <summary>
        /// Unary minus operator.
        /// </summary>
        public static Fixed12p20 operator -(Fixed12p20 value)
        {
            return new Fixed12p20((int)(-value.value));
        }

        /// <summary>
        /// Addition operator.
        /// </summary>
        public static Fixed12p20 operator +(Fixed12p20 a, Fixed12p20 b)
        {
            return new Fixed12p20((int)(a.value + b.value));
        }

        /// <summary>
        /// Subtraction operator.
        /// </summary>
        public static Fixed12p20 operator -(Fixed12p20 a, Fixed12p20 b)
        {
            return new Fixed12p20((int)(a.value - b.value));
        }

        /// <summary>
        /// Multiplication operator.
        /// </summary>
        public static Fixed12p20 operator *(Fixed12p20 a, Fixed12p20 b)
        {
            return new Fixed12p20((int)(((long)a.value * (long)b.value + ((long)1 << 19)) >> 20));
        }

        /// <summary>
        /// Division operator.
        /// </summary>
        public static Fixed12p20 operator /(Fixed12p20 a, Fixed12p20 b)
        {
            return new Fixed12p20((int)((((long)a.value << 32) / b.value) >> 12));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed4p28"/> to a <see cref="Fixed12p20"/>.
        /// </summary>
        public static explicit operator Fixed12p20(Fixed4p28 other)
        {
            return new Fixed12p20((int)(other.value >> 8));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed8p24"/> to a <see cref="Fixed12p20"/>.
        /// </summary>
        public static explicit operator Fixed12p20(Fixed8p24 other)
        {
            return new Fixed12p20((int)(other.value >> 4));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed16p16"/> to a <see cref="Fixed12p20"/>.
        /// </summary>
        public static explicit operator Fixed12p20(Fixed16p16 other)
        {
            if (other.value < -134217728 || other.value > 134217727) throw new ArgumentOutOfRangeException();
            return new Fixed12p20((int)(other.value << 4));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed20p12"/> to a <see cref="Fixed12p20"/>.
        /// </summary>
        public static explicit operator Fixed12p20(Fixed20p12 other)
        {
            if (other.value < -8388608 || other.value > 8388607) throw new ArgumentOutOfRangeException();
            return new Fixed12p20((int)(other.value << 8));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed24p8"/> to a <see cref="Fixed12p20"/>.
        /// </summary>
        public static explicit operator Fixed12p20(Fixed24p8 other)
        {
            if (other.value < -524288 || other.value > 524287) throw new ArgumentOutOfRangeException();
            return new Fixed12p20((int)(other.value << 12));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed28p4"/> to a <see cref="Fixed12p20"/>.
        /// </summary>
        public static explicit operator Fixed12p20(Fixed28p4 other)
        {
            if (other.value < -32768 || other.value > 32767) throw new ArgumentOutOfRangeException();
            return new Fixed12p20((int)(other.value << 16));
        }

        /// <summary>
        /// Gets the absolute value of a <see cref="Fixed12p20"/>.
        /// </summary>
        public static Fixed12p20 Abs(Fixed12p20 value)
        {
            return new Fixed12p20(Math.Abs(value.value));
        }

        /// <summary>
        /// Gets the absolute value of this <see cref="Fixed12p20"/>.
        /// </summary>
        public Fixed12p20 Abs()
        {
            return new Fixed12p20(Math.Abs(value));
        }

        /// <summary>
        /// Gets the greatest integer <see cref="Fixed12p20"/> that is not greater than the specified value.
        /// </summary>
        public static Fixed12p20 Floor(Fixed12p20 value)
        {
            return new Fixed12p20((int)(value.value & 0xFFF00000));
        }

        /// <summary>
        /// Gets the greatest integer <see cref="Fixed12p20"/> that is not greater than this value.
        /// </summary>
        public Fixed12p20 Floor()
        {
            return new Fixed12p20((int)(value & 0xFFF00000));
        }

        /// <summary>
        /// Gets the least integer <see cref="Fixed12p20"/> that is not less than the specified value.
        /// </summary>
        public static Fixed12p20 Ceiling(Fixed12p20 value)
        {
            return new Fixed12p20((int)((value.value + 0xFFFFF) & 0xFFF00000));
        }

        /// <summary>
        /// Gets the least integer <see cref="Fixed12p20"/> that is not less than this value.
        /// </summary>
        public Fixed12p20 Ceiling()
        {
            return new Fixed12p20((int)((value + 0xFFFFF) & 0xFFF00000));
        }

        /// <summary>
        /// Gets the nearest integer <see cref="Fixed12p20"/> to the specified value.
        /// </summary>
        public static Fixed12p20 Round(Fixed12p20 value)
        {
            return new Fixed12p20((int)((value.value + 0x80000) & 0xFFF00000));
        }

        /// <summary>
        /// Gets the nearest integer <see cref="Fixed12p20"/> to this value.
        /// </summary>
        public Fixed12p20 Round()
        {
            return new Fixed12p20((int)((value + 0x80000) & 0xFFF00000));
        }

        /// <summary>
        /// Gets the fractional portion of a <see cref="Fixed12p20"/>.
        /// </summary>
        public static Fixed12p20 Frac(Fixed12p20 value)
        {
            return new Fixed12p20((int)(Math.Abs(value.value) & 0xFFFFF));
        }

        /// <summary>
        /// Gets the fractional portion of this <see cref="Fixed12p20"/>.
        /// </summary>
        public Fixed12p20 Frac()
        {
            return new Fixed12p20((int)(Math.Abs(value) & 0xFFFFF));
        }

        /// <summary>
        /// Rounds a <see cref="Fixed12p20"/> toward zero.
        /// </summary>
        public static Fixed12p20 Truncate(Fixed12p20 value)
        {
            return value.value >= 0 ? Floor(value) : Ceiling(value);
        }

        /// <summary>
        /// Rounds this <see cref="Fixed12p20"/> toward zero.
        /// </summary>
        public Fixed12p20 Truncate()
        {
            return value >= 0 ? Floor() : Ceiling();
        }

        /// <summary>
        /// Gets the sign of a <see cref="Fixed12p20"/>.
        /// </summary>
        public static int Sign(Fixed12p20 value)
        {
            return Math.Sign(value.value);
        }

        /// <summary>
        /// Gets the sign of this <see cref="Fixed12p20"/>.
        /// </summary>
        public int Sign()
        {
            return Math.Sign(value);
        }

        /// <summary>
        /// Gets the lesser of two <see cref="Fixed12p20"/> values.
        /// </summary>
        public static Fixed12p20 Min(Fixed12p20 a, Fixed12p20 b)
        {
            return a.value < b.value ? a : b;
        }

        /// <summary>
        /// Gets the greater of two <see cref="Fixed12p20"/> values.
        /// </summary>
        public static Fixed12p20 Max(Fixed12p20 a, Fixed12p20 b)
        {
            return a.value > b.value ? a : b;
        }

        /// <summary>
        /// Acos function.
        /// </summary>
        public static Fixed12p20 Acos(Fixed12p20 x) => (Fixed12p20)Math.Acos((double)x);

        /// <summary>
        /// Acos function.
        /// </summary>
        public Fixed12p20 Acos() => (Fixed12p20)Math.Acos((double)this);

        /// <summary>
        /// Asin function.
        /// </summary>
        public static Fixed12p20 Asin(Fixed12p20 x) => (Fixed12p20)Math.Asin((double)x);

        /// <summary>
        /// Asin function.
        /// </summary>
        public Fixed12p20 Asin() => (Fixed12p20)Math.Asin((double)this);

        /// <summary>
        /// Atan function.
        /// </summary>
        public static Fixed12p20 Atan(Fixed12p20 x) => (Fixed12p20)Math.Atan((double)x);

        /// <summary>
        /// Atan function.
        /// </summary>
        public Fixed12p20 Atan() => (Fixed12p20)Math.Atan((double)this);

        /// <summary>
        /// Cos function.
        /// </summary>
        public static Fixed12p20 Cos(Fixed12p20 x) => (Fixed12p20)Math.Cos((double)x);

        /// <summary>
        /// Cos function.
        /// </summary>
        public Fixed12p20 Cos() => (Fixed12p20)Math.Cos((double)this);

        /// <summary>
        /// Cosh function.
        /// </summary>
        public static Fixed12p20 Cosh(Fixed12p20 x) => (Fixed12p20)Math.Cosh((double)x);

        /// <summary>
        /// Cosh function.
        /// </summary>
        public Fixed12p20 Cosh() => (Fixed12p20)Math.Cosh((double)this);

        /// <summary>
        /// Exp function.
        /// </summary>
        public static Fixed12p20 Exp(Fixed12p20 x) => (Fixed12p20)Math.Exp((double)x);

        /// <summary>
        /// Exp function.
        /// </summary>
        public Fixed12p20 Exp() => (Fixed12p20)Math.Exp((double)this);

        /// <summary>
        /// Log10 function.
        /// </summary>
        public static Fixed12p20 Log10(Fixed12p20 x) => (Fixed12p20)Math.Log10((double)x);

        /// <summary>
        /// Log10 function.
        /// </summary>
        public Fixed12p20 Log10() => (Fixed12p20)Math.Log10((double)this);

        /// <summary>
        /// Sin function.
        /// </summary>
        public static Fixed12p20 Sin(Fixed12p20 x) => (Fixed12p20)Math.Sin((double)x);

        /// <summary>
        /// Sin function.
        /// </summary>
        public Fixed12p20 Sin() => (Fixed12p20)Math.Sin((double)this);

        /// <summary>
        /// Sinh function.
        /// </summary>
        public static Fixed12p20 Sinh(Fixed12p20 x) => (Fixed12p20)Math.Sinh((double)x);

        /// <summary>
        /// Sinh function.
        /// </summary>
        public Fixed12p20 Sinh() => (Fixed12p20)Math.Sinh((double)this);

        /// <summary>
        /// Sqrt function.
        /// </summary>
        public static Fixed12p20 Sqrt(Fixed12p20 x) => (Fixed12p20)Math.Sqrt((double)x);

        /// <summary>
        /// Sqrt function.
        /// </summary>
        public Fixed12p20 Sqrt() => (Fixed12p20)Math.Sqrt((double)this);

        /// <summary>
        /// Tan function.
        /// </summary>
        public static Fixed12p20 Tan(Fixed12p20 x) => (Fixed12p20)Math.Tan((double)x);

        /// <summary>
        /// Tan function.
        /// </summary>
        public Fixed12p20 Tan() => (Fixed12p20)Math.Tan((double)this);

        /// <summary>
        /// Tanh function.
        /// </summary>
        public static Fixed12p20 Tanh(Fixed12p20 x) => (Fixed12p20)Math.Tanh((double)x);

        /// <summary>
        /// Tanh function.
        /// </summary>
        public Fixed12p20 Tanh() => (Fixed12p20)Math.Tanh((double)this);

        /// <summary>
        /// Gets a random <see cref="Fixed12p20"/> from 0 (inclusive) to 1 (exclusive).
        /// </summary>
        public static Fixed12p20 Random(Generator g)
        {
            return new Fixed12p20(g.Int32(1048576));
        }
    }

    /// <summary>
    /// Signed 32-bit number with 16 fractional bits and 16 integer bits.
    /// Represents values from -32768 to 32767.9999847412109375 in increments of 0.0000152587890625.
    /// </summary>
    public partial struct Fixed16p16 : IEquatable<Fixed16p16>, IComparable<Fixed16p16>
    {
        /// <summary>
        /// The constant value 0.
        /// </summary>
        public static readonly Fixed16p16 Zero = new Fixed16p16(0);

        /// <summary>
        /// The constant value 1.
        /// </summary>
        public static readonly Fixed16p16 One = new Fixed16p16(65536);

        /// <summary>
        /// The constant value -32768.
        /// </summary>
        public static readonly Fixed16p16 MinValue = new Fixed16p16(int.MinValue);

        /// <summary>
        /// The constant value 32767.9999847412109375.
        /// </summary>
        public static readonly Fixed16p16 MaxValue = new Fixed16p16(int.MaxValue);

        /// <summary>
        /// The constant value 0.0000152587890625.
        /// </summary>
        public static readonly Fixed16p16 ε = new Fixed16p16(1);

        /// <summary>PI</summary>
        public static readonly Fixed16p16 π          = (Fixed16p16)3.1415926535897932384626433833;

        /// <summary>Base of natural logarithm.</summary>
        public static readonly Fixed16p16 e          = (Fixed16p16)2.7182818284590452353602874714;

        /// <summary>Golden ratio.</summary>
        public static readonly Fixed16p16 φ          = (Fixed16p16)1.6180339887498948482045868344;

        /// <summary>Euler–Mascheroni constant.</summary>
        public static readonly Fixed16p16 γ          = (Fixed16p16)0.5772156649015328606065120901;

        /// <summary>Square root of 2π.</summary>
        public static readonly Fixed16p16 Sqrt2π     = (Fixed16p16)2.5066282746310005024157652848;

        /// <summary>Square root of 5.</summary>
        public static readonly Fixed16p16 Sqrt5      = (Fixed16p16)2.2360679774997896964091736687;

        /// <summary>Square root of π.</summary>
        public static readonly Fixed16p16 Sqrtπ      = (Fixed16p16)1.7724538509055160272981674833;

        /// <summary>Square root of 3.</summary>
        public static readonly Fixed16p16 Sqrt3      = (Fixed16p16)1.7320508075688772935274463415;

        /// <summary>Square root of 2.</summary>
        public static readonly Fixed16p16 Sqrt2      = (Fixed16p16)1.4142135623730950488016887242;

        /// <summary>Square root of π/2.</summary>
        public static readonly Fixed16p16 SqrtHalfπ  = (Fixed16p16)1.2533141373155002512078826424;

        /// <summary>Base-2 logarithm of 10.</summary>
        public static readonly Fixed16p16 Lg10       = (Fixed16p16)3.3219280948873623478703194295;
   
        /// <summary>Natural logarithm of 10.</summary>
        public static readonly Fixed16p16 Ln10       = (Fixed16p16)2.3025850929940456840179914547;

        /// <summary>Base-2 logarithm of e.</summary>
        public static readonly Fixed16p16 LgE        = (Fixed16p16)1.4426950408889634073599246810;
   
        /// <summary>Natural logarithm of 2.</summary>
        public static readonly Fixed16p16 Ln2        = (Fixed16p16)0.6931471805599453094172321215;

        /// <summary>Base-10 logarithm of e.</summary>
        public static readonly Fixed16p16 LogE       = (Fixed16p16)0.4342944819032518276511289189;

        /// <summary>Base-10 logarithm of 2.</summary>
        public static readonly Fixed16p16 Log2       = (Fixed16p16)0.3010299956639811952137388947;

        internal readonly int value;

        private Fixed16p16(int value)
        {
            this.value = value;
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed16p16"/>.
        /// </summary>
        public static Fixed16p16 Parse(string s)
        {
            return new Fixed16p16((int)(double.Parse(s) * 65536d + .5d));
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed16p16"/>.
        /// </summary>
        public static Fixed16p16 Parse(string s, IFormatProvider provider)
        {
            return new Fixed16p16((int)(double.Parse(s, provider) * 65536d + .5d));
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed16p16"/>.
        /// </summary>
        public static Fixed16p16 Parse(string s, NumberStyles style)
        {
            return new Fixed16p16((int)(double.Parse(s, style) * 65536d + .5d));
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed16p16"/>.
        /// </summary>
        public static Fixed16p16 Parse(string s, NumberStyles style, IFormatProvider provider)
        {
            return new Fixed16p16((int)(double.Parse(s, style, provider) * 65536d + .5d));
        }

        /// <summary>
        /// Tries to parse a string representation of a <see cref="Fixed16p16"/>.
        /// </summary>
        public static bool TryParse(string s, out Fixed16p16 result)
        {
            double d;
            
            if (!double.TryParse(s, out d))
            {
                result = Zero;
                return false;
            }

            result = new Fixed16p16((int)(d * 65536d + .5d));
            return true;
        }

        /// <summary>
        /// Tries to parse a string representation of a <see cref="Fixed16p16"/>.
        /// </summary>
        public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out Fixed16p16 result)
        {
            double d;
            
            if (!double.TryParse(s, style, provider, out d))
            {
                result = Zero;
                return false;
            }

            result = new Fixed16p16((int)(d * 65536d + .5d));
            return true;
        }

        /// <summary>
        /// Implementation of <see cref="object.ToString"/>.
        /// </summary>
        public override string ToString()
        {
            return (value * 0.0000152587890625d).ToString();
        }

        /// <summary>
        /// Gets a string representation of this <see cref="Fixed16p16"/>.
        /// </summary>
        public string ToString(string format)
        {
            return (value * 0.0000152587890625d).ToString(format);
        }

        /// <summary>
        /// Gets a string representation of this <see cref="Fixed16p16"/>.
        /// </summary>
        public string ToString(IFormatProvider provider)
        {
            return (value * 0.0000152587890625d).ToString(provider);
        }

        /// <summary>
        /// Gets a string representation of this <see cref="Fixed16p16"/>.
        /// </summary>
        public string ToString(string format, IFormatProvider provider)
        {
            return (value * 0.0000152587890625d).ToString(format, provider);
        }

        /// <summary>
        /// Explicitly converts a <see cref="Decimal"/> to a Fixed16p16.
        /// </summary>
        public static explicit operator Fixed16p16(decimal value)
        {
            if (value < -32768m || value > 32767.9999847412109375m) throw new ArgumentOutOfRangeException();
            return new Fixed16p16((int)(value * 65536m + .5m));
        }

        /// <summary>
        /// Implicitly converts a Fixed16p16 to a <see cref="Decimal"/>.
        /// </summary>
        public static implicit operator decimal(Fixed16p16 value)
        {
            return value.value * 0.0000152587890625m;
        }

        /// <summary>
        /// Explicitly converts a <see cref="Double"/> to a Fixed16p16.
        /// </summary>
        public static explicit operator Fixed16p16(double value)
        {
            if (value < -32768d || value > 32767.9999847412109375d) throw new ArgumentOutOfRangeException();
            return new Fixed16p16((int)(value * 65536d + .5d));
        }

        /// <summary>
        /// Implicitly converts a Fixed16p16 to a <see cref="Double"/>.
        /// </summary>
        public static implicit operator double(Fixed16p16 value)
        {
            return value.value * 0.0000152587890625d;
        }

        /// <summary>
        /// Explicitly converts a Fixed16p16 to a <see cref="Single"/>.
        /// </summary>
        public static explicit operator float(Fixed16p16 value)
        {
            return value.value * 0.0000152587890625f;
        }

        /// <summary>
        /// Implicitly converts a <see cref="Int64"/> to a Fixed16p16.
        /// </summary>
        public static implicit operator Fixed16p16(long value)
        {
            return new Fixed16p16((int)(value << 16));
        }

        /// <summary>
        /// Explicitly converts a Fixed16p16 to a <see cref="System.Int64"/>.
        /// </summary>
        public static explicit operator long(Fixed16p16 value)
        {
            return (long)(value.value >> 16);
        }

        /// <summary>
        /// Explicitly converts a Fixed16p16 to a <see cref="System.UInt64"/>.
        /// </summary>
        public static explicit operator ulong(Fixed16p16 value)
        {
            return (ulong)(value.value >> 16);
        }

        /// <summary>
        /// Explicitly converts a Fixed16p16 to a <see cref="System.Int32"/>.
        /// </summary>
        public static explicit operator int(Fixed16p16 value)
        {
            return (int)(value.value >> 16);
        }

        /// <summary>
        /// Explicitly converts a Fixed16p16 to a <see cref="System.UInt32"/>.
        /// </summary>
        public static explicit operator uint(Fixed16p16 value)
        {
            return (uint)(value.value >> 16);
        }

        /// <summary>
        /// Explicitly converts a Fixed16p16 to a <see cref="System.Int16"/>.
        /// </summary>
        public static explicit operator short(Fixed16p16 value)
        {
            return (short)(value.value >> 16);
        }

        /// <summary>
        /// Explicitly converts a Fixed16p16 to a <see cref="System.UInt16"/>.
        /// </summary>
        public static explicit operator ushort(Fixed16p16 value)
        {
            return (ushort)(value.value >> 16);
        }

        /// <summary>
        /// Explicitly converts a Fixed16p16 to a <see cref="System.SByte"/>.
        /// </summary>
        public static explicit operator sbyte(Fixed16p16 value)
        {
            return (sbyte)(value.value >> 16);
        }

        /// <summary>
        /// Explicitly converts a Fixed16p16 to a <see cref="System.Byte"/>.
        /// </summary>
        public static explicit operator byte(Fixed16p16 value)
        {
            return (byte)(value.value >> 16);
        }

        /// <summary>
        /// Implementation of <see cref="object.Equals(object)"/>.
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is Fixed16p16 && Equals((Fixed16p16)obj);
        }

        /// <summary>
        /// Implementation of <see cref="IEquatable{Fixed16p16}"/>.
        /// </summary>
        public bool Equals(Fixed16p16 other)
        {
            return value == other.value;
        }

        /// <summary>
        /// Equality operator.
        /// </summary>
        public static bool operator ==(Fixed16p16 a, Fixed16p16 b)
        {
            return a.value == b.value;
        }

        /// <summary>
        /// Inequality operator.
        /// </summary>
        public static bool operator !=(Fixed16p16 a, Fixed16p16 b)
        {
            return a.value != b.value;
        }

        /// <summary>
        /// Implementation of <see cref="object.GetHashCode"/>.
        /// </summary>
        public override int GetHashCode()
        {
            return value ^ -833057312;
        }

        /// <summary>
        /// Implementation of <see cref="IComparable{Fixed16p16}"/>.
        /// </summary>
        public int CompareTo(Fixed16p16 other)
        {
            return value.CompareTo(other.value);
        }

        /// <summary>
        /// Right-shift operator.
        /// </summary>
        public static Fixed16p16 operator >>(Fixed16p16 value, int shift)
        {
            return new Fixed16p16((int)(value.value >> shift));
        }

        /// <summary>
        /// Left-shift operator.
        /// </summary>
        public static Fixed16p16 operator <<(Fixed16p16 value, int shift)
        {
            return new Fixed16p16((int)(value.value << shift));
        }

        /// <summary>
        /// Gets the underlying bits that represent this <see cref="Fixed16p16"/>.
        /// </summary>
        public static int ToInt32Bits(Fixed16p16 value)
        {
            return value.value;
        }

        /// <summary>
        /// Creates a <see cref="Fixed16p16"/> from the underlying bit representation.
        /// </summary>
        public static Fixed16p16 FromInt32Bits(int value)
        {
            return new Fixed16p16(value);
        }

        /// <summary>
        /// Unary plus operator.
        /// </summary>
        public static Fixed16p16 operator +(Fixed16p16 value)
        {
            return value;
        }

        /// <summary>
        /// Unary minus operator.
        /// </summary>
        public static Fixed16p16 operator -(Fixed16p16 value)
        {
            return new Fixed16p16((int)(-value.value));
        }

        /// <summary>
        /// Addition operator.
        /// </summary>
        public static Fixed16p16 operator +(Fixed16p16 a, Fixed16p16 b)
        {
            return new Fixed16p16((int)(a.value + b.value));
        }

        /// <summary>
        /// Subtraction operator.
        /// </summary>
        public static Fixed16p16 operator -(Fixed16p16 a, Fixed16p16 b)
        {
            return new Fixed16p16((int)(a.value - b.value));
        }

        /// <summary>
        /// Multiplication operator.
        /// </summary>
        public static Fixed16p16 operator *(Fixed16p16 a, Fixed16p16 b)
        {
            return new Fixed16p16((int)(((long)a.value * (long)b.value + ((long)1 << 15)) >> 16));
        }

        /// <summary>
        /// Division operator.
        /// </summary>
        public static Fixed16p16 operator /(Fixed16p16 a, Fixed16p16 b)
        {
            return new Fixed16p16((int)((((long)a.value << 32) / b.value) >> 16));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed4p28"/> to a <see cref="Fixed16p16"/>.
        /// </summary>
        public static explicit operator Fixed16p16(Fixed4p28 other)
        {
            return new Fixed16p16((int)(other.value >> 12));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed8p24"/> to a <see cref="Fixed16p16"/>.
        /// </summary>
        public static explicit operator Fixed16p16(Fixed8p24 other)
        {
            return new Fixed16p16((int)(other.value >> 8));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed12p20"/> to a <see cref="Fixed16p16"/>.
        /// </summary>
        public static explicit operator Fixed16p16(Fixed12p20 other)
        {
            return new Fixed16p16((int)(other.value >> 4));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed20p12"/> to a <see cref="Fixed16p16"/>.
        /// </summary>
        public static explicit operator Fixed16p16(Fixed20p12 other)
        {
            if (other.value < -134217728 || other.value > 134217727) throw new ArgumentOutOfRangeException();
            return new Fixed16p16((int)(other.value << 4));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed24p8"/> to a <see cref="Fixed16p16"/>.
        /// </summary>
        public static explicit operator Fixed16p16(Fixed24p8 other)
        {
            if (other.value < -8388608 || other.value > 8388607) throw new ArgumentOutOfRangeException();
            return new Fixed16p16((int)(other.value << 8));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed28p4"/> to a <see cref="Fixed16p16"/>.
        /// </summary>
        public static explicit operator Fixed16p16(Fixed28p4 other)
        {
            if (other.value < -524288 || other.value > 524287) throw new ArgumentOutOfRangeException();
            return new Fixed16p16((int)(other.value << 12));
        }

        /// <summary>
        /// Gets the absolute value of a <see cref="Fixed16p16"/>.
        /// </summary>
        public static Fixed16p16 Abs(Fixed16p16 value)
        {
            return new Fixed16p16(Math.Abs(value.value));
        }

        /// <summary>
        /// Gets the absolute value of this <see cref="Fixed16p16"/>.
        /// </summary>
        public Fixed16p16 Abs()
        {
            return new Fixed16p16(Math.Abs(value));
        }

        /// <summary>
        /// Gets the greatest integer <see cref="Fixed16p16"/> that is not greater than the specified value.
        /// </summary>
        public static Fixed16p16 Floor(Fixed16p16 value)
        {
            return new Fixed16p16((int)(value.value & 0xFFFF0000));
        }

        /// <summary>
        /// Gets the greatest integer <see cref="Fixed16p16"/> that is not greater than this value.
        /// </summary>
        public Fixed16p16 Floor()
        {
            return new Fixed16p16((int)(value & 0xFFFF0000));
        }

        /// <summary>
        /// Gets the least integer <see cref="Fixed16p16"/> that is not less than the specified value.
        /// </summary>
        public static Fixed16p16 Ceiling(Fixed16p16 value)
        {
            return new Fixed16p16((int)((value.value + 0xFFFF) & 0xFFFF0000));
        }

        /// <summary>
        /// Gets the least integer <see cref="Fixed16p16"/> that is not less than this value.
        /// </summary>
        public Fixed16p16 Ceiling()
        {
            return new Fixed16p16((int)((value + 0xFFFF) & 0xFFFF0000));
        }

        /// <summary>
        /// Gets the nearest integer <see cref="Fixed16p16"/> to the specified value.
        /// </summary>
        public static Fixed16p16 Round(Fixed16p16 value)
        {
            return new Fixed16p16((int)((value.value + 0x8000) & 0xFFFF0000));
        }

        /// <summary>
        /// Gets the nearest integer <see cref="Fixed16p16"/> to this value.
        /// </summary>
        public Fixed16p16 Round()
        {
            return new Fixed16p16((int)((value + 0x8000) & 0xFFFF0000));
        }

        /// <summary>
        /// Gets the fractional portion of a <see cref="Fixed16p16"/>.
        /// </summary>
        public static Fixed16p16 Frac(Fixed16p16 value)
        {
            return new Fixed16p16((int)(Math.Abs(value.value) & 0xFFFF));
        }

        /// <summary>
        /// Gets the fractional portion of this <see cref="Fixed16p16"/>.
        /// </summary>
        public Fixed16p16 Frac()
        {
            return new Fixed16p16((int)(Math.Abs(value) & 0xFFFF));
        }

        /// <summary>
        /// Rounds a <see cref="Fixed16p16"/> toward zero.
        /// </summary>
        public static Fixed16p16 Truncate(Fixed16p16 value)
        {
            return value.value >= 0 ? Floor(value) : Ceiling(value);
        }

        /// <summary>
        /// Rounds this <see cref="Fixed16p16"/> toward zero.
        /// </summary>
        public Fixed16p16 Truncate()
        {
            return value >= 0 ? Floor() : Ceiling();
        }

        /// <summary>
        /// Gets the sign of a <see cref="Fixed16p16"/>.
        /// </summary>
        public static int Sign(Fixed16p16 value)
        {
            return Math.Sign(value.value);
        }

        /// <summary>
        /// Gets the sign of this <see cref="Fixed16p16"/>.
        /// </summary>
        public int Sign()
        {
            return Math.Sign(value);
        }

        /// <summary>
        /// Gets the lesser of two <see cref="Fixed16p16"/> values.
        /// </summary>
        public static Fixed16p16 Min(Fixed16p16 a, Fixed16p16 b)
        {
            return a.value < b.value ? a : b;
        }

        /// <summary>
        /// Gets the greater of two <see cref="Fixed16p16"/> values.
        /// </summary>
        public static Fixed16p16 Max(Fixed16p16 a, Fixed16p16 b)
        {
            return a.value > b.value ? a : b;
        }

        /// <summary>
        /// Acos function.
        /// </summary>
        public static Fixed16p16 Acos(Fixed16p16 x) => (Fixed16p16)Math.Acos((double)x);

        /// <summary>
        /// Acos function.
        /// </summary>
        public Fixed16p16 Acos() => (Fixed16p16)Math.Acos((double)this);

        /// <summary>
        /// Asin function.
        /// </summary>
        public static Fixed16p16 Asin(Fixed16p16 x) => (Fixed16p16)Math.Asin((double)x);

        /// <summary>
        /// Asin function.
        /// </summary>
        public Fixed16p16 Asin() => (Fixed16p16)Math.Asin((double)this);

        /// <summary>
        /// Atan function.
        /// </summary>
        public static Fixed16p16 Atan(Fixed16p16 x) => (Fixed16p16)Math.Atan((double)x);

        /// <summary>
        /// Atan function.
        /// </summary>
        public Fixed16p16 Atan() => (Fixed16p16)Math.Atan((double)this);

        /// <summary>
        /// Cos function.
        /// </summary>
        public static Fixed16p16 Cos(Fixed16p16 x) => (Fixed16p16)Math.Cos((double)x);

        /// <summary>
        /// Cos function.
        /// </summary>
        public Fixed16p16 Cos() => (Fixed16p16)Math.Cos((double)this);

        /// <summary>
        /// Cosh function.
        /// </summary>
        public static Fixed16p16 Cosh(Fixed16p16 x) => (Fixed16p16)Math.Cosh((double)x);

        /// <summary>
        /// Cosh function.
        /// </summary>
        public Fixed16p16 Cosh() => (Fixed16p16)Math.Cosh((double)this);

        /// <summary>
        /// Exp function.
        /// </summary>
        public static Fixed16p16 Exp(Fixed16p16 x) => (Fixed16p16)Math.Exp((double)x);

        /// <summary>
        /// Exp function.
        /// </summary>
        public Fixed16p16 Exp() => (Fixed16p16)Math.Exp((double)this);

        /// <summary>
        /// Log10 function.
        /// </summary>
        public static Fixed16p16 Log10(Fixed16p16 x) => (Fixed16p16)Math.Log10((double)x);

        /// <summary>
        /// Log10 function.
        /// </summary>
        public Fixed16p16 Log10() => (Fixed16p16)Math.Log10((double)this);

        /// <summary>
        /// Sin function.
        /// </summary>
        public static Fixed16p16 Sin(Fixed16p16 x) => (Fixed16p16)Math.Sin((double)x);

        /// <summary>
        /// Sin function.
        /// </summary>
        public Fixed16p16 Sin() => (Fixed16p16)Math.Sin((double)this);

        /// <summary>
        /// Sinh function.
        /// </summary>
        public static Fixed16p16 Sinh(Fixed16p16 x) => (Fixed16p16)Math.Sinh((double)x);

        /// <summary>
        /// Sinh function.
        /// </summary>
        public Fixed16p16 Sinh() => (Fixed16p16)Math.Sinh((double)this);

        /// <summary>
        /// Sqrt function.
        /// </summary>
        public static Fixed16p16 Sqrt(Fixed16p16 x) => (Fixed16p16)Math.Sqrt((double)x);

        /// <summary>
        /// Sqrt function.
        /// </summary>
        public Fixed16p16 Sqrt() => (Fixed16p16)Math.Sqrt((double)this);

        /// <summary>
        /// Tan function.
        /// </summary>
        public static Fixed16p16 Tan(Fixed16p16 x) => (Fixed16p16)Math.Tan((double)x);

        /// <summary>
        /// Tan function.
        /// </summary>
        public Fixed16p16 Tan() => (Fixed16p16)Math.Tan((double)this);

        /// <summary>
        /// Tanh function.
        /// </summary>
        public static Fixed16p16 Tanh(Fixed16p16 x) => (Fixed16p16)Math.Tanh((double)x);

        /// <summary>
        /// Tanh function.
        /// </summary>
        public Fixed16p16 Tanh() => (Fixed16p16)Math.Tanh((double)this);

        /// <summary>
        /// Gets a random <see cref="Fixed16p16"/> from 0 (inclusive) to 1 (exclusive).
        /// </summary>
        public static Fixed16p16 Random(Generator g)
        {
            return new Fixed16p16(g.Int32(65536));
        }
    }

    /// <summary>
    /// Signed 32-bit number with 12 fractional bits and 20 integer bits.
    /// Represents values from -524288 to 524287.999755859375 in increments of 0.000244140625.
    /// </summary>
    public partial struct Fixed20p12 : IEquatable<Fixed20p12>, IComparable<Fixed20p12>
    {
        /// <summary>
        /// The constant value 0.
        /// </summary>
        public static readonly Fixed20p12 Zero = new Fixed20p12(0);

        /// <summary>
        /// The constant value 1.
        /// </summary>
        public static readonly Fixed20p12 One = new Fixed20p12(4096);

        /// <summary>
        /// The constant value -524288.
        /// </summary>
        public static readonly Fixed20p12 MinValue = new Fixed20p12(int.MinValue);

        /// <summary>
        /// The constant value 524287.999755859375.
        /// </summary>
        public static readonly Fixed20p12 MaxValue = new Fixed20p12(int.MaxValue);

        /// <summary>
        /// The constant value 0.000244140625.
        /// </summary>
        public static readonly Fixed20p12 ε = new Fixed20p12(1);

        /// <summary>PI</summary>
        public static readonly Fixed20p12 π          = (Fixed20p12)3.1415926535897932384626433833;

        /// <summary>Base of natural logarithm.</summary>
        public static readonly Fixed20p12 e          = (Fixed20p12)2.7182818284590452353602874714;

        /// <summary>Golden ratio.</summary>
        public static readonly Fixed20p12 φ          = (Fixed20p12)1.6180339887498948482045868344;

        /// <summary>Euler–Mascheroni constant.</summary>
        public static readonly Fixed20p12 γ          = (Fixed20p12)0.5772156649015328606065120901;

        /// <summary>Square root of 2π.</summary>
        public static readonly Fixed20p12 Sqrt2π     = (Fixed20p12)2.5066282746310005024157652848;

        /// <summary>Square root of 5.</summary>
        public static readonly Fixed20p12 Sqrt5      = (Fixed20p12)2.2360679774997896964091736687;

        /// <summary>Square root of π.</summary>
        public static readonly Fixed20p12 Sqrtπ      = (Fixed20p12)1.7724538509055160272981674833;

        /// <summary>Square root of 3.</summary>
        public static readonly Fixed20p12 Sqrt3      = (Fixed20p12)1.7320508075688772935274463415;

        /// <summary>Square root of 2.</summary>
        public static readonly Fixed20p12 Sqrt2      = (Fixed20p12)1.4142135623730950488016887242;

        /// <summary>Square root of π/2.</summary>
        public static readonly Fixed20p12 SqrtHalfπ  = (Fixed20p12)1.2533141373155002512078826424;

        /// <summary>Base-2 logarithm of 10.</summary>
        public static readonly Fixed20p12 Lg10       = (Fixed20p12)3.3219280948873623478703194295;
   
        /// <summary>Natural logarithm of 10.</summary>
        public static readonly Fixed20p12 Ln10       = (Fixed20p12)2.3025850929940456840179914547;

        /// <summary>Base-2 logarithm of e.</summary>
        public static readonly Fixed20p12 LgE        = (Fixed20p12)1.4426950408889634073599246810;
   
        /// <summary>Natural logarithm of 2.</summary>
        public static readonly Fixed20p12 Ln2        = (Fixed20p12)0.6931471805599453094172321215;

        /// <summary>Base-10 logarithm of e.</summary>
        public static readonly Fixed20p12 LogE       = (Fixed20p12)0.4342944819032518276511289189;

        /// <summary>Base-10 logarithm of 2.</summary>
        public static readonly Fixed20p12 Log2       = (Fixed20p12)0.3010299956639811952137388947;

        internal readonly int value;

        private Fixed20p12(int value)
        {
            this.value = value;
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed20p12"/>.
        /// </summary>
        public static Fixed20p12 Parse(string s)
        {
            return new Fixed20p12((int)(double.Parse(s) * 4096d + .5d));
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed20p12"/>.
        /// </summary>
        public static Fixed20p12 Parse(string s, IFormatProvider provider)
        {
            return new Fixed20p12((int)(double.Parse(s, provider) * 4096d + .5d));
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed20p12"/>.
        /// </summary>
        public static Fixed20p12 Parse(string s, NumberStyles style)
        {
            return new Fixed20p12((int)(double.Parse(s, style) * 4096d + .5d));
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed20p12"/>.
        /// </summary>
        public static Fixed20p12 Parse(string s, NumberStyles style, IFormatProvider provider)
        {
            return new Fixed20p12((int)(double.Parse(s, style, provider) * 4096d + .5d));
        }

        /// <summary>
        /// Tries to parse a string representation of a <see cref="Fixed20p12"/>.
        /// </summary>
        public static bool TryParse(string s, out Fixed20p12 result)
        {
            double d;
            
            if (!double.TryParse(s, out d))
            {
                result = Zero;
                return false;
            }

            result = new Fixed20p12((int)(d * 4096d + .5d));
            return true;
        }

        /// <summary>
        /// Tries to parse a string representation of a <see cref="Fixed20p12"/>.
        /// </summary>
        public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out Fixed20p12 result)
        {
            double d;
            
            if (!double.TryParse(s, style, provider, out d))
            {
                result = Zero;
                return false;
            }

            result = new Fixed20p12((int)(d * 4096d + .5d));
            return true;
        }

        /// <summary>
        /// Implementation of <see cref="object.ToString"/>.
        /// </summary>
        public override string ToString()
        {
            return (value * 0.000244140625d).ToString();
        }

        /// <summary>
        /// Gets a string representation of this <see cref="Fixed20p12"/>.
        /// </summary>
        public string ToString(string format)
        {
            return (value * 0.000244140625d).ToString(format);
        }

        /// <summary>
        /// Gets a string representation of this <see cref="Fixed20p12"/>.
        /// </summary>
        public string ToString(IFormatProvider provider)
        {
            return (value * 0.000244140625d).ToString(provider);
        }

        /// <summary>
        /// Gets a string representation of this <see cref="Fixed20p12"/>.
        /// </summary>
        public string ToString(string format, IFormatProvider provider)
        {
            return (value * 0.000244140625d).ToString(format, provider);
        }

        /// <summary>
        /// Explicitly converts a <see cref="Decimal"/> to a Fixed20p12.
        /// </summary>
        public static explicit operator Fixed20p12(decimal value)
        {
            if (value < -524288m || value > 524287.999755859375m) throw new ArgumentOutOfRangeException();
            return new Fixed20p12((int)(value * 4096m + .5m));
        }

        /// <summary>
        /// Implicitly converts a Fixed20p12 to a <see cref="Decimal"/>.
        /// </summary>
        public static implicit operator decimal(Fixed20p12 value)
        {
            return value.value * 0.000244140625m;
        }

        /// <summary>
        /// Explicitly converts a <see cref="Double"/> to a Fixed20p12.
        /// </summary>
        public static explicit operator Fixed20p12(double value)
        {
            if (value < -524288d || value > 524287.999755859375d) throw new ArgumentOutOfRangeException();
            return new Fixed20p12((int)(value * 4096d + .5d));
        }

        /// <summary>
        /// Implicitly converts a Fixed20p12 to a <see cref="Double"/>.
        /// </summary>
        public static implicit operator double(Fixed20p12 value)
        {
            return value.value * 0.000244140625d;
        }

        /// <summary>
        /// Explicitly converts a Fixed20p12 to a <see cref="Single"/>.
        /// </summary>
        public static explicit operator float(Fixed20p12 value)
        {
            return value.value * 0.000244140625f;
        }

        /// <summary>
        /// Implicitly converts a <see cref="Int64"/> to a Fixed20p12.
        /// </summary>
        public static implicit operator Fixed20p12(long value)
        {
            return new Fixed20p12((int)(value << 12));
        }

        /// <summary>
        /// Explicitly converts a Fixed20p12 to a <see cref="System.Int64"/>.
        /// </summary>
        public static explicit operator long(Fixed20p12 value)
        {
            return (long)(value.value >> 12);
        }

        /// <summary>
        /// Explicitly converts a Fixed20p12 to a <see cref="System.UInt64"/>.
        /// </summary>
        public static explicit operator ulong(Fixed20p12 value)
        {
            return (ulong)(value.value >> 12);
        }

        /// <summary>
        /// Explicitly converts a Fixed20p12 to a <see cref="System.Int32"/>.
        /// </summary>
        public static explicit operator int(Fixed20p12 value)
        {
            return (int)(value.value >> 12);
        }

        /// <summary>
        /// Explicitly converts a Fixed20p12 to a <see cref="System.UInt32"/>.
        /// </summary>
        public static explicit operator uint(Fixed20p12 value)
        {
            return (uint)(value.value >> 12);
        }

        /// <summary>
        /// Explicitly converts a Fixed20p12 to a <see cref="System.Int16"/>.
        /// </summary>
        public static explicit operator short(Fixed20p12 value)
        {
            return (short)(value.value >> 12);
        }

        /// <summary>
        /// Explicitly converts a Fixed20p12 to a <see cref="System.UInt16"/>.
        /// </summary>
        public static explicit operator ushort(Fixed20p12 value)
        {
            return (ushort)(value.value >> 12);
        }

        /// <summary>
        /// Explicitly converts a Fixed20p12 to a <see cref="System.SByte"/>.
        /// </summary>
        public static explicit operator sbyte(Fixed20p12 value)
        {
            return (sbyte)(value.value >> 12);
        }

        /// <summary>
        /// Explicitly converts a Fixed20p12 to a <see cref="System.Byte"/>.
        /// </summary>
        public static explicit operator byte(Fixed20p12 value)
        {
            return (byte)(value.value >> 12);
        }

        /// <summary>
        /// Implementation of <see cref="object.Equals(object)"/>.
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is Fixed20p12 && Equals((Fixed20p12)obj);
        }

        /// <summary>
        /// Implementation of <see cref="IEquatable{Fixed20p12}"/>.
        /// </summary>
        public bool Equals(Fixed20p12 other)
        {
            return value == other.value;
        }

        /// <summary>
        /// Equality operator.
        /// </summary>
        public static bool operator ==(Fixed20p12 a, Fixed20p12 b)
        {
            return a.value == b.value;
        }

        /// <summary>
        /// Inequality operator.
        /// </summary>
        public static bool operator !=(Fixed20p12 a, Fixed20p12 b)
        {
            return a.value != b.value;
        }

        /// <summary>
        /// Implementation of <see cref="object.GetHashCode"/>.
        /// </summary>
        public override int GetHashCode()
        {
            return value ^ -1985174358;
        }

        /// <summary>
        /// Implementation of <see cref="IComparable{Fixed20p12}"/>.
        /// </summary>
        public int CompareTo(Fixed20p12 other)
        {
            return value.CompareTo(other.value);
        }

        /// <summary>
        /// Right-shift operator.
        /// </summary>
        public static Fixed20p12 operator >>(Fixed20p12 value, int shift)
        {
            return new Fixed20p12((int)(value.value >> shift));
        }

        /// <summary>
        /// Left-shift operator.
        /// </summary>
        public static Fixed20p12 operator <<(Fixed20p12 value, int shift)
        {
            return new Fixed20p12((int)(value.value << shift));
        }

        /// <summary>
        /// Gets the underlying bits that represent this <see cref="Fixed20p12"/>.
        /// </summary>
        public static int ToInt32Bits(Fixed20p12 value)
        {
            return value.value;
        }

        /// <summary>
        /// Creates a <see cref="Fixed20p12"/> from the underlying bit representation.
        /// </summary>
        public static Fixed20p12 FromInt32Bits(int value)
        {
            return new Fixed20p12(value);
        }

        /// <summary>
        /// Unary plus operator.
        /// </summary>
        public static Fixed20p12 operator +(Fixed20p12 value)
        {
            return value;
        }

        /// <summary>
        /// Unary minus operator.
        /// </summary>
        public static Fixed20p12 operator -(Fixed20p12 value)
        {
            return new Fixed20p12((int)(-value.value));
        }

        /// <summary>
        /// Addition operator.
        /// </summary>
        public static Fixed20p12 operator +(Fixed20p12 a, Fixed20p12 b)
        {
            return new Fixed20p12((int)(a.value + b.value));
        }

        /// <summary>
        /// Subtraction operator.
        /// </summary>
        public static Fixed20p12 operator -(Fixed20p12 a, Fixed20p12 b)
        {
            return new Fixed20p12((int)(a.value - b.value));
        }

        /// <summary>
        /// Multiplication operator.
        /// </summary>
        public static Fixed20p12 operator *(Fixed20p12 a, Fixed20p12 b)
        {
            return new Fixed20p12((int)(((long)a.value * (long)b.value + ((long)1 << 11)) >> 12));
        }

        /// <summary>
        /// Division operator.
        /// </summary>
        public static Fixed20p12 operator /(Fixed20p12 a, Fixed20p12 b)
        {
            return new Fixed20p12((int)((((long)a.value << 32) / b.value) >> 20));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed4p28"/> to a <see cref="Fixed20p12"/>.
        /// </summary>
        public static explicit operator Fixed20p12(Fixed4p28 other)
        {
            return new Fixed20p12((int)(other.value >> 16));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed8p24"/> to a <see cref="Fixed20p12"/>.
        /// </summary>
        public static explicit operator Fixed20p12(Fixed8p24 other)
        {
            return new Fixed20p12((int)(other.value >> 12));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed12p20"/> to a <see cref="Fixed20p12"/>.
        /// </summary>
        public static explicit operator Fixed20p12(Fixed12p20 other)
        {
            return new Fixed20p12((int)(other.value >> 8));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed16p16"/> to a <see cref="Fixed20p12"/>.
        /// </summary>
        public static explicit operator Fixed20p12(Fixed16p16 other)
        {
            return new Fixed20p12((int)(other.value >> 4));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed24p8"/> to a <see cref="Fixed20p12"/>.
        /// </summary>
        public static explicit operator Fixed20p12(Fixed24p8 other)
        {
            if (other.value < -134217728 || other.value > 134217727) throw new ArgumentOutOfRangeException();
            return new Fixed20p12((int)(other.value << 4));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed28p4"/> to a <see cref="Fixed20p12"/>.
        /// </summary>
        public static explicit operator Fixed20p12(Fixed28p4 other)
        {
            if (other.value < -8388608 || other.value > 8388607) throw new ArgumentOutOfRangeException();
            return new Fixed20p12((int)(other.value << 8));
        }

        /// <summary>
        /// Gets the absolute value of a <see cref="Fixed20p12"/>.
        /// </summary>
        public static Fixed20p12 Abs(Fixed20p12 value)
        {
            return new Fixed20p12(Math.Abs(value.value));
        }

        /// <summary>
        /// Gets the absolute value of this <see cref="Fixed20p12"/>.
        /// </summary>
        public Fixed20p12 Abs()
        {
            return new Fixed20p12(Math.Abs(value));
        }

        /// <summary>
        /// Gets the greatest integer <see cref="Fixed20p12"/> that is not greater than the specified value.
        /// </summary>
        public static Fixed20p12 Floor(Fixed20p12 value)
        {
            return new Fixed20p12((int)(value.value & 0xFFFFF000));
        }

        /// <summary>
        /// Gets the greatest integer <see cref="Fixed20p12"/> that is not greater than this value.
        /// </summary>
        public Fixed20p12 Floor()
        {
            return new Fixed20p12((int)(value & 0xFFFFF000));
        }

        /// <summary>
        /// Gets the least integer <see cref="Fixed20p12"/> that is not less than the specified value.
        /// </summary>
        public static Fixed20p12 Ceiling(Fixed20p12 value)
        {
            return new Fixed20p12((int)((value.value + 0xFFF) & 0xFFFFF000));
        }

        /// <summary>
        /// Gets the least integer <see cref="Fixed20p12"/> that is not less than this value.
        /// </summary>
        public Fixed20p12 Ceiling()
        {
            return new Fixed20p12((int)((value + 0xFFF) & 0xFFFFF000));
        }

        /// <summary>
        /// Gets the nearest integer <see cref="Fixed20p12"/> to the specified value.
        /// </summary>
        public static Fixed20p12 Round(Fixed20p12 value)
        {
            return new Fixed20p12((int)((value.value + 0x800) & 0xFFFFF000));
        }

        /// <summary>
        /// Gets the nearest integer <see cref="Fixed20p12"/> to this value.
        /// </summary>
        public Fixed20p12 Round()
        {
            return new Fixed20p12((int)((value + 0x800) & 0xFFFFF000));
        }

        /// <summary>
        /// Gets the fractional portion of a <see cref="Fixed20p12"/>.
        /// </summary>
        public static Fixed20p12 Frac(Fixed20p12 value)
        {
            return new Fixed20p12((int)(Math.Abs(value.value) & 0xFFF));
        }

        /// <summary>
        /// Gets the fractional portion of this <see cref="Fixed20p12"/>.
        /// </summary>
        public Fixed20p12 Frac()
        {
            return new Fixed20p12((int)(Math.Abs(value) & 0xFFF));
        }

        /// <summary>
        /// Rounds a <see cref="Fixed20p12"/> toward zero.
        /// </summary>
        public static Fixed20p12 Truncate(Fixed20p12 value)
        {
            return value.value >= 0 ? Floor(value) : Ceiling(value);
        }

        /// <summary>
        /// Rounds this <see cref="Fixed20p12"/> toward zero.
        /// </summary>
        public Fixed20p12 Truncate()
        {
            return value >= 0 ? Floor() : Ceiling();
        }

        /// <summary>
        /// Gets the sign of a <see cref="Fixed20p12"/>.
        /// </summary>
        public static int Sign(Fixed20p12 value)
        {
            return Math.Sign(value.value);
        }

        /// <summary>
        /// Gets the sign of this <see cref="Fixed20p12"/>.
        /// </summary>
        public int Sign()
        {
            return Math.Sign(value);
        }

        /// <summary>
        /// Gets the lesser of two <see cref="Fixed20p12"/> values.
        /// </summary>
        public static Fixed20p12 Min(Fixed20p12 a, Fixed20p12 b)
        {
            return a.value < b.value ? a : b;
        }

        /// <summary>
        /// Gets the greater of two <see cref="Fixed20p12"/> values.
        /// </summary>
        public static Fixed20p12 Max(Fixed20p12 a, Fixed20p12 b)
        {
            return a.value > b.value ? a : b;
        }

        /// <summary>
        /// Acos function.
        /// </summary>
        public static Fixed20p12 Acos(Fixed20p12 x) => (Fixed20p12)Math.Acos((double)x);

        /// <summary>
        /// Acos function.
        /// </summary>
        public Fixed20p12 Acos() => (Fixed20p12)Math.Acos((double)this);

        /// <summary>
        /// Asin function.
        /// </summary>
        public static Fixed20p12 Asin(Fixed20p12 x) => (Fixed20p12)Math.Asin((double)x);

        /// <summary>
        /// Asin function.
        /// </summary>
        public Fixed20p12 Asin() => (Fixed20p12)Math.Asin((double)this);

        /// <summary>
        /// Atan function.
        /// </summary>
        public static Fixed20p12 Atan(Fixed20p12 x) => (Fixed20p12)Math.Atan((double)x);

        /// <summary>
        /// Atan function.
        /// </summary>
        public Fixed20p12 Atan() => (Fixed20p12)Math.Atan((double)this);

        /// <summary>
        /// Cos function.
        /// </summary>
        public static Fixed20p12 Cos(Fixed20p12 x) => (Fixed20p12)Math.Cos((double)x);

        /// <summary>
        /// Cos function.
        /// </summary>
        public Fixed20p12 Cos() => (Fixed20p12)Math.Cos((double)this);

        /// <summary>
        /// Cosh function.
        /// </summary>
        public static Fixed20p12 Cosh(Fixed20p12 x) => (Fixed20p12)Math.Cosh((double)x);

        /// <summary>
        /// Cosh function.
        /// </summary>
        public Fixed20p12 Cosh() => (Fixed20p12)Math.Cosh((double)this);

        /// <summary>
        /// Exp function.
        /// </summary>
        public static Fixed20p12 Exp(Fixed20p12 x) => (Fixed20p12)Math.Exp((double)x);

        /// <summary>
        /// Exp function.
        /// </summary>
        public Fixed20p12 Exp() => (Fixed20p12)Math.Exp((double)this);

        /// <summary>
        /// Log10 function.
        /// </summary>
        public static Fixed20p12 Log10(Fixed20p12 x) => (Fixed20p12)Math.Log10((double)x);

        /// <summary>
        /// Log10 function.
        /// </summary>
        public Fixed20p12 Log10() => (Fixed20p12)Math.Log10((double)this);

        /// <summary>
        /// Sin function.
        /// </summary>
        public static Fixed20p12 Sin(Fixed20p12 x) => (Fixed20p12)Math.Sin((double)x);

        /// <summary>
        /// Sin function.
        /// </summary>
        public Fixed20p12 Sin() => (Fixed20p12)Math.Sin((double)this);

        /// <summary>
        /// Sinh function.
        /// </summary>
        public static Fixed20p12 Sinh(Fixed20p12 x) => (Fixed20p12)Math.Sinh((double)x);

        /// <summary>
        /// Sinh function.
        /// </summary>
        public Fixed20p12 Sinh() => (Fixed20p12)Math.Sinh((double)this);

        /// <summary>
        /// Sqrt function.
        /// </summary>
        public static Fixed20p12 Sqrt(Fixed20p12 x) => (Fixed20p12)Math.Sqrt((double)x);

        /// <summary>
        /// Sqrt function.
        /// </summary>
        public Fixed20p12 Sqrt() => (Fixed20p12)Math.Sqrt((double)this);

        /// <summary>
        /// Tan function.
        /// </summary>
        public static Fixed20p12 Tan(Fixed20p12 x) => (Fixed20p12)Math.Tan((double)x);

        /// <summary>
        /// Tan function.
        /// </summary>
        public Fixed20p12 Tan() => (Fixed20p12)Math.Tan((double)this);

        /// <summary>
        /// Tanh function.
        /// </summary>
        public static Fixed20p12 Tanh(Fixed20p12 x) => (Fixed20p12)Math.Tanh((double)x);

        /// <summary>
        /// Tanh function.
        /// </summary>
        public Fixed20p12 Tanh() => (Fixed20p12)Math.Tanh((double)this);

        /// <summary>
        /// Gets a random <see cref="Fixed20p12"/> from 0 (inclusive) to 1 (exclusive).
        /// </summary>
        public static Fixed20p12 Random(Generator g)
        {
            return new Fixed20p12(g.Int32(4096));
        }
    }

    /// <summary>
    /// Signed 32-bit number with 8 fractional bits and 24 integer bits.
    /// Represents values from -8388608 to 8388607.99609375 in increments of 0.00390625.
    /// </summary>
    public partial struct Fixed24p8 : IEquatable<Fixed24p8>, IComparable<Fixed24p8>
    {
        /// <summary>
        /// The constant value 0.
        /// </summary>
        public static readonly Fixed24p8 Zero = new Fixed24p8(0);

        /// <summary>
        /// The constant value 1.
        /// </summary>
        public static readonly Fixed24p8 One = new Fixed24p8(256);

        /// <summary>
        /// The constant value -8388608.
        /// </summary>
        public static readonly Fixed24p8 MinValue = new Fixed24p8(int.MinValue);

        /// <summary>
        /// The constant value 8388607.99609375.
        /// </summary>
        public static readonly Fixed24p8 MaxValue = new Fixed24p8(int.MaxValue);

        /// <summary>
        /// The constant value 0.00390625.
        /// </summary>
        public static readonly Fixed24p8 ε = new Fixed24p8(1);

        /// <summary>PI</summary>
        public static readonly Fixed24p8 π          = (Fixed24p8)3.1415926535897932384626433833;

        /// <summary>Base of natural logarithm.</summary>
        public static readonly Fixed24p8 e          = (Fixed24p8)2.7182818284590452353602874714;

        /// <summary>Golden ratio.</summary>
        public static readonly Fixed24p8 φ          = (Fixed24p8)1.6180339887498948482045868344;

        /// <summary>Euler–Mascheroni constant.</summary>
        public static readonly Fixed24p8 γ          = (Fixed24p8)0.5772156649015328606065120901;

        /// <summary>Square root of 2π.</summary>
        public static readonly Fixed24p8 Sqrt2π     = (Fixed24p8)2.5066282746310005024157652848;

        /// <summary>Square root of 5.</summary>
        public static readonly Fixed24p8 Sqrt5      = (Fixed24p8)2.2360679774997896964091736687;

        /// <summary>Square root of π.</summary>
        public static readonly Fixed24p8 Sqrtπ      = (Fixed24p8)1.7724538509055160272981674833;

        /// <summary>Square root of 3.</summary>
        public static readonly Fixed24p8 Sqrt3      = (Fixed24p8)1.7320508075688772935274463415;

        /// <summary>Square root of 2.</summary>
        public static readonly Fixed24p8 Sqrt2      = (Fixed24p8)1.4142135623730950488016887242;

        /// <summary>Square root of π/2.</summary>
        public static readonly Fixed24p8 SqrtHalfπ  = (Fixed24p8)1.2533141373155002512078826424;

        /// <summary>Base-2 logarithm of 10.</summary>
        public static readonly Fixed24p8 Lg10       = (Fixed24p8)3.3219280948873623478703194295;
   
        /// <summary>Natural logarithm of 10.</summary>
        public static readonly Fixed24p8 Ln10       = (Fixed24p8)2.3025850929940456840179914547;

        /// <summary>Base-2 logarithm of e.</summary>
        public static readonly Fixed24p8 LgE        = (Fixed24p8)1.4426950408889634073599246810;
   
        /// <summary>Natural logarithm of 2.</summary>
        public static readonly Fixed24p8 Ln2        = (Fixed24p8)0.6931471805599453094172321215;

        /// <summary>Base-10 logarithm of e.</summary>
        public static readonly Fixed24p8 LogE       = (Fixed24p8)0.4342944819032518276511289189;

        /// <summary>Base-10 logarithm of 2.</summary>
        public static readonly Fixed24p8 Log2       = (Fixed24p8)0.3010299956639811952137388947;

        internal readonly int value;

        private Fixed24p8(int value)
        {
            this.value = value;
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed24p8"/>.
        /// </summary>
        public static Fixed24p8 Parse(string s)
        {
            return new Fixed24p8((int)(double.Parse(s) * 256d + .5d));
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed24p8"/>.
        /// </summary>
        public static Fixed24p8 Parse(string s, IFormatProvider provider)
        {
            return new Fixed24p8((int)(double.Parse(s, provider) * 256d + .5d));
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed24p8"/>.
        /// </summary>
        public static Fixed24p8 Parse(string s, NumberStyles style)
        {
            return new Fixed24p8((int)(double.Parse(s, style) * 256d + .5d));
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed24p8"/>.
        /// </summary>
        public static Fixed24p8 Parse(string s, NumberStyles style, IFormatProvider provider)
        {
            return new Fixed24p8((int)(double.Parse(s, style, provider) * 256d + .5d));
        }

        /// <summary>
        /// Tries to parse a string representation of a <see cref="Fixed24p8"/>.
        /// </summary>
        public static bool TryParse(string s, out Fixed24p8 result)
        {
            double d;
            
            if (!double.TryParse(s, out d))
            {
                result = Zero;
                return false;
            }

            result = new Fixed24p8((int)(d * 256d + .5d));
            return true;
        }

        /// <summary>
        /// Tries to parse a string representation of a <see cref="Fixed24p8"/>.
        /// </summary>
        public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out Fixed24p8 result)
        {
            double d;
            
            if (!double.TryParse(s, style, provider, out d))
            {
                result = Zero;
                return false;
            }

            result = new Fixed24p8((int)(d * 256d + .5d));
            return true;
        }

        /// <summary>
        /// Implementation of <see cref="object.ToString"/>.
        /// </summary>
        public override string ToString()
        {
            return (value * 0.00390625d).ToString();
        }

        /// <summary>
        /// Gets a string representation of this <see cref="Fixed24p8"/>.
        /// </summary>
        public string ToString(string format)
        {
            return (value * 0.00390625d).ToString(format);
        }

        /// <summary>
        /// Gets a string representation of this <see cref="Fixed24p8"/>.
        /// </summary>
        public string ToString(IFormatProvider provider)
        {
            return (value * 0.00390625d).ToString(provider);
        }

        /// <summary>
        /// Gets a string representation of this <see cref="Fixed24p8"/>.
        /// </summary>
        public string ToString(string format, IFormatProvider provider)
        {
            return (value * 0.00390625d).ToString(format, provider);
        }

        /// <summary>
        /// Explicitly converts a <see cref="Decimal"/> to a Fixed24p8.
        /// </summary>
        public static explicit operator Fixed24p8(decimal value)
        {
            if (value < -8388608m || value > 8388607.99609375m) throw new ArgumentOutOfRangeException();
            return new Fixed24p8((int)(value * 256m + .5m));
        }

        /// <summary>
        /// Implicitly converts a Fixed24p8 to a <see cref="Decimal"/>.
        /// </summary>
        public static implicit operator decimal(Fixed24p8 value)
        {
            return value.value * 0.00390625m;
        }

        /// <summary>
        /// Explicitly converts a <see cref="Double"/> to a Fixed24p8.
        /// </summary>
        public static explicit operator Fixed24p8(double value)
        {
            if (value < -8388608d || value > 8388607.99609375d) throw new ArgumentOutOfRangeException();
            return new Fixed24p8((int)(value * 256d + .5d));
        }

        /// <summary>
        /// Implicitly converts a Fixed24p8 to a <see cref="Double"/>.
        /// </summary>
        public static implicit operator double(Fixed24p8 value)
        {
            return value.value * 0.00390625d;
        }

        /// <summary>
        /// Explicitly converts a Fixed24p8 to a <see cref="Single"/>.
        /// </summary>
        public static explicit operator float(Fixed24p8 value)
        {
            return value.value * 0.00390625f;
        }

        /// <summary>
        /// Implicitly converts a <see cref="Int64"/> to a Fixed24p8.
        /// </summary>
        public static implicit operator Fixed24p8(long value)
        {
            return new Fixed24p8((int)(value << 8));
        }

        /// <summary>
        /// Explicitly converts a Fixed24p8 to a <see cref="System.Int64"/>.
        /// </summary>
        public static explicit operator long(Fixed24p8 value)
        {
            return (long)(value.value >> 8);
        }

        /// <summary>
        /// Explicitly converts a Fixed24p8 to a <see cref="System.UInt64"/>.
        /// </summary>
        public static explicit operator ulong(Fixed24p8 value)
        {
            return (ulong)(value.value >> 8);
        }

        /// <summary>
        /// Explicitly converts a Fixed24p8 to a <see cref="System.Int32"/>.
        /// </summary>
        public static explicit operator int(Fixed24p8 value)
        {
            return (int)(value.value >> 8);
        }

        /// <summary>
        /// Explicitly converts a Fixed24p8 to a <see cref="System.UInt32"/>.
        /// </summary>
        public static explicit operator uint(Fixed24p8 value)
        {
            return (uint)(value.value >> 8);
        }

        /// <summary>
        /// Explicitly converts a Fixed24p8 to a <see cref="System.Int16"/>.
        /// </summary>
        public static explicit operator short(Fixed24p8 value)
        {
            return (short)(value.value >> 8);
        }

        /// <summary>
        /// Explicitly converts a Fixed24p8 to a <see cref="System.UInt16"/>.
        /// </summary>
        public static explicit operator ushort(Fixed24p8 value)
        {
            return (ushort)(value.value >> 8);
        }

        /// <summary>
        /// Explicitly converts a Fixed24p8 to a <see cref="System.SByte"/>.
        /// </summary>
        public static explicit operator sbyte(Fixed24p8 value)
        {
            return (sbyte)(value.value >> 8);
        }

        /// <summary>
        /// Explicitly converts a Fixed24p8 to a <see cref="System.Byte"/>.
        /// </summary>
        public static explicit operator byte(Fixed24p8 value)
        {
            return (byte)(value.value >> 8);
        }

        /// <summary>
        /// Implementation of <see cref="object.Equals(object)"/>.
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is Fixed24p8 && Equals((Fixed24p8)obj);
        }

        /// <summary>
        /// Implementation of <see cref="IEquatable{Fixed24p8}"/>.
        /// </summary>
        public bool Equals(Fixed24p8 other)
        {
            return value == other.value;
        }

        /// <summary>
        /// Equality operator.
        /// </summary>
        public static bool operator ==(Fixed24p8 a, Fixed24p8 b)
        {
            return a.value == b.value;
        }

        /// <summary>
        /// Inequality operator.
        /// </summary>
        public static bool operator !=(Fixed24p8 a, Fixed24p8 b)
        {
            return a.value != b.value;
        }

        /// <summary>
        /// Implementation of <see cref="object.GetHashCode"/>.
        /// </summary>
        public override int GetHashCode()
        {
            return value ^ 337147677;
        }

        /// <summary>
        /// Implementation of <see cref="IComparable{Fixed24p8}"/>.
        /// </summary>
        public int CompareTo(Fixed24p8 other)
        {
            return value.CompareTo(other.value);
        }

        /// <summary>
        /// Right-shift operator.
        /// </summary>
        public static Fixed24p8 operator >>(Fixed24p8 value, int shift)
        {
            return new Fixed24p8((int)(value.value >> shift));
        }

        /// <summary>
        /// Left-shift operator.
        /// </summary>
        public static Fixed24p8 operator <<(Fixed24p8 value, int shift)
        {
            return new Fixed24p8((int)(value.value << shift));
        }

        /// <summary>
        /// Gets the underlying bits that represent this <see cref="Fixed24p8"/>.
        /// </summary>
        public static int ToInt32Bits(Fixed24p8 value)
        {
            return value.value;
        }

        /// <summary>
        /// Creates a <see cref="Fixed24p8"/> from the underlying bit representation.
        /// </summary>
        public static Fixed24p8 FromInt32Bits(int value)
        {
            return new Fixed24p8(value);
        }

        /// <summary>
        /// Unary plus operator.
        /// </summary>
        public static Fixed24p8 operator +(Fixed24p8 value)
        {
            return value;
        }

        /// <summary>
        /// Unary minus operator.
        /// </summary>
        public static Fixed24p8 operator -(Fixed24p8 value)
        {
            return new Fixed24p8((int)(-value.value));
        }

        /// <summary>
        /// Addition operator.
        /// </summary>
        public static Fixed24p8 operator +(Fixed24p8 a, Fixed24p8 b)
        {
            return new Fixed24p8((int)(a.value + b.value));
        }

        /// <summary>
        /// Subtraction operator.
        /// </summary>
        public static Fixed24p8 operator -(Fixed24p8 a, Fixed24p8 b)
        {
            return new Fixed24p8((int)(a.value - b.value));
        }

        /// <summary>
        /// Multiplication operator.
        /// </summary>
        public static Fixed24p8 operator *(Fixed24p8 a, Fixed24p8 b)
        {
            return new Fixed24p8((int)(((long)a.value * (long)b.value + ((long)1 << 7)) >> 8));
        }

        /// <summary>
        /// Division operator.
        /// </summary>
        public static Fixed24p8 operator /(Fixed24p8 a, Fixed24p8 b)
        {
            return new Fixed24p8((int)((((long)a.value << 32) / b.value) >> 24));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed4p28"/> to a <see cref="Fixed24p8"/>.
        /// </summary>
        public static explicit operator Fixed24p8(Fixed4p28 other)
        {
            return new Fixed24p8((int)(other.value >> 20));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed8p24"/> to a <see cref="Fixed24p8"/>.
        /// </summary>
        public static explicit operator Fixed24p8(Fixed8p24 other)
        {
            return new Fixed24p8((int)(other.value >> 16));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed12p20"/> to a <see cref="Fixed24p8"/>.
        /// </summary>
        public static explicit operator Fixed24p8(Fixed12p20 other)
        {
            return new Fixed24p8((int)(other.value >> 12));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed16p16"/> to a <see cref="Fixed24p8"/>.
        /// </summary>
        public static explicit operator Fixed24p8(Fixed16p16 other)
        {
            return new Fixed24p8((int)(other.value >> 8));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed20p12"/> to a <see cref="Fixed24p8"/>.
        /// </summary>
        public static explicit operator Fixed24p8(Fixed20p12 other)
        {
            return new Fixed24p8((int)(other.value >> 4));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed28p4"/> to a <see cref="Fixed24p8"/>.
        /// </summary>
        public static explicit operator Fixed24p8(Fixed28p4 other)
        {
            if (other.value < -134217728 || other.value > 134217727) throw new ArgumentOutOfRangeException();
            return new Fixed24p8((int)(other.value << 4));
        }

        /// <summary>
        /// Gets the absolute value of a <see cref="Fixed24p8"/>.
        /// </summary>
        public static Fixed24p8 Abs(Fixed24p8 value)
        {
            return new Fixed24p8(Math.Abs(value.value));
        }

        /// <summary>
        /// Gets the absolute value of this <see cref="Fixed24p8"/>.
        /// </summary>
        public Fixed24p8 Abs()
        {
            return new Fixed24p8(Math.Abs(value));
        }

        /// <summary>
        /// Gets the greatest integer <see cref="Fixed24p8"/> that is not greater than the specified value.
        /// </summary>
        public static Fixed24p8 Floor(Fixed24p8 value)
        {
            return new Fixed24p8((int)(value.value & 0xFFFFFF00));
        }

        /// <summary>
        /// Gets the greatest integer <see cref="Fixed24p8"/> that is not greater than this value.
        /// </summary>
        public Fixed24p8 Floor()
        {
            return new Fixed24p8((int)(value & 0xFFFFFF00));
        }

        /// <summary>
        /// Gets the least integer <see cref="Fixed24p8"/> that is not less than the specified value.
        /// </summary>
        public static Fixed24p8 Ceiling(Fixed24p8 value)
        {
            return new Fixed24p8((int)((value.value + 0xFF) & 0xFFFFFF00));
        }

        /// <summary>
        /// Gets the least integer <see cref="Fixed24p8"/> that is not less than this value.
        /// </summary>
        public Fixed24p8 Ceiling()
        {
            return new Fixed24p8((int)((value + 0xFF) & 0xFFFFFF00));
        }

        /// <summary>
        /// Gets the nearest integer <see cref="Fixed24p8"/> to the specified value.
        /// </summary>
        public static Fixed24p8 Round(Fixed24p8 value)
        {
            return new Fixed24p8((int)((value.value + 0x80) & 0xFFFFFF00));
        }

        /// <summary>
        /// Gets the nearest integer <see cref="Fixed24p8"/> to this value.
        /// </summary>
        public Fixed24p8 Round()
        {
            return new Fixed24p8((int)((value + 0x80) & 0xFFFFFF00));
        }

        /// <summary>
        /// Gets the fractional portion of a <see cref="Fixed24p8"/>.
        /// </summary>
        public static Fixed24p8 Frac(Fixed24p8 value)
        {
            return new Fixed24p8((int)(Math.Abs(value.value) & 0xFF));
        }

        /// <summary>
        /// Gets the fractional portion of this <see cref="Fixed24p8"/>.
        /// </summary>
        public Fixed24p8 Frac()
        {
            return new Fixed24p8((int)(Math.Abs(value) & 0xFF));
        }

        /// <summary>
        /// Rounds a <see cref="Fixed24p8"/> toward zero.
        /// </summary>
        public static Fixed24p8 Truncate(Fixed24p8 value)
        {
            return value.value >= 0 ? Floor(value) : Ceiling(value);
        }

        /// <summary>
        /// Rounds this <see cref="Fixed24p8"/> toward zero.
        /// </summary>
        public Fixed24p8 Truncate()
        {
            return value >= 0 ? Floor() : Ceiling();
        }

        /// <summary>
        /// Gets the sign of a <see cref="Fixed24p8"/>.
        /// </summary>
        public static int Sign(Fixed24p8 value)
        {
            return Math.Sign(value.value);
        }

        /// <summary>
        /// Gets the sign of this <see cref="Fixed24p8"/>.
        /// </summary>
        public int Sign()
        {
            return Math.Sign(value);
        }

        /// <summary>
        /// Gets the lesser of two <see cref="Fixed24p8"/> values.
        /// </summary>
        public static Fixed24p8 Min(Fixed24p8 a, Fixed24p8 b)
        {
            return a.value < b.value ? a : b;
        }

        /// <summary>
        /// Gets the greater of two <see cref="Fixed24p8"/> values.
        /// </summary>
        public static Fixed24p8 Max(Fixed24p8 a, Fixed24p8 b)
        {
            return a.value > b.value ? a : b;
        }

        /// <summary>
        /// Acos function.
        /// </summary>
        public static Fixed24p8 Acos(Fixed24p8 x) => (Fixed24p8)Math.Acos((double)x);

        /// <summary>
        /// Acos function.
        /// </summary>
        public Fixed24p8 Acos() => (Fixed24p8)Math.Acos((double)this);

        /// <summary>
        /// Asin function.
        /// </summary>
        public static Fixed24p8 Asin(Fixed24p8 x) => (Fixed24p8)Math.Asin((double)x);

        /// <summary>
        /// Asin function.
        /// </summary>
        public Fixed24p8 Asin() => (Fixed24p8)Math.Asin((double)this);

        /// <summary>
        /// Atan function.
        /// </summary>
        public static Fixed24p8 Atan(Fixed24p8 x) => (Fixed24p8)Math.Atan((double)x);

        /// <summary>
        /// Atan function.
        /// </summary>
        public Fixed24p8 Atan() => (Fixed24p8)Math.Atan((double)this);

        /// <summary>
        /// Cos function.
        /// </summary>
        public static Fixed24p8 Cos(Fixed24p8 x) => (Fixed24p8)Math.Cos((double)x);

        /// <summary>
        /// Cos function.
        /// </summary>
        public Fixed24p8 Cos() => (Fixed24p8)Math.Cos((double)this);

        /// <summary>
        /// Cosh function.
        /// </summary>
        public static Fixed24p8 Cosh(Fixed24p8 x) => (Fixed24p8)Math.Cosh((double)x);

        /// <summary>
        /// Cosh function.
        /// </summary>
        public Fixed24p8 Cosh() => (Fixed24p8)Math.Cosh((double)this);

        /// <summary>
        /// Exp function.
        /// </summary>
        public static Fixed24p8 Exp(Fixed24p8 x) => (Fixed24p8)Math.Exp((double)x);

        /// <summary>
        /// Exp function.
        /// </summary>
        public Fixed24p8 Exp() => (Fixed24p8)Math.Exp((double)this);

        /// <summary>
        /// Log10 function.
        /// </summary>
        public static Fixed24p8 Log10(Fixed24p8 x) => (Fixed24p8)Math.Log10((double)x);

        /// <summary>
        /// Log10 function.
        /// </summary>
        public Fixed24p8 Log10() => (Fixed24p8)Math.Log10((double)this);

        /// <summary>
        /// Sin function.
        /// </summary>
        public static Fixed24p8 Sin(Fixed24p8 x) => (Fixed24p8)Math.Sin((double)x);

        /// <summary>
        /// Sin function.
        /// </summary>
        public Fixed24p8 Sin() => (Fixed24p8)Math.Sin((double)this);

        /// <summary>
        /// Sinh function.
        /// </summary>
        public static Fixed24p8 Sinh(Fixed24p8 x) => (Fixed24p8)Math.Sinh((double)x);

        /// <summary>
        /// Sinh function.
        /// </summary>
        public Fixed24p8 Sinh() => (Fixed24p8)Math.Sinh((double)this);

        /// <summary>
        /// Sqrt function.
        /// </summary>
        public static Fixed24p8 Sqrt(Fixed24p8 x) => (Fixed24p8)Math.Sqrt((double)x);

        /// <summary>
        /// Sqrt function.
        /// </summary>
        public Fixed24p8 Sqrt() => (Fixed24p8)Math.Sqrt((double)this);

        /// <summary>
        /// Tan function.
        /// </summary>
        public static Fixed24p8 Tan(Fixed24p8 x) => (Fixed24p8)Math.Tan((double)x);

        /// <summary>
        /// Tan function.
        /// </summary>
        public Fixed24p8 Tan() => (Fixed24p8)Math.Tan((double)this);

        /// <summary>
        /// Tanh function.
        /// </summary>
        public static Fixed24p8 Tanh(Fixed24p8 x) => (Fixed24p8)Math.Tanh((double)x);

        /// <summary>
        /// Tanh function.
        /// </summary>
        public Fixed24p8 Tanh() => (Fixed24p8)Math.Tanh((double)this);

        /// <summary>
        /// Gets a random <see cref="Fixed24p8"/> from 0 (inclusive) to 1 (exclusive).
        /// </summary>
        public static Fixed24p8 Random(Generator g)
        {
            return new Fixed24p8(g.Int32(256));
        }
    }

    /// <summary>
    /// Signed 32-bit number with 4 fractional bits and 28 integer bits.
    /// Represents values from -134217728 to 134217727.9375 in increments of 0.0625.
    /// </summary>
    public partial struct Fixed28p4 : IEquatable<Fixed28p4>, IComparable<Fixed28p4>
    {
        /// <summary>
        /// The constant value 0.
        /// </summary>
        public static readonly Fixed28p4 Zero = new Fixed28p4(0);

        /// <summary>
        /// The constant value 1.
        /// </summary>
        public static readonly Fixed28p4 One = new Fixed28p4(16);

        /// <summary>
        /// The constant value -134217728.
        /// </summary>
        public static readonly Fixed28p4 MinValue = new Fixed28p4(int.MinValue);

        /// <summary>
        /// The constant value 134217727.9375.
        /// </summary>
        public static readonly Fixed28p4 MaxValue = new Fixed28p4(int.MaxValue);

        /// <summary>
        /// The constant value 0.0625.
        /// </summary>
        public static readonly Fixed28p4 ε = new Fixed28p4(1);

        /// <summary>PI</summary>
        public static readonly Fixed28p4 π          = (Fixed28p4)3.1415926535897932384626433833;

        /// <summary>Base of natural logarithm.</summary>
        public static readonly Fixed28p4 e          = (Fixed28p4)2.7182818284590452353602874714;

        /// <summary>Golden ratio.</summary>
        public static readonly Fixed28p4 φ          = (Fixed28p4)1.6180339887498948482045868344;

        /// <summary>Euler–Mascheroni constant.</summary>
        public static readonly Fixed28p4 γ          = (Fixed28p4)0.5772156649015328606065120901;

        /// <summary>Square root of 2π.</summary>
        public static readonly Fixed28p4 Sqrt2π     = (Fixed28p4)2.5066282746310005024157652848;

        /// <summary>Square root of 5.</summary>
        public static readonly Fixed28p4 Sqrt5      = (Fixed28p4)2.2360679774997896964091736687;

        /// <summary>Square root of π.</summary>
        public static readonly Fixed28p4 Sqrtπ      = (Fixed28p4)1.7724538509055160272981674833;

        /// <summary>Square root of 3.</summary>
        public static readonly Fixed28p4 Sqrt3      = (Fixed28p4)1.7320508075688772935274463415;

        /// <summary>Square root of 2.</summary>
        public static readonly Fixed28p4 Sqrt2      = (Fixed28p4)1.4142135623730950488016887242;

        /// <summary>Square root of π/2.</summary>
        public static readonly Fixed28p4 SqrtHalfπ  = (Fixed28p4)1.2533141373155002512078826424;

        /// <summary>Base-2 logarithm of 10.</summary>
        public static readonly Fixed28p4 Lg10       = (Fixed28p4)3.3219280948873623478703194295;
   
        /// <summary>Natural logarithm of 10.</summary>
        public static readonly Fixed28p4 Ln10       = (Fixed28p4)2.3025850929940456840179914547;

        /// <summary>Base-2 logarithm of e.</summary>
        public static readonly Fixed28p4 LgE        = (Fixed28p4)1.4426950408889634073599246810;
   
        /// <summary>Natural logarithm of 2.</summary>
        public static readonly Fixed28p4 Ln2        = (Fixed28p4)0.6931471805599453094172321215;

        /// <summary>Base-10 logarithm of e.</summary>
        public static readonly Fixed28p4 LogE       = (Fixed28p4)0.4342944819032518276511289189;

        /// <summary>Base-10 logarithm of 2.</summary>
        public static readonly Fixed28p4 Log2       = (Fixed28p4)0.3010299956639811952137388947;

        internal readonly int value;

        private Fixed28p4(int value)
        {
            this.value = value;
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed28p4"/>.
        /// </summary>
        public static Fixed28p4 Parse(string s)
        {
            return new Fixed28p4((int)(double.Parse(s) * 16d + .5d));
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed28p4"/>.
        /// </summary>
        public static Fixed28p4 Parse(string s, IFormatProvider provider)
        {
            return new Fixed28p4((int)(double.Parse(s, provider) * 16d + .5d));
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed28p4"/>.
        /// </summary>
        public static Fixed28p4 Parse(string s, NumberStyles style)
        {
            return new Fixed28p4((int)(double.Parse(s, style) * 16d + .5d));
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed28p4"/>.
        /// </summary>
        public static Fixed28p4 Parse(string s, NumberStyles style, IFormatProvider provider)
        {
            return new Fixed28p4((int)(double.Parse(s, style, provider) * 16d + .5d));
        }

        /// <summary>
        /// Tries to parse a string representation of a <see cref="Fixed28p4"/>.
        /// </summary>
        public static bool TryParse(string s, out Fixed28p4 result)
        {
            double d;
            
            if (!double.TryParse(s, out d))
            {
                result = Zero;
                return false;
            }

            result = new Fixed28p4((int)(d * 16d + .5d));
            return true;
        }

        /// <summary>
        /// Tries to parse a string representation of a <see cref="Fixed28p4"/>.
        /// </summary>
        public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out Fixed28p4 result)
        {
            double d;
            
            if (!double.TryParse(s, style, provider, out d))
            {
                result = Zero;
                return false;
            }

            result = new Fixed28p4((int)(d * 16d + .5d));
            return true;
        }

        /// <summary>
        /// Implementation of <see cref="object.ToString"/>.
        /// </summary>
        public override string ToString()
        {
            return (value * 0.0625d).ToString();
        }

        /// <summary>
        /// Gets a string representation of this <see cref="Fixed28p4"/>.
        /// </summary>
        public string ToString(string format)
        {
            return (value * 0.0625d).ToString(format);
        }

        /// <summary>
        /// Gets a string representation of this <see cref="Fixed28p4"/>.
        /// </summary>
        public string ToString(IFormatProvider provider)
        {
            return (value * 0.0625d).ToString(provider);
        }

        /// <summary>
        /// Gets a string representation of this <see cref="Fixed28p4"/>.
        /// </summary>
        public string ToString(string format, IFormatProvider provider)
        {
            return (value * 0.0625d).ToString(format, provider);
        }

        /// <summary>
        /// Explicitly converts a <see cref="Decimal"/> to a Fixed28p4.
        /// </summary>
        public static explicit operator Fixed28p4(decimal value)
        {
            if (value < -134217728m || value > 134217727.9375m) throw new ArgumentOutOfRangeException();
            return new Fixed28p4((int)(value * 16m + .5m));
        }

        /// <summary>
        /// Implicitly converts a Fixed28p4 to a <see cref="Decimal"/>.
        /// </summary>
        public static implicit operator decimal(Fixed28p4 value)
        {
            return value.value * 0.0625m;
        }

        /// <summary>
        /// Explicitly converts a <see cref="Double"/> to a Fixed28p4.
        /// </summary>
        public static explicit operator Fixed28p4(double value)
        {
            if (value < -134217728d || value > 134217727.9375d) throw new ArgumentOutOfRangeException();
            return new Fixed28p4((int)(value * 16d + .5d));
        }

        /// <summary>
        /// Implicitly converts a Fixed28p4 to a <see cref="Double"/>.
        /// </summary>
        public static implicit operator double(Fixed28p4 value)
        {
            return value.value * 0.0625d;
        }

        /// <summary>
        /// Explicitly converts a Fixed28p4 to a <see cref="Single"/>.
        /// </summary>
        public static explicit operator float(Fixed28p4 value)
        {
            return value.value * 0.0625f;
        }

        /// <summary>
        /// Implicitly converts a <see cref="Int64"/> to a Fixed28p4.
        /// </summary>
        public static implicit operator Fixed28p4(long value)
        {
            return new Fixed28p4((int)(value << 4));
        }

        /// <summary>
        /// Explicitly converts a Fixed28p4 to a <see cref="System.Int64"/>.
        /// </summary>
        public static explicit operator long(Fixed28p4 value)
        {
            return (long)(value.value >> 4);
        }

        /// <summary>
        /// Explicitly converts a Fixed28p4 to a <see cref="System.UInt64"/>.
        /// </summary>
        public static explicit operator ulong(Fixed28p4 value)
        {
            return (ulong)(value.value >> 4);
        }

        /// <summary>
        /// Explicitly converts a Fixed28p4 to a <see cref="System.Int32"/>.
        /// </summary>
        public static explicit operator int(Fixed28p4 value)
        {
            return (int)(value.value >> 4);
        }

        /// <summary>
        /// Explicitly converts a Fixed28p4 to a <see cref="System.UInt32"/>.
        /// </summary>
        public static explicit operator uint(Fixed28p4 value)
        {
            return (uint)(value.value >> 4);
        }

        /// <summary>
        /// Explicitly converts a Fixed28p4 to a <see cref="System.Int16"/>.
        /// </summary>
        public static explicit operator short(Fixed28p4 value)
        {
            return (short)(value.value >> 4);
        }

        /// <summary>
        /// Explicitly converts a Fixed28p4 to a <see cref="System.UInt16"/>.
        /// </summary>
        public static explicit operator ushort(Fixed28p4 value)
        {
            return (ushort)(value.value >> 4);
        }

        /// <summary>
        /// Explicitly converts a Fixed28p4 to a <see cref="System.SByte"/>.
        /// </summary>
        public static explicit operator sbyte(Fixed28p4 value)
        {
            return (sbyte)(value.value >> 4);
        }

        /// <summary>
        /// Explicitly converts a Fixed28p4 to a <see cref="System.Byte"/>.
        /// </summary>
        public static explicit operator byte(Fixed28p4 value)
        {
            return (byte)(value.value >> 4);
        }

        /// <summary>
        /// Implementation of <see cref="object.Equals(object)"/>.
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is Fixed28p4 && Equals((Fixed28p4)obj);
        }

        /// <summary>
        /// Implementation of <see cref="IEquatable{Fixed28p4}"/>.
        /// </summary>
        public bool Equals(Fixed28p4 other)
        {
            return value == other.value;
        }

        /// <summary>
        /// Equality operator.
        /// </summary>
        public static bool operator ==(Fixed28p4 a, Fixed28p4 b)
        {
            return a.value == b.value;
        }

        /// <summary>
        /// Inequality operator.
        /// </summary>
        public static bool operator !=(Fixed28p4 a, Fixed28p4 b)
        {
            return a.value != b.value;
        }

        /// <summary>
        /// Implementation of <see cref="object.GetHashCode"/>.
        /// </summary>
        public override int GetHashCode()
        {
            return value ^ 1950285781;
        }

        /// <summary>
        /// Implementation of <see cref="IComparable{Fixed28p4}"/>.
        /// </summary>
        public int CompareTo(Fixed28p4 other)
        {
            return value.CompareTo(other.value);
        }

        /// <summary>
        /// Right-shift operator.
        /// </summary>
        public static Fixed28p4 operator >>(Fixed28p4 value, int shift)
        {
            return new Fixed28p4((int)(value.value >> shift));
        }

        /// <summary>
        /// Left-shift operator.
        /// </summary>
        public static Fixed28p4 operator <<(Fixed28p4 value, int shift)
        {
            return new Fixed28p4((int)(value.value << shift));
        }

        /// <summary>
        /// Gets the underlying bits that represent this <see cref="Fixed28p4"/>.
        /// </summary>
        public static int ToInt32Bits(Fixed28p4 value)
        {
            return value.value;
        }

        /// <summary>
        /// Creates a <see cref="Fixed28p4"/> from the underlying bit representation.
        /// </summary>
        public static Fixed28p4 FromInt32Bits(int value)
        {
            return new Fixed28p4(value);
        }

        /// <summary>
        /// Unary plus operator.
        /// </summary>
        public static Fixed28p4 operator +(Fixed28p4 value)
        {
            return value;
        }

        /// <summary>
        /// Unary minus operator.
        /// </summary>
        public static Fixed28p4 operator -(Fixed28p4 value)
        {
            return new Fixed28p4((int)(-value.value));
        }

        /// <summary>
        /// Addition operator.
        /// </summary>
        public static Fixed28p4 operator +(Fixed28p4 a, Fixed28p4 b)
        {
            return new Fixed28p4((int)(a.value + b.value));
        }

        /// <summary>
        /// Subtraction operator.
        /// </summary>
        public static Fixed28p4 operator -(Fixed28p4 a, Fixed28p4 b)
        {
            return new Fixed28p4((int)(a.value - b.value));
        }

        /// <summary>
        /// Multiplication operator.
        /// </summary>
        public static Fixed28p4 operator *(Fixed28p4 a, Fixed28p4 b)
        {
            return new Fixed28p4((int)(((long)a.value * (long)b.value + ((long)1 << 3)) >> 4));
        }

        /// <summary>
        /// Division operator.
        /// </summary>
        public static Fixed28p4 operator /(Fixed28p4 a, Fixed28p4 b)
        {
            return new Fixed28p4((int)((((long)a.value << 32) / b.value) >> 28));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed4p28"/> to a <see cref="Fixed28p4"/>.
        /// </summary>
        public static explicit operator Fixed28p4(Fixed4p28 other)
        {
            return new Fixed28p4((int)(other.value >> 24));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed8p24"/> to a <see cref="Fixed28p4"/>.
        /// </summary>
        public static explicit operator Fixed28p4(Fixed8p24 other)
        {
            return new Fixed28p4((int)(other.value >> 20));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed12p20"/> to a <see cref="Fixed28p4"/>.
        /// </summary>
        public static explicit operator Fixed28p4(Fixed12p20 other)
        {
            return new Fixed28p4((int)(other.value >> 16));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed16p16"/> to a <see cref="Fixed28p4"/>.
        /// </summary>
        public static explicit operator Fixed28p4(Fixed16p16 other)
        {
            return new Fixed28p4((int)(other.value >> 12));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed20p12"/> to a <see cref="Fixed28p4"/>.
        /// </summary>
        public static explicit operator Fixed28p4(Fixed20p12 other)
        {
            return new Fixed28p4((int)(other.value >> 8));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed24p8"/> to a <see cref="Fixed28p4"/>.
        /// </summary>
        public static explicit operator Fixed28p4(Fixed24p8 other)
        {
            return new Fixed28p4((int)(other.value >> 4));
        }

        /// <summary>
        /// Gets the absolute value of a <see cref="Fixed28p4"/>.
        /// </summary>
        public static Fixed28p4 Abs(Fixed28p4 value)
        {
            return new Fixed28p4(Math.Abs(value.value));
        }

        /// <summary>
        /// Gets the absolute value of this <see cref="Fixed28p4"/>.
        /// </summary>
        public Fixed28p4 Abs()
        {
            return new Fixed28p4(Math.Abs(value));
        }

        /// <summary>
        /// Gets the greatest integer <see cref="Fixed28p4"/> that is not greater than the specified value.
        /// </summary>
        public static Fixed28p4 Floor(Fixed28p4 value)
        {
            return new Fixed28p4((int)(value.value & 0xFFFFFFF0));
        }

        /// <summary>
        /// Gets the greatest integer <see cref="Fixed28p4"/> that is not greater than this value.
        /// </summary>
        public Fixed28p4 Floor()
        {
            return new Fixed28p4((int)(value & 0xFFFFFFF0));
        }

        /// <summary>
        /// Gets the least integer <see cref="Fixed28p4"/> that is not less than the specified value.
        /// </summary>
        public static Fixed28p4 Ceiling(Fixed28p4 value)
        {
            return new Fixed28p4((int)((value.value + 0xF) & 0xFFFFFFF0));
        }

        /// <summary>
        /// Gets the least integer <see cref="Fixed28p4"/> that is not less than this value.
        /// </summary>
        public Fixed28p4 Ceiling()
        {
            return new Fixed28p4((int)((value + 0xF) & 0xFFFFFFF0));
        }

        /// <summary>
        /// Gets the nearest integer <see cref="Fixed28p4"/> to the specified value.
        /// </summary>
        public static Fixed28p4 Round(Fixed28p4 value)
        {
            return new Fixed28p4((int)((value.value + 0x8) & 0xFFFFFFF0));
        }

        /// <summary>
        /// Gets the nearest integer <see cref="Fixed28p4"/> to this value.
        /// </summary>
        public Fixed28p4 Round()
        {
            return new Fixed28p4((int)((value + 0x8) & 0xFFFFFFF0));
        }

        /// <summary>
        /// Gets the fractional portion of a <see cref="Fixed28p4"/>.
        /// </summary>
        public static Fixed28p4 Frac(Fixed28p4 value)
        {
            return new Fixed28p4((int)(Math.Abs(value.value) & 0xF));
        }

        /// <summary>
        /// Gets the fractional portion of this <see cref="Fixed28p4"/>.
        /// </summary>
        public Fixed28p4 Frac()
        {
            return new Fixed28p4((int)(Math.Abs(value) & 0xF));
        }

        /// <summary>
        /// Rounds a <see cref="Fixed28p4"/> toward zero.
        /// </summary>
        public static Fixed28p4 Truncate(Fixed28p4 value)
        {
            return value.value >= 0 ? Floor(value) : Ceiling(value);
        }

        /// <summary>
        /// Rounds this <see cref="Fixed28p4"/> toward zero.
        /// </summary>
        public Fixed28p4 Truncate()
        {
            return value >= 0 ? Floor() : Ceiling();
        }

        /// <summary>
        /// Gets the sign of a <see cref="Fixed28p4"/>.
        /// </summary>
        public static int Sign(Fixed28p4 value)
        {
            return Math.Sign(value.value);
        }

        /// <summary>
        /// Gets the sign of this <see cref="Fixed28p4"/>.
        /// </summary>
        public int Sign()
        {
            return Math.Sign(value);
        }

        /// <summary>
        /// Gets the lesser of two <see cref="Fixed28p4"/> values.
        /// </summary>
        public static Fixed28p4 Min(Fixed28p4 a, Fixed28p4 b)
        {
            return a.value < b.value ? a : b;
        }

        /// <summary>
        /// Gets the greater of two <see cref="Fixed28p4"/> values.
        /// </summary>
        public static Fixed28p4 Max(Fixed28p4 a, Fixed28p4 b)
        {
            return a.value > b.value ? a : b;
        }

        /// <summary>
        /// Acos function.
        /// </summary>
        public static Fixed28p4 Acos(Fixed28p4 x) => (Fixed28p4)Math.Acos((double)x);

        /// <summary>
        /// Acos function.
        /// </summary>
        public Fixed28p4 Acos() => (Fixed28p4)Math.Acos((double)this);

        /// <summary>
        /// Asin function.
        /// </summary>
        public static Fixed28p4 Asin(Fixed28p4 x) => (Fixed28p4)Math.Asin((double)x);

        /// <summary>
        /// Asin function.
        /// </summary>
        public Fixed28p4 Asin() => (Fixed28p4)Math.Asin((double)this);

        /// <summary>
        /// Atan function.
        /// </summary>
        public static Fixed28p4 Atan(Fixed28p4 x) => (Fixed28p4)Math.Atan((double)x);

        /// <summary>
        /// Atan function.
        /// </summary>
        public Fixed28p4 Atan() => (Fixed28p4)Math.Atan((double)this);

        /// <summary>
        /// Cos function.
        /// </summary>
        public static Fixed28p4 Cos(Fixed28p4 x) => (Fixed28p4)Math.Cos((double)x);

        /// <summary>
        /// Cos function.
        /// </summary>
        public Fixed28p4 Cos() => (Fixed28p4)Math.Cos((double)this);

        /// <summary>
        /// Cosh function.
        /// </summary>
        public static Fixed28p4 Cosh(Fixed28p4 x) => (Fixed28p4)Math.Cosh((double)x);

        /// <summary>
        /// Cosh function.
        /// </summary>
        public Fixed28p4 Cosh() => (Fixed28p4)Math.Cosh((double)this);

        /// <summary>
        /// Exp function.
        /// </summary>
        public static Fixed28p4 Exp(Fixed28p4 x) => (Fixed28p4)Math.Exp((double)x);

        /// <summary>
        /// Exp function.
        /// </summary>
        public Fixed28p4 Exp() => (Fixed28p4)Math.Exp((double)this);

        /// <summary>
        /// Log10 function.
        /// </summary>
        public static Fixed28p4 Log10(Fixed28p4 x) => (Fixed28p4)Math.Log10((double)x);

        /// <summary>
        /// Log10 function.
        /// </summary>
        public Fixed28p4 Log10() => (Fixed28p4)Math.Log10((double)this);

        /// <summary>
        /// Sin function.
        /// </summary>
        public static Fixed28p4 Sin(Fixed28p4 x) => (Fixed28p4)Math.Sin((double)x);

        /// <summary>
        /// Sin function.
        /// </summary>
        public Fixed28p4 Sin() => (Fixed28p4)Math.Sin((double)this);

        /// <summary>
        /// Sinh function.
        /// </summary>
        public static Fixed28p4 Sinh(Fixed28p4 x) => (Fixed28p4)Math.Sinh((double)x);

        /// <summary>
        /// Sinh function.
        /// </summary>
        public Fixed28p4 Sinh() => (Fixed28p4)Math.Sinh((double)this);

        /// <summary>
        /// Sqrt function.
        /// </summary>
        public static Fixed28p4 Sqrt(Fixed28p4 x) => (Fixed28p4)Math.Sqrt((double)x);

        /// <summary>
        /// Sqrt function.
        /// </summary>
        public Fixed28p4 Sqrt() => (Fixed28p4)Math.Sqrt((double)this);

        /// <summary>
        /// Tan function.
        /// </summary>
        public static Fixed28p4 Tan(Fixed28p4 x) => (Fixed28p4)Math.Tan((double)x);

        /// <summary>
        /// Tan function.
        /// </summary>
        public Fixed28p4 Tan() => (Fixed28p4)Math.Tan((double)this);

        /// <summary>
        /// Tanh function.
        /// </summary>
        public static Fixed28p4 Tanh(Fixed28p4 x) => (Fixed28p4)Math.Tanh((double)x);

        /// <summary>
        /// Tanh function.
        /// </summary>
        public Fixed28p4 Tanh() => (Fixed28p4)Math.Tanh((double)this);

        /// <summary>
        /// Gets a random <see cref="Fixed28p4"/> from 0 (inclusive) to 1 (exclusive).
        /// </summary>
        public static Fixed28p4 Random(Generator g)
        {
            return new Fixed28p4(g.Int32(16));
        }
    }

}
