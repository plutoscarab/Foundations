
/*
Fixed8p24.cs

Copyright © 2016 Pluto Scarab Software. Most Rights Reserved.
Author: Bret Mulvey

This work is licensed under the Creative Commons Attribution-ShareAlike 4.0 International License. 
To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/4.0/.

THIS IS AN AUTO-GENERATED SOURCE FILE. DO NOT EDIT THIS FILE DIRECTLY.
INSTEAD, EDIT THE .tt FILE WITH THE SIMILAR NAME AND RE-RUN THE TEXT TEMPLATING
FILE GENERATOR. IF YOU SAVE THE FILE IN VISUAL STUDIO IT WILL DO THIS FOR YOU.
*/

using System;
using System.Globalization;
using Foundations.RandomNumbers;

namespace Foundations.Types
{
    /// <summary>
    /// Signed 32-bit number with 24 fractional bits and 8 integer bits.
    /// Represents values from -128 to 127.999999940395355224609375 in increments of 0.000000059604644775390625.
    /// </summary>
    public partial struct Fixed8p24 : IEquatable<Fixed8p24>, IComparable<Fixed8p24>
    {
        /// <summary>
        /// The constant value 0.
        /// </summary>
        public static readonly Fixed8p24 Zero = new Fixed8p24(0);

        /// <summary>
        /// The constant value 1.
        /// </summary>
        public static readonly Fixed8p24 One = new Fixed8p24(16777216);

        /// <summary>
        /// The constant value -128.
        /// </summary>
        public static readonly Fixed8p24 MinValue = new Fixed8p24(int.MinValue);

        /// <summary>
        /// The constant value 127.999999940395355224609375.
        /// </summary>
        public static readonly Fixed8p24 MaxValue = new Fixed8p24(int.MaxValue);

        /// <summary>
        /// The constant value 0.000000059604644775390625.
        /// </summary>
        public static readonly Fixed8p24 ε = new Fixed8p24(1);

        /// <summary>PI</summary>
        public static readonly Fixed8p24 π          = (Fixed8p24)3.1415926535897932384626433833;

        /// <summary>Base of natural logarithm.</summary>
        public static readonly Fixed8p24 e          = (Fixed8p24)2.7182818284590452353602874714;

        /// <summary>Golden ratio.</summary>
        public static readonly Fixed8p24 φ          = (Fixed8p24)1.6180339887498948482045868344;

        /// <summary>Euler–Mascheroni constant.</summary>
        public static readonly Fixed8p24 γ          = (Fixed8p24)0.5772156649015328606065120901;

        /// <summary>Square root of 2π.</summary>
        public static readonly Fixed8p24 Sqrt2π     = (Fixed8p24)2.5066282746310005024157652848;

        /// <summary>Square root of 5.</summary>
        public static readonly Fixed8p24 Sqrt5      = (Fixed8p24)2.2360679774997896964091736687;

        /// <summary>Square root of π.</summary>
        public static readonly Fixed8p24 Sqrtπ      = (Fixed8p24)1.7724538509055160272981674833;

        /// <summary>Square root of 3.</summary>
        public static readonly Fixed8p24 Sqrt3      = (Fixed8p24)1.7320508075688772935274463415;

        /// <summary>Square root of 2.</summary>
        public static readonly Fixed8p24 Sqrt2      = (Fixed8p24)1.4142135623730950488016887242;

        /// <summary>Square root of π/2.</summary>
        public static readonly Fixed8p24 SqrtHalfπ  = (Fixed8p24)1.2533141373155002512078826424;

        /// <summary>Base-2 logarithm of 10.</summary>
        public static readonly Fixed8p24 Lg10       = (Fixed8p24)3.3219280948873623478703194295;
   
        /// <summary>Natural logarithm of 10.</summary>
        public static readonly Fixed8p24 Ln10       = (Fixed8p24)2.3025850929940456840179914547;

        /// <summary>Base-2 logarithm of e.</summary>
        public static readonly Fixed8p24 LgE        = (Fixed8p24)1.4426950408889634073599246810;
   
        /// <summary>Natural logarithm of 2.</summary>
        public static readonly Fixed8p24 Ln2        = (Fixed8p24)0.6931471805599453094172321215;

        /// <summary>Base-10 logarithm of e.</summary>
        public static readonly Fixed8p24 LogE       = (Fixed8p24)0.4342944819032518276511289189;

        /// <summary>Base-10 logarithm of 2.</summary>
        public static readonly Fixed8p24 Log2       = (Fixed8p24)0.3010299956639811952137388947;

        internal readonly int value;

        private Fixed8p24(int value)
        {
            this.value = value;
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed8p24"/>.
        /// </summary>
        public static Fixed8p24 Parse(string s)
        {
            var d = double.Parse(s);
            return new Fixed8p24((int)(d * 16777216d + .5d * Math.Sign(d)));
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed8p24"/>.
        /// </summary>
        public static Fixed8p24 Parse(string s, IFormatProvider provider)
        {
            var d = double.Parse(s, provider);
            return new Fixed8p24((int)(d * 16777216d + .5d * Math.Sign(d)));
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed8p24"/>.
        /// </summary>
        public static Fixed8p24 Parse(string s, NumberStyles style)
        {
            var d = double.Parse(s, style);
            return new Fixed8p24((int)(d * 16777216d + .5d * Math.Sign(d)));
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed8p24"/>.
        /// </summary>
        public static Fixed8p24 Parse(string s, NumberStyles style, IFormatProvider provider)
        {
            var d = double.Parse(s, style, provider);
            return new Fixed8p24((int)(d * 16777216d + .5d * Math.Sign(d)));
        }

        /// <summary>
        /// Tries to parse a string representation of a <see cref="Fixed8p24"/>.
        /// </summary>
        public static bool TryParse(string s, out Fixed8p24 result)
        {
            double d;
            
            if (!double.TryParse(s, out d))
            {
                result = Zero;
                return false;
            }

            result = new Fixed8p24((int)(d * 16777216d + .5d * Math.Sign(d)));
            return true;
        }

        /// <summary>
        /// Tries to parse a string representation of a <see cref="Fixed8p24"/>.
        /// </summary>
        public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out Fixed8p24 result)
        {
            double d;
            
            if (!double.TryParse(s, style, provider, out d))
            {
                result = Zero;
                return false;
            }

            result = new Fixed8p24((int)(d * 16777216d + .5d * Math.Sign(d)));
            return true;
        }

        /// <summary>
        /// Implementation of <see cref="object.ToString"/>.
        /// </summary>
        public override string ToString()
        {
            return (value * 0.000000059604644775390625d).ToString();
        }

        /// <summary>
        /// Gets a string representation of this <see cref="Fixed8p24"/>.
        /// </summary>
        public string ToString(string format)
        {
            return (value * 0.000000059604644775390625d).ToString(format);
        }

        /// <summary>
        /// Gets a string representation of this <see cref="Fixed8p24"/>.
        /// </summary>
        public string ToString(IFormatProvider provider)
        {
            return (value * 0.000000059604644775390625d).ToString(provider);
        }

        /// <summary>
        /// Gets a string representation of this <see cref="Fixed8p24"/>.
        /// </summary>
        public string ToString(string format, IFormatProvider provider)
        {
            return (value * 0.000000059604644775390625d).ToString(format, provider);
        }

        /// <summary>
        /// Explicitly converts a <see cref="Decimal"/> to a Fixed8p24.
        /// </summary>
        public static explicit operator Fixed8p24(decimal value)
        {
            if (value < -128m || value > 127.999999940395355224609375m) throw new ArgumentOutOfRangeException();
            return new Fixed8p24((int)(value * 16777216m + .5m * Math.Sign(value)));
        }

        /// <summary>
        /// Implicitly converts a Fixed8p24 to a <see cref="Decimal"/>.
        /// </summary>
        public static implicit operator decimal(Fixed8p24 value)
        {
            return value.value * 0.000000059604644775390625m;
        }

        /// <summary>
        /// Explicitly converts a <see cref="Double"/> to a Fixed8p24.
        /// </summary>
        public static explicit operator Fixed8p24(double value)
        {
            if (value < -128d || value > 127.999999940395355224609375d) throw new ArgumentOutOfRangeException();
            return new Fixed8p24((int)(value * 16777216d + .5d * Math.Sign(value)));
        }

        /// <summary>
        /// Implicitly converts a Fixed8p24 to a <see cref="Double"/>.
        /// </summary>
        public static implicit operator double(Fixed8p24 value)
        {
            return value.value * 0.000000059604644775390625d;
        }

        /// <summary>
        /// Explicitly converts a Fixed8p24 to a <see cref="Single"/>.
        /// </summary>
        public static explicit operator float(Fixed8p24 value)
        {
            return value.value * 0.000000059604644775390625f;
        }

        /// <summary>
        /// Implicitly converts a <see cref="Int64"/> to a Fixed8p24.
        /// </summary>
        public static implicit operator Fixed8p24(long value)
        {
            return new Fixed8p24((int)(value << 24));
        }

        /// <summary>
        /// Explicitly converts a Fixed8p24 to a <see cref="System.Int64"/>.
        /// </summary>
        public static explicit operator long(Fixed8p24 value)
        {
            return (long)(value.value >> 24);
        }

        /// <summary>
        /// Explicitly converts a Fixed8p24 to a <see cref="System.UInt64"/>.
        /// </summary>
        public static explicit operator ulong(Fixed8p24 value)
        {
            return (ulong)(value.value >> 24);
        }

        /// <summary>
        /// Explicitly converts a Fixed8p24 to a <see cref="System.Int32"/>.
        /// </summary>
        public static explicit operator int(Fixed8p24 value)
        {
            return (int)(value.value >> 24);
        }

        /// <summary>
        /// Explicitly converts a Fixed8p24 to a <see cref="System.UInt32"/>.
        /// </summary>
        public static explicit operator uint(Fixed8p24 value)
        {
            return (uint)(value.value >> 24);
        }

        /// <summary>
        /// Explicitly converts a Fixed8p24 to a <see cref="System.Int16"/>.
        /// </summary>
        public static explicit operator short(Fixed8p24 value)
        {
            return (short)(value.value >> 24);
        }

        /// <summary>
        /// Explicitly converts a Fixed8p24 to a <see cref="System.UInt16"/>.
        /// </summary>
        public static explicit operator ushort(Fixed8p24 value)
        {
            return (ushort)(value.value >> 24);
        }

        /// <summary>
        /// Explicitly converts a Fixed8p24 to a <see cref="System.SByte"/>.
        /// </summary>
        public static explicit operator sbyte(Fixed8p24 value)
        {
            return (sbyte)(value.value >> 24);
        }

        /// <summary>
        /// Explicitly converts a Fixed8p24 to a <see cref="System.Byte"/>.
        /// </summary>
        public static explicit operator byte(Fixed8p24 value)
        {
            return (byte)(value.value >> 24);
        }

        /// <summary>
        /// Implementation of <see cref="object.Equals(object)"/>.
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is Fixed8p24 && Equals((Fixed8p24)obj);
        }

        /// <summary>
        /// Implementation of <see cref="IEquatable{Fixed8p24}"/>.
        /// </summary>
        public bool Equals(Fixed8p24 other)
        {
            return value == other.value;
        }

        /// <summary>
        /// Equality operator.
        /// </summary>
        public static bool operator ==(Fixed8p24 a, Fixed8p24 b)
        {
            return a.value == b.value;
        }

        /// <summary>
        /// Inequality operator.
        /// </summary>
        public static bool operator !=(Fixed8p24 a, Fixed8p24 b)
        {
            return a.value != b.value;
        }

        /// <summary>
        /// Implementation of <see cref="object.GetHashCode"/>.
        /// </summary>
        public override int GetHashCode()
        {
            return value ^ 502103533;
        }

        /// <summary>
        /// Less-than operator.
        /// </summary>
        public static bool operator <(Fixed8p24 a, Fixed8p24 b)
        {
            return a.value < b.value;
        }

        /// <summary>
        /// Greater-than operator.
        /// </summary>
        public static bool operator >(Fixed8p24 a, Fixed8p24 b)
        {
            return a.value > b.value;
        }

        /// <summary>
        /// Less-than-or-equal operator.
        /// </summary>
        public static bool operator <=(Fixed8p24 a, Fixed8p24 b)
        {
            return a.value <= b.value;
        }

        /// <summary>
        /// Greater-than-or-equal operator.
        /// </summary>
        public static bool operator >=(Fixed8p24 a, Fixed8p24 b)
        {
            return a.value >= b.value;
        }

        /// <summary>
        /// Implementation of <see cref="IComparable{Fixed8p24}"/>.
        /// </summary>
        public int CompareTo(Fixed8p24 other)
        {
            return value.CompareTo(other.value);
        }

        /// <summary>
        /// Right-shift operator.
        /// </summary>
        public static Fixed8p24 operator >>(Fixed8p24 value, int shift)
        {
            return new Fixed8p24((int)(value.value >> shift));
        }

        /// <summary>
        /// Left-shift operator.
        /// </summary>
        public static Fixed8p24 operator <<(Fixed8p24 value, int shift)
        {
            return new Fixed8p24((int)(value.value << shift));
        }

        /// <summary>
        /// Gets the underlying bits that represent this <see cref="Fixed8p24"/>.
        /// </summary>
        public static int ToInt32Bits(Fixed8p24 value)
        {
            return value.value;
        }

        /// <summary>
        /// Creates a <see cref="Fixed8p24"/> from the underlying bit representation.
        /// </summary>
        public static Fixed8p24 FromInt32Bits(int value)
        {
            return new Fixed8p24(value);
        }

        /// <summary>
        /// Unary plus operator.
        /// </summary>
        public static Fixed8p24 operator +(Fixed8p24 value)
        {
            return value;
        }

        /// <summary>
        /// Unary minus operator.
        /// </summary>
        public static Fixed8p24 operator -(Fixed8p24 value)
        {
            return new Fixed8p24((int)(-value.value));
        }

        /// <summary>
        /// Increment operator.
        /// </summary>
        public static Fixed8p24 operator ++(Fixed8p24 value)
        {
            return value + One;
        }

        /// <summary>
        /// Decrement operator.
        /// </summary>
        public static Fixed8p24 operator --(Fixed8p24 value)
        {
            return value - One;
        }

        /// <summary>
        /// Addition operator.
        /// </summary>
        public static Fixed8p24 operator +(Fixed8p24 a, Fixed8p24 b)
        {
            return new Fixed8p24((int)(a.value + b.value));
        }

        /// <summary>
        /// Subtraction operator.
        /// </summary>
        public static Fixed8p24 operator -(Fixed8p24 a, Fixed8p24 b)
        {
            return new Fixed8p24((int)(a.value - b.value));
        }

        /// <summary>
        /// Multiplication operator.
        /// </summary>
        public static Fixed8p24 operator *(Fixed8p24 a, Fixed8p24 b)
        {
            return new Fixed8p24((int)(((long)a.value * (long)b.value + ((long)1 << 23)) >> 24));
        }

        /// <summary>
        /// Division operator.
        /// </summary>
        public static Fixed8p24 operator /(Fixed8p24 a, Fixed8p24 b)
        {
            return new Fixed8p24((int)((((long)a.value << 32) / b.value) >> 8));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed4p28"/> to a <see cref="Fixed8p24"/>.
        /// </summary>
        public static explicit operator Fixed8p24(Fixed4p28 other)
        {
            return new Fixed8p24((int)(other.value >> 4));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed12p20"/> to a <see cref="Fixed8p24"/>.
        /// </summary>
        public static explicit operator Fixed8p24(Fixed12p20 other)
        {
            if (other.value < -134217728 || other.value > 134217727) throw new ArgumentOutOfRangeException();
            return new Fixed8p24((int)(other.value << 4));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed16p16"/> to a <see cref="Fixed8p24"/>.
        /// </summary>
        public static explicit operator Fixed8p24(Fixed16p16 other)
        {
            if (other.value < -8388608 || other.value > 8388607) throw new ArgumentOutOfRangeException();
            return new Fixed8p24((int)(other.value << 8));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed20p12"/> to a <see cref="Fixed8p24"/>.
        /// </summary>
        public static explicit operator Fixed8p24(Fixed20p12 other)
        {
            if (other.value < -524288 || other.value > 524287) throw new ArgumentOutOfRangeException();
            return new Fixed8p24((int)(other.value << 12));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed24p8"/> to a <see cref="Fixed8p24"/>.
        /// </summary>
        public static explicit operator Fixed8p24(Fixed24p8 other)
        {
            if (other.value < -32768 || other.value > 32767) throw new ArgumentOutOfRangeException();
            return new Fixed8p24((int)(other.value << 16));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed28p4"/> to a <see cref="Fixed8p24"/>.
        /// </summary>
        public static explicit operator Fixed8p24(Fixed28p4 other)
        {
            if (other.value < -2048 || other.value > 2047) throw new ArgumentOutOfRangeException();
            return new Fixed8p24((int)(other.value << 20));
        }

        /// <summary>
        /// Gets the absolute value of a <see cref="Fixed8p24"/>.
        /// </summary>
        public static Fixed8p24 Abs(Fixed8p24 value)
        {
            return new Fixed8p24(Math.Abs(value.value));
        }

        /// <summary>
        /// Gets the absolute value of this <see cref="Fixed8p24"/>.
        /// </summary>
        public Fixed8p24 Abs()
        {
            return new Fixed8p24(Math.Abs(value));
        }

        /// <summary>
        /// Gets the greatest integer <see cref="Fixed8p24"/> that is not greater than the specified value.
        /// </summary>
        public static Fixed8p24 Floor(Fixed8p24 value)
        {
            return new Fixed8p24((int)(value.value & 0xFF000000));
        }

        /// <summary>
        /// Gets the greatest integer <see cref="Fixed8p24"/> that is not greater than this value.
        /// </summary>
        public Fixed8p24 Floor()
        {
            return new Fixed8p24((int)(value & 0xFF000000));
        }

        /// <summary>
        /// Gets the least integer <see cref="Fixed8p24"/> that is not less than the specified value.
        /// </summary>
        public static Fixed8p24 Ceiling(Fixed8p24 value)
        {
            return new Fixed8p24((int)((value.value + 0xFFFFFF) & 0xFF000000));
        }

        /// <summary>
        /// Gets the least integer <see cref="Fixed8p24"/> that is not less than this value.
        /// </summary>
        public Fixed8p24 Ceiling()
        {
            return new Fixed8p24((int)((value + 0xFFFFFF) & 0xFF000000));
        }

        /// <summary>
        /// Gets the nearest integer <see cref="Fixed8p24"/> to the specified value.
        /// </summary>
        public static Fixed8p24 Round(Fixed8p24 value)
        {
            return new Fixed8p24((int)((value.value + 0x800000) & 0xFF000000));
        }

        /// <summary>
        /// Gets the nearest integer <see cref="Fixed8p24"/> to this value.
        /// </summary>
        public Fixed8p24 Round()
        {
            return new Fixed8p24((int)((value + 0x800000) & 0xFF000000));
        }

        /// <summary>
        /// Gets the fractional portion of a <see cref="Fixed8p24"/>.
        /// </summary>
        public static Fixed8p24 Frac(Fixed8p24 value)
        {
            return new Fixed8p24((int)(Math.Abs(value.value) & 0xFFFFFF));
        }

        /// <summary>
        /// Gets the fractional portion of this <see cref="Fixed8p24"/>.
        /// </summary>
        public Fixed8p24 Frac()
        {
            return new Fixed8p24((int)(Math.Abs(value) & 0xFFFFFF));
        }

        /// <summary>
        /// Rounds a <see cref="Fixed8p24"/> toward zero.
        /// </summary>
        public static Fixed8p24 Truncate(Fixed8p24 value)
        {
            return value.value >= 0 ? Floor(value) : Ceiling(value);
        }

        /// <summary>
        /// Rounds this <see cref="Fixed8p24"/> toward zero.
        /// </summary>
        public Fixed8p24 Truncate()
        {
            return value >= 0 ? Floor() : Ceiling();
        }

        /// <summary>
        /// Gets the sign of a <see cref="Fixed8p24"/>.
        /// </summary>
        public static int Sign(Fixed8p24 value)
        {
            return Math.Sign(value.value);
        }

        /// <summary>
        /// Gets the sign of this <see cref="Fixed8p24"/>.
        /// </summary>
        public int Sign()
        {
            return Math.Sign(value);
        }

        /// <summary>
        /// Gets the lesser of two <see cref="Fixed8p24"/> values.
        /// </summary>
        public static Fixed8p24 Min(Fixed8p24 a, Fixed8p24 b)
        {
            return a.value < b.value ? a : b;
        }

        /// <summary>
        /// Gets the greater of two <see cref="Fixed8p24"/> values.
        /// </summary>
        public static Fixed8p24 Max(Fixed8p24 a, Fixed8p24 b)
        {
            return a.value > b.value ? a : b;
        }

        /// <summary>
        /// Acos function.
        /// </summary>
        public static Fixed8p24 Acos(Fixed8p24 x) => (Fixed8p24)Math.Acos((double)x);

        /// <summary>
        /// Acos function.
        /// </summary>
        public Fixed8p24 Acos() => (Fixed8p24)Math.Acos((double)this);

        /// <summary>
        /// Asin function.
        /// </summary>
        public static Fixed8p24 Asin(Fixed8p24 x) => (Fixed8p24)Math.Asin((double)x);

        /// <summary>
        /// Asin function.
        /// </summary>
        public Fixed8p24 Asin() => (Fixed8p24)Math.Asin((double)this);

        /// <summary>
        /// Atan function.
        /// </summary>
        public static Fixed8p24 Atan(Fixed8p24 x) => (Fixed8p24)Math.Atan((double)x);

        /// <summary>
        /// Atan function.
        /// </summary>
        public Fixed8p24 Atan() => (Fixed8p24)Math.Atan((double)this);

        /// <summary>
        /// Cos function.
        /// </summary>
        public static Fixed8p24 Cos(Fixed8p24 x) => (Fixed8p24)Math.Cos((double)x);

        /// <summary>
        /// Cos function.
        /// </summary>
        public Fixed8p24 Cos() => (Fixed8p24)Math.Cos((double)this);

        /// <summary>
        /// Cosh function.
        /// </summary>
        public static Fixed8p24 Cosh(Fixed8p24 x) => (Fixed8p24)Math.Cosh((double)x);

        /// <summary>
        /// Cosh function.
        /// </summary>
        public Fixed8p24 Cosh() => (Fixed8p24)Math.Cosh((double)this);

        /// <summary>
        /// Exp function.
        /// </summary>
        public static Fixed8p24 Exp(Fixed8p24 x) => (Fixed8p24)Math.Exp((double)x);

        /// <summary>
        /// Exp function.
        /// </summary>
        public Fixed8p24 Exp() => (Fixed8p24)Math.Exp((double)this);

        /// <summary>
        /// Log10 function.
        /// </summary>
        public static Fixed8p24 Log10(Fixed8p24 x) => (Fixed8p24)Math.Log10((double)x);

        /// <summary>
        /// Log10 function.
        /// </summary>
        public Fixed8p24 Log10() => (Fixed8p24)Math.Log10((double)this);

        /// <summary>
        /// Sin function.
        /// </summary>
        public static Fixed8p24 Sin(Fixed8p24 x) => (Fixed8p24)Math.Sin((double)x);

        /// <summary>
        /// Sin function.
        /// </summary>
        public Fixed8p24 Sin() => (Fixed8p24)Math.Sin((double)this);

        /// <summary>
        /// Sinh function.
        /// </summary>
        public static Fixed8p24 Sinh(Fixed8p24 x) => (Fixed8p24)Math.Sinh((double)x);

        /// <summary>
        /// Sinh function.
        /// </summary>
        public Fixed8p24 Sinh() => (Fixed8p24)Math.Sinh((double)this);

        /// <summary>
        /// Sqrt function.
        /// </summary>
        public static Fixed8p24 Sqrt(Fixed8p24 x) => (Fixed8p24)Math.Sqrt((double)x);

        /// <summary>
        /// Sqrt function.
        /// </summary>
        public Fixed8p24 Sqrt() => (Fixed8p24)Math.Sqrt((double)this);

        /// <summary>
        /// Tan function.
        /// </summary>
        public static Fixed8p24 Tan(Fixed8p24 x) => (Fixed8p24)Math.Tan((double)x);

        /// <summary>
        /// Tan function.
        /// </summary>
        public Fixed8p24 Tan() => (Fixed8p24)Math.Tan((double)this);

        /// <summary>
        /// Tanh function.
        /// </summary>
        public static Fixed8p24 Tanh(Fixed8p24 x) => (Fixed8p24)Math.Tanh((double)x);

        /// <summary>
        /// Tanh function.
        /// </summary>
        public Fixed8p24 Tanh() => (Fixed8p24)Math.Tanh((double)this);

        /// <summary>
        /// Gets a random <see cref="Fixed8p24"/> from 0 (inclusive) to 1 (exclusive).
        /// </summary>
        public static Fixed8p24 Random(Generator g)
        {
            return new Fixed8p24(g.Int32(16777216));
        }
    }
}