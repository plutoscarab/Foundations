<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

/*
ValueTypes.cs

<#@ include file="../../License.txt" #>
*/

using System;
using System.Collections.Generic;

namespace Foundations.Types
{
    /// <summary>
    /// An integer power of a factor.
    /// </summary>
<#
Type("Factor", "<T>", true, true, "T:Value:The factor.", "int:Exponent:Exponent of the factor.");
#>

<#
Type("SmallDegreePolyGF2", "", true, true, "ulong:Coefficients:The coefficients of the polynomial.");
#>
    /// <summary>
    /// Helper functions for creating fast, high-quality GetHashCode implementations.
    /// </summary>
	public static class HashHelper
	{
        /// <summary>
        /// Mix a field's hash code into the containing object's hash code
        /// using h = HashHelper.Mixer(h + field.GetHashCode()) for each
        /// field sequentially.
        /// </summary>
		public static int Mixer(int h)
        {
            return (int)(((uint)h ^ ((uint)h >> 17)) * 0xC98F358D);

            // One pass through Mixer followed by one pass through Finisher
            // results in essentially 100% 1-bit avalanche as far as I can tell
            // by statistical testing. There are other values of shift and
            // multiply that do this. Some other choices:
            //
            //                                Longest   Fixed
            // Shift  Multiplier   Weight       Cycle  Points
            //    17  0xC98F358D  17 bits  0xFFFE8861       3  long cycle (this)
            //    16  0xB94C9657  17 bits  0xFF9701A2       1  no addl fixed points
            //    14  0x08112B29  10 bits  0x9145F4FE       1  low weight, no addl fixed
            //    14  0xF5F6ED4D  22 bits  0xFC34BD59       2  high weight, long cycle
            //    16  0xFADDD2EB  22 bits  0x84B68C7B       1  high weight, no addl fixed
            //    16  0x0115A68D  12 bits  0xFB5C8D7D       2  small multiplier
            //    18  0xAAAAAAA5  16 bits  0xC368EA65       1  nice! and inverse is 2D2D2D2D
            //    16  333539595   14 bits  0x6A4B397C       1  inverse is 533535395
            //    17  0x33D326E5  17 bits  0x2AF1D209       3  inverse 0x33D326ED (one bit off!)
            //    16  3333333733  17 bits  0x69416DC8       1  nice decimal pattern
        }

        /// <summary>
        /// Mix a non-null IEnumerable field's hash code into the containing 
        /// object's hash code using h = HashHelper.Mixer(h, field), using
        /// Mixer for each field sequentially.
        /// </summary>
        public static int Mixer<T>(int h, IEnumerable<T> items)
        {
            foreach (var item in items) h = Mixer(h + item.GetHashCode());
            return h;
        }

        /// <summary>
        /// Mix a non-null array field's hash code into the containing 
        /// object's hash code using h = HashHelper.Mixer(h, array), using
        /// Mixer for each field sequentially. Can also be used to
        /// mix in several fields of the same type, e.g. 
        /// h = HashHelper.Mixer(h, field1, field2, field3).
        /// </summary>
        public static int Mixer<T>(int h, params T[] items)
        {
            foreach (var item in items) h = Mixer(h + item.GetHashCode());
            return h;
        }

        /// <summary>
        /// After mixing in each field, use the Finisher to do a final mix
        /// to produce the final result.
        /// </summary>
        public static int Finisher(int h)
        {
            h = Mixer(h);
            return (int)((uint)h ^ ((uint)h >> 17));
        }
	}
}
<#+
void Type(string name, string generics, bool constructor, bool equatable, params string[] arglist)
{
	var args = arglist.Select(arg => arg.Split(':')).ToArray();
    var tname = name + generics;
    var sname = tname.Replace("<", "{").Replace(">", "}");
#>
	public partial struct <#= tname #><#= equatable ? $" : IEquatable<{tname}>" : "" #>
	{
<#+
	foreach (var arg in args)
	{
#>
		/// <summary><#= arg[2] #></summary>
		public readonly <#= arg[0] #> <#= arg[1] #>;

<#+
	}

    if (constructor)
    {
#>
		/// <summary>Create an instance of <see cref="<#= sname #>"/>.</summary>
		public <#= name #>(<#= string.Join(", ", args.Select(arg => arg[0] + " " + Param(arg[1]))) #>)
		{
<#+
	foreach (var arg in args)
	{
#>
			<#= arg[1] #> = <#= Param(arg[1]) #>;
<#+
	}
#>
		}
<#+ 
    }
    
    if (equatable) 
    { 
#>

		/// <summary>Implementation of <see	cref="object.GetHashCode"/>.</summary>
		public override int GetHashCode()
		{
			int h = <#= name.GetHashCode() #>;
<#+
	foreach (var arg in args)
	{
#>
			h = HashHelper.Mixer(h + <#= arg[1] #>.GetHashCode());
<#+
	}
#>
			return HashHelper.Finisher(h);
		}

		/// <summary>Implementation of <see cref="object.Equals(object)"/>.</summary>
		public override bool Equals(object obj)
		{
			return obj is <#= tname #> && Equals((<#= tname #>)obj);
		}

		/// <summary>Implementation of <see cref="IEquatable{U}.Equals"/>.</summary>
		public bool Equals(<#= tname #> other)
		{
<#+
	foreach (var arg in args)
	{
#>
			if (!<#= arg[1] #>.Equals(other.<#= arg[1] #>)) return false;
<#+
	}
#>
			return true;
		}

		/// <summary>Equality operator.</summary>
		public static bool operator ==(<#= tname #> a, <#= tname #> b)
		{
			return a.Equals(b);
		}

		/// <summary>Inequality operator.</summary>
		public static bool operator !=(<#= tname #> a, <#= tname #> b)
		{
			return !a.Equals(b);
		}
<#+ } #>
	}

<#+
}

string Param(string name)
{
	return char.ToLowerInvariant(name[0]) + name.Substring(1);
}
#>