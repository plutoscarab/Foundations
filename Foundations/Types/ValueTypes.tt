<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

/*
ValueTypes.cs

<#@ include file="../../License.txt" #>
*/

using System;

namespace Foundations.Types
{
    /// <summary>
    /// An integer power of a factor.
    /// </summary>
<#
Type("Factor", "<T>", true, true, "T:Value:The factor.", "int:Exponent:Exponent of the factor.");
#>

<#
Type("SmallDegreePolyGF2", "", true, true, "ulong:Coefficients:The coefficients of the polynomial.");
#>
	internal static class HashHelper
	{
		public static Func<int, int> Mixer = Functions.MixingFunctions.CreateInt32Mixer(new[] { 0, 1, 1, 8, 9, 9, 9, 8, 8, 1, 9, 9, 9, 1, 1, 9, 7, 2, 5, 3 });
	}
}
<#+
void Type(string name, string generics, bool constructor, bool equatable, params string[] arglist)
{
	var args = arglist.Select(arg => arg.Split(':')).ToArray();
    var tname = name + generics;
    var sname = tname.Replace("<", "{").Replace(">", "}");
#>
	public partial struct <#= tname #><#= equatable ? $" : IEquatable<{tname}>" : "" #>
	{
<#+
	foreach (var arg in args)
	{
#>
		/// <summary><#= arg[2] #></summary>
		public readonly <#= arg[0] #> <#= arg[1] #>;

<#+
	}

    if (constructor)
    {
#>
		/// <summary>Create an instance of <see cref="<#= sname #>"/>.</summary>
		public <#= name #>(<#= string.Join(", ", args.Select(arg => arg[0] + " " + Param(arg[1]))) #>)
		{
<#+
	foreach (var arg in args)
	{
#>
			<#= arg[1] #> = <#= Param(arg[1]) #>;
<#+
	}
#>
		}
<#+ 
    }
    
    if (equatable) 
    { 
#>

		/// <summary>Implementation of <see	cref="object.GetHashCode"/>.</summary>
		public override int GetHashCode()
		{
			int h = <#= name.GetHashCode() #>;
<#+
	foreach (var arg in args)
	{
#>
			h = HashHelper.Mixer(h + <#= arg[1] #>.GetHashCode());
<#+
	}
#>
			return h;
		}

		/// <summary>Implementation of <see cref="object.Equals(object)"/>.</summary>
		public override bool Equals(object obj)
		{
			return obj is <#= tname #> && Equals((<#= tname #>)obj);
		}

		/// <summary>Implementation of <see cref="IEquatable{U}.Equals"/>.</summary>
		public bool Equals(<#= tname #> other)
		{
<#+
	foreach (var arg in args)
	{
#>
			if (!<#= arg[1] #>.Equals(other.<#= arg[1] #>)) return false;
<#+
	}
#>
			return true;
		}

		/// <summary>Equality operator.</summary>
		public static bool operator ==(<#= tname #> a, <#= tname #> b)
		{
			return a.Equals(b);
		}

		/// <summary>Inequality operator.</summary>
		public static bool operator !=(<#= tname #> a, <#= tname #> b)
		{
			return !a.Equals(b);
		}
<#+ } #>
	}

<#+
}

string Param(string name)
{
	return char.ToLowerInvariant(name[0]) + name.Substring(1);
}
#>