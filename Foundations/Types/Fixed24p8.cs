
/*
Fixed24p8.cs

Copyright © 2016 Pluto Scarab Software. Most Rights Reserved.
Author: Bret Mulvey

This work is licensed under the Creative Commons Attribution-ShareAlike 4.0 International License. 
To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/4.0/.

THIS IS AN AUTO-GENERATED SOURCE FILE. DO NOT EDIT THIS FILE DIRECTLY.
INSTEAD, EDIT THE .tt FILE WITH THE SIMILAR NAME AND RE-RUN THE TEXT TEMPLATING
FILE GENERATOR. IF YOU SAVE THE FILE IN VISUAL STUDIO IT WILL DO THIS FOR YOU.
*/

using System;
using System.Globalization;
using Foundations.RandomNumbers;

namespace Foundations.Types
{
    /// <summary>
    /// Signed 32-bit number with 8 fractional bits and 24 integer bits.
    /// Represents values from -8388608 to 8388607.99609375 in increments of 0.00390625.
    /// </summary>
    public partial struct Fixed24p8 : IEquatable<Fixed24p8>, IComparable<Fixed24p8>
    {
        /// <summary>
        /// The constant value 0.
        /// </summary>
        public static readonly Fixed24p8 Zero = new Fixed24p8(0);

        /// <summary>
        /// The constant value 1.
        /// </summary>
        public static readonly Fixed24p8 One = new Fixed24p8(256);

        /// <summary>
        /// The constant value -8388608.
        /// </summary>
        public static readonly Fixed24p8 MinValue = new Fixed24p8(int.MinValue);

        /// <summary>
        /// The constant value 8388607.99609375.
        /// </summary>
        public static readonly Fixed24p8 MaxValue = new Fixed24p8(int.MaxValue);

        /// <summary>
        /// The constant value 0.00390625.
        /// </summary>
        public static readonly Fixed24p8 ε = new Fixed24p8(1);

        /// <summary>PI</summary>
        public static readonly Fixed24p8 π          = (Fixed24p8)3.1415926535897932384626433833;

        /// <summary>Base of natural logarithm.</summary>
        public static readonly Fixed24p8 e          = (Fixed24p8)2.7182818284590452353602874714;

        /// <summary>Golden ratio.</summary>
        public static readonly Fixed24p8 φ          = (Fixed24p8)1.6180339887498948482045868344;

        /// <summary>Euler–Mascheroni constant.</summary>
        public static readonly Fixed24p8 γ          = (Fixed24p8)0.5772156649015328606065120901;

        /// <summary>Square root of 2π.</summary>
        public static readonly Fixed24p8 Sqrt2π     = (Fixed24p8)2.5066282746310005024157652848;

        /// <summary>Square root of 5.</summary>
        public static readonly Fixed24p8 Sqrt5      = (Fixed24p8)2.2360679774997896964091736687;

        /// <summary>Square root of π.</summary>
        public static readonly Fixed24p8 Sqrtπ      = (Fixed24p8)1.7724538509055160272981674833;

        /// <summary>Square root of 3.</summary>
        public static readonly Fixed24p8 Sqrt3      = (Fixed24p8)1.7320508075688772935274463415;

        /// <summary>Square root of 2.</summary>
        public static readonly Fixed24p8 Sqrt2      = (Fixed24p8)1.4142135623730950488016887242;

        /// <summary>Square root of π/2.</summary>
        public static readonly Fixed24p8 SqrtHalfπ  = (Fixed24p8)1.2533141373155002512078826424;

        /// <summary>Base-2 logarithm of 10.</summary>
        public static readonly Fixed24p8 Lg10       = (Fixed24p8)3.3219280948873623478703194295;
   
        /// <summary>Natural logarithm of 10.</summary>
        public static readonly Fixed24p8 Ln10       = (Fixed24p8)2.3025850929940456840179914547;

        /// <summary>Base-2 logarithm of e.</summary>
        public static readonly Fixed24p8 LgE        = (Fixed24p8)1.4426950408889634073599246810;
   
        /// <summary>Natural logarithm of 2.</summary>
        public static readonly Fixed24p8 Ln2        = (Fixed24p8)0.6931471805599453094172321215;

        /// <summary>Base-10 logarithm of e.</summary>
        public static readonly Fixed24p8 LogE       = (Fixed24p8)0.4342944819032518276511289189;

        /// <summary>Base-10 logarithm of 2.</summary>
        public static readonly Fixed24p8 Log2       = (Fixed24p8)0.3010299956639811952137388947;

        internal readonly int value;

        private Fixed24p8(int value)
        {
            this.value = value;
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed24p8"/>.
        /// </summary>
        public static Fixed24p8 Parse(string s)
        {
            var d = double.Parse(s);
            return new Fixed24p8((int)(d * 256d + .5d * Math.Sign(d)));
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed24p8"/>.
        /// </summary>
        public static Fixed24p8 Parse(string s, IFormatProvider provider)
        {
            var d = double.Parse(s, provider);
            return new Fixed24p8((int)(d * 256d + .5d * Math.Sign(d)));
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed24p8"/>.
        /// </summary>
        public static Fixed24p8 Parse(string s, NumberStyles style)
        {
            var d = double.Parse(s, style);
            return new Fixed24p8((int)(d * 256d + .5d * Math.Sign(d)));
        }

        /// <summary>
        /// Parses a string representation of a <see cref="Fixed24p8"/>.
        /// </summary>
        public static Fixed24p8 Parse(string s, NumberStyles style, IFormatProvider provider)
        {
            var d = double.Parse(s, style, provider);
            return new Fixed24p8((int)(d * 256d + .5d * Math.Sign(d)));
        }

        /// <summary>
        /// Tries to parse a string representation of a <see cref="Fixed24p8"/>.
        /// </summary>
        public static bool TryParse(string s, out Fixed24p8 result)
        {
            double d;
            
            if (!double.TryParse(s, out d))
            {
                result = Zero;
                return false;
            }

            result = new Fixed24p8((int)(d * 256d + .5d * Math.Sign(d)));
            return true;
        }

        /// <summary>
        /// Tries to parse a string representation of a <see cref="Fixed24p8"/>.
        /// </summary>
        public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out Fixed24p8 result)
        {
            double d;
            
            if (!double.TryParse(s, style, provider, out d))
            {
                result = Zero;
                return false;
            }

            result = new Fixed24p8((int)(d * 256d + .5d * Math.Sign(d)));
            return true;
        }

        /// <summary>
        /// Implementation of <see cref="object.ToString"/>.
        /// </summary>
        public override string ToString()
        {
            return (value * 0.00390625d).ToString();
        }

        /// <summary>
        /// Gets a string representation of this <see cref="Fixed24p8"/>.
        /// </summary>
        public string ToString(string format)
        {
            return (value * 0.00390625d).ToString(format);
        }

        /// <summary>
        /// Gets a string representation of this <see cref="Fixed24p8"/>.
        /// </summary>
        public string ToString(IFormatProvider provider)
        {
            return (value * 0.00390625d).ToString(provider);
        }

        /// <summary>
        /// Gets a string representation of this <see cref="Fixed24p8"/>.
        /// </summary>
        public string ToString(string format, IFormatProvider provider)
        {
            return (value * 0.00390625d).ToString(format, provider);
        }

        /// <summary>
        /// Explicitly converts a <see cref="Decimal"/> to a Fixed24p8.
        /// </summary>
        public static explicit operator Fixed24p8(decimal value)
        {
            if (value < -8388608m || value > 8388607.99609375m) throw new ArgumentOutOfRangeException();
            return new Fixed24p8((int)(value * 256m + .5m * Math.Sign(value)));
        }

        /// <summary>
        /// Implicitly converts a Fixed24p8 to a <see cref="Decimal"/>.
        /// </summary>
        public static implicit operator decimal(Fixed24p8 value)
        {
            return value.value * 0.00390625m;
        }

        /// <summary>
        /// Explicitly converts a <see cref="Double"/> to a Fixed24p8.
        /// </summary>
        public static explicit operator Fixed24p8(double value)
        {
            if (value < -8388608d || value > 8388607.99609375d) throw new ArgumentOutOfRangeException();
            return new Fixed24p8((int)(value * 256d + .5d * Math.Sign(value)));
        }

        /// <summary>
        /// Implicitly converts a Fixed24p8 to a <see cref="Double"/>.
        /// </summary>
        public static implicit operator double(Fixed24p8 value)
        {
            return value.value * 0.00390625d;
        }

        /// <summary>
        /// Explicitly converts a Fixed24p8 to a <see cref="Single"/>.
        /// </summary>
        public static explicit operator float(Fixed24p8 value)
        {
            return value.value * 0.00390625f;
        }

        /// <summary>
        /// Implicitly converts a <see cref="Int64"/> to a Fixed24p8.
        /// </summary>
        public static implicit operator Fixed24p8(long value)
        {
            return new Fixed24p8((int)(value << 8));
        }

        /// <summary>
        /// Explicitly converts a Fixed24p8 to a <see cref="System.Int64"/>.
        /// </summary>
        public static explicit operator long(Fixed24p8 value)
        {
            return (long)(value.value >> 8);
        }

        /// <summary>
        /// Explicitly converts a Fixed24p8 to a <see cref="System.UInt64"/>.
        /// </summary>
        public static explicit operator ulong(Fixed24p8 value)
        {
            return (ulong)(value.value >> 8);
        }

        /// <summary>
        /// Explicitly converts a Fixed24p8 to a <see cref="System.Int32"/>.
        /// </summary>
        public static explicit operator int(Fixed24p8 value)
        {
            return (int)(value.value >> 8);
        }

        /// <summary>
        /// Explicitly converts a Fixed24p8 to a <see cref="System.UInt32"/>.
        /// </summary>
        public static explicit operator uint(Fixed24p8 value)
        {
            return (uint)(value.value >> 8);
        }

        /// <summary>
        /// Explicitly converts a Fixed24p8 to a <see cref="System.Int16"/>.
        /// </summary>
        public static explicit operator short(Fixed24p8 value)
        {
            return (short)(value.value >> 8);
        }

        /// <summary>
        /// Explicitly converts a Fixed24p8 to a <see cref="System.UInt16"/>.
        /// </summary>
        public static explicit operator ushort(Fixed24p8 value)
        {
            return (ushort)(value.value >> 8);
        }

        /// <summary>
        /// Explicitly converts a Fixed24p8 to a <see cref="System.SByte"/>.
        /// </summary>
        public static explicit operator sbyte(Fixed24p8 value)
        {
            return (sbyte)(value.value >> 8);
        }

        /// <summary>
        /// Explicitly converts a Fixed24p8 to a <see cref="System.Byte"/>.
        /// </summary>
        public static explicit operator byte(Fixed24p8 value)
        {
            return (byte)(value.value >> 8);
        }

        /// <summary>
        /// Implementation of <see cref="object.Equals(object)"/>.
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is Fixed24p8 && Equals((Fixed24p8)obj);
        }

        /// <summary>
        /// Implementation of <see cref="IEquatable{Fixed24p8}"/>.
        /// </summary>
        public bool Equals(Fixed24p8 other)
        {
            return value == other.value;
        }

        /// <summary>
        /// Equality operator.
        /// </summary>
        public static bool operator ==(Fixed24p8 a, Fixed24p8 b)
        {
            return a.value == b.value;
        }

        /// <summary>
        /// Inequality operator.
        /// </summary>
        public static bool operator !=(Fixed24p8 a, Fixed24p8 b)
        {
            return a.value != b.value;
        }

        /// <summary>
        /// Implementation of <see cref="object.GetHashCode"/>.
        /// </summary>
        public override int GetHashCode()
        {
            return value ^ 337147677;
        }

        /// <summary>
        /// Less-than operator.
        /// </summary>
        public static bool operator <(Fixed24p8 a, Fixed24p8 b)
        {
            return a.value < b.value;
        }

        /// <summary>
        /// Greater-than operator.
        /// </summary>
        public static bool operator >(Fixed24p8 a, Fixed24p8 b)
        {
            return a.value > b.value;
        }

        /// <summary>
        /// Less-than-or-equal operator.
        /// </summary>
        public static bool operator <=(Fixed24p8 a, Fixed24p8 b)
        {
            return a.value <= b.value;
        }

        /// <summary>
        /// Greater-than-or-equal operator.
        /// </summary>
        public static bool operator >=(Fixed24p8 a, Fixed24p8 b)
        {
            return a.value >= b.value;
        }

        /// <summary>
        /// Implementation of <see cref="IComparable{Fixed24p8}"/>.
        /// </summary>
        public int CompareTo(Fixed24p8 other)
        {
            return value.CompareTo(other.value);
        }

        /// <summary>
        /// Right-shift operator.
        /// </summary>
        public static Fixed24p8 operator >>(Fixed24p8 value, int shift)
        {
            return new Fixed24p8((int)(value.value >> shift));
        }

        /// <summary>
        /// Left-shift operator.
        /// </summary>
        public static Fixed24p8 operator <<(Fixed24p8 value, int shift)
        {
            return new Fixed24p8((int)(value.value << shift));
        }

        /// <summary>
        /// Gets the underlying bits that represent this <see cref="Fixed24p8"/>.
        /// </summary>
        public static int ToInt32Bits(Fixed24p8 value)
        {
            return value.value;
        }

        /// <summary>
        /// Creates a <see cref="Fixed24p8"/> from the underlying bit representation.
        /// </summary>
        public static Fixed24p8 FromInt32Bits(int value)
        {
            return new Fixed24p8(value);
        }

        /// <summary>
        /// Unary plus operator.
        /// </summary>
        public static Fixed24p8 operator +(Fixed24p8 value)
        {
            return value;
        }

        /// <summary>
        /// Unary minus operator.
        /// </summary>
        public static Fixed24p8 operator -(Fixed24p8 value)
        {
            return new Fixed24p8((int)(-value.value));
        }

        /// <summary>
        /// Increment operator.
        /// </summary>
        public static Fixed24p8 operator ++(Fixed24p8 value)
        {
            return value + One;
        }

        /// <summary>
        /// Decrement operator.
        /// </summary>
        public static Fixed24p8 operator --(Fixed24p8 value)
        {
            return value - One;
        }

        /// <summary>
        /// Addition operator.
        /// </summary>
        public static Fixed24p8 operator +(Fixed24p8 a, Fixed24p8 b)
        {
            return new Fixed24p8((int)(a.value + b.value));
        }

        /// <summary>
        /// Subtraction operator.
        /// </summary>
        public static Fixed24p8 operator -(Fixed24p8 a, Fixed24p8 b)
        {
            return new Fixed24p8((int)(a.value - b.value));
        }

        /// <summary>
        /// Multiplication operator.
        /// </summary>
        public static Fixed24p8 operator *(Fixed24p8 a, Fixed24p8 b)
        {
            return new Fixed24p8((int)(((long)a.value * (long)b.value + ((long)1 << 7)) >> 8));
        }

        /// <summary>
        /// Division operator.
        /// </summary>
        public static Fixed24p8 operator /(Fixed24p8 a, Fixed24p8 b)
        {
            return new Fixed24p8((int)((((long)a.value << 32) / b.value) >> 24));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed4p28"/> to a <see cref="Fixed24p8"/>.
        /// </summary>
        public static explicit operator Fixed24p8(Fixed4p28 other)
        {
            return new Fixed24p8((int)(other.value >> 20));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed8p24"/> to a <see cref="Fixed24p8"/>.
        /// </summary>
        public static explicit operator Fixed24p8(Fixed8p24 other)
        {
            return new Fixed24p8((int)(other.value >> 16));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed12p20"/> to a <see cref="Fixed24p8"/>.
        /// </summary>
        public static explicit operator Fixed24p8(Fixed12p20 other)
        {
            return new Fixed24p8((int)(other.value >> 12));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed16p16"/> to a <see cref="Fixed24p8"/>.
        /// </summary>
        public static explicit operator Fixed24p8(Fixed16p16 other)
        {
            return new Fixed24p8((int)(other.value >> 8));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed20p12"/> to a <see cref="Fixed24p8"/>.
        /// </summary>
        public static explicit operator Fixed24p8(Fixed20p12 other)
        {
            return new Fixed24p8((int)(other.value >> 4));
        }

        /// <summary>
        /// Explicitly cast a <see cref="Fixed28p4"/> to a <see cref="Fixed24p8"/>.
        /// </summary>
        public static explicit operator Fixed24p8(Fixed28p4 other)
        {
            if (other.value < -134217728 || other.value > 134217727) throw new ArgumentOutOfRangeException();
            return new Fixed24p8((int)(other.value << 4));
        }

        /// <summary>
        /// Gets the absolute value of a <see cref="Fixed24p8"/>.
        /// </summary>
        public static Fixed24p8 Abs(Fixed24p8 value)
        {
            return new Fixed24p8(Math.Abs(value.value));
        }

        /// <summary>
        /// Gets the absolute value of this <see cref="Fixed24p8"/>.
        /// </summary>
        public Fixed24p8 Abs()
        {
            return new Fixed24p8(Math.Abs(value));
        }

        /// <summary>
        /// Gets the greatest integer <see cref="Fixed24p8"/> that is not greater than the specified value.
        /// </summary>
        public static Fixed24p8 Floor(Fixed24p8 value)
        {
            return new Fixed24p8((int)(value.value & 0xFFFFFF00));
        }

        /// <summary>
        /// Gets the greatest integer <see cref="Fixed24p8"/> that is not greater than this value.
        /// </summary>
        public Fixed24p8 Floor()
        {
            return new Fixed24p8((int)(value & 0xFFFFFF00));
        }

        /// <summary>
        /// Gets the least integer <see cref="Fixed24p8"/> that is not less than the specified value.
        /// </summary>
        public static Fixed24p8 Ceiling(Fixed24p8 value)
        {
            return new Fixed24p8((int)((value.value + 0xFF) & 0xFFFFFF00));
        }

        /// <summary>
        /// Gets the least integer <see cref="Fixed24p8"/> that is not less than this value.
        /// </summary>
        public Fixed24p8 Ceiling()
        {
            return new Fixed24p8((int)((value + 0xFF) & 0xFFFFFF00));
        }

        /// <summary>
        /// Gets the nearest integer <see cref="Fixed24p8"/> to the specified value.
        /// </summary>
        public static Fixed24p8 Round(Fixed24p8 value)
        {
            return new Fixed24p8((int)((value.value + 0x80) & 0xFFFFFF00));
        }

        /// <summary>
        /// Gets the nearest integer <see cref="Fixed24p8"/> to this value.
        /// </summary>
        public Fixed24p8 Round()
        {
            return new Fixed24p8((int)((value + 0x80) & 0xFFFFFF00));
        }

        /// <summary>
        /// Gets the fractional portion of a <see cref="Fixed24p8"/>.
        /// </summary>
        public static Fixed24p8 Frac(Fixed24p8 value)
        {
            return new Fixed24p8((int)(Math.Abs(value.value) & 0xFF));
        }

        /// <summary>
        /// Gets the fractional portion of this <see cref="Fixed24p8"/>.
        /// </summary>
        public Fixed24p8 Frac()
        {
            return new Fixed24p8((int)(Math.Abs(value) & 0xFF));
        }

        /// <summary>
        /// Rounds a <see cref="Fixed24p8"/> toward zero.
        /// </summary>
        public static Fixed24p8 Truncate(Fixed24p8 value)
        {
            return value.value >= 0 ? Floor(value) : Ceiling(value);
        }

        /// <summary>
        /// Rounds this <see cref="Fixed24p8"/> toward zero.
        /// </summary>
        public Fixed24p8 Truncate()
        {
            return value >= 0 ? Floor() : Ceiling();
        }

        /// <summary>
        /// Gets the sign of a <see cref="Fixed24p8"/>.
        /// </summary>
        public static int Sign(Fixed24p8 value)
        {
            return Math.Sign(value.value);
        }

        /// <summary>
        /// Gets the sign of this <see cref="Fixed24p8"/>.
        /// </summary>
        public int Sign()
        {
            return Math.Sign(value);
        }

        /// <summary>
        /// Gets the lesser of two <see cref="Fixed24p8"/> values.
        /// </summary>
        public static Fixed24p8 Min(Fixed24p8 a, Fixed24p8 b)
        {
            return a.value < b.value ? a : b;
        }

        /// <summary>
        /// Gets the greater of two <see cref="Fixed24p8"/> values.
        /// </summary>
        public static Fixed24p8 Max(Fixed24p8 a, Fixed24p8 b)
        {
            return a.value > b.value ? a : b;
        }

        /// <summary>
        /// Acos function.
        /// </summary>
        public static Fixed24p8 Acos(Fixed24p8 x) => (Fixed24p8)Math.Acos((double)x);

        /// <summary>
        /// Acos function.
        /// </summary>
        public Fixed24p8 Acos() => (Fixed24p8)Math.Acos((double)this);

        /// <summary>
        /// Asin function.
        /// </summary>
        public static Fixed24p8 Asin(Fixed24p8 x) => (Fixed24p8)Math.Asin((double)x);

        /// <summary>
        /// Asin function.
        /// </summary>
        public Fixed24p8 Asin() => (Fixed24p8)Math.Asin((double)this);

        /// <summary>
        /// Atan function.
        /// </summary>
        public static Fixed24p8 Atan(Fixed24p8 x) => (Fixed24p8)Math.Atan((double)x);

        /// <summary>
        /// Atan function.
        /// </summary>
        public Fixed24p8 Atan() => (Fixed24p8)Math.Atan((double)this);

        /// <summary>
        /// Cos function.
        /// </summary>
        public static Fixed24p8 Cos(Fixed24p8 x) => (Fixed24p8)Math.Cos((double)x);

        /// <summary>
        /// Cos function.
        /// </summary>
        public Fixed24p8 Cos() => (Fixed24p8)Math.Cos((double)this);

        /// <summary>
        /// Cosh function.
        /// </summary>
        public static Fixed24p8 Cosh(Fixed24p8 x) => (Fixed24p8)Math.Cosh((double)x);

        /// <summary>
        /// Cosh function.
        /// </summary>
        public Fixed24p8 Cosh() => (Fixed24p8)Math.Cosh((double)this);

        /// <summary>
        /// Exp function.
        /// </summary>
        public static Fixed24p8 Exp(Fixed24p8 x) => (Fixed24p8)Math.Exp((double)x);

        /// <summary>
        /// Exp function.
        /// </summary>
        public Fixed24p8 Exp() => (Fixed24p8)Math.Exp((double)this);

        /// <summary>
        /// Log10 function.
        /// </summary>
        public static Fixed24p8 Log10(Fixed24p8 x) => (Fixed24p8)Math.Log10((double)x);

        /// <summary>
        /// Log10 function.
        /// </summary>
        public Fixed24p8 Log10() => (Fixed24p8)Math.Log10((double)this);

        /// <summary>
        /// Sin function.
        /// </summary>
        public static Fixed24p8 Sin(Fixed24p8 x) => (Fixed24p8)Math.Sin((double)x);

        /// <summary>
        /// Sin function.
        /// </summary>
        public Fixed24p8 Sin() => (Fixed24p8)Math.Sin((double)this);

        /// <summary>
        /// Sinh function.
        /// </summary>
        public static Fixed24p8 Sinh(Fixed24p8 x) => (Fixed24p8)Math.Sinh((double)x);

        /// <summary>
        /// Sinh function.
        /// </summary>
        public Fixed24p8 Sinh() => (Fixed24p8)Math.Sinh((double)this);

        /// <summary>
        /// Sqrt function.
        /// </summary>
        public static Fixed24p8 Sqrt(Fixed24p8 x) => (Fixed24p8)Math.Sqrt((double)x);

        /// <summary>
        /// Sqrt function.
        /// </summary>
        public Fixed24p8 Sqrt() => (Fixed24p8)Math.Sqrt((double)this);

        /// <summary>
        /// Tan function.
        /// </summary>
        public static Fixed24p8 Tan(Fixed24p8 x) => (Fixed24p8)Math.Tan((double)x);

        /// <summary>
        /// Tan function.
        /// </summary>
        public Fixed24p8 Tan() => (Fixed24p8)Math.Tan((double)this);

        /// <summary>
        /// Tanh function.
        /// </summary>
        public static Fixed24p8 Tanh(Fixed24p8 x) => (Fixed24p8)Math.Tanh((double)x);

        /// <summary>
        /// Tanh function.
        /// </summary>
        public Fixed24p8 Tanh() => (Fixed24p8)Math.Tanh((double)this);

        /// <summary>
        /// Gets a random <see cref="Fixed24p8"/> from 0 (inclusive) to 1 (exclusive).
        /// </summary>
        public static Fixed24p8 Random(Generator g)
        {
            return new Fixed24p8(g.Int32(256));
        }
    }
}