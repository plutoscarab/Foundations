<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System.Runtime.InteropServices;

namespace Foundations.Types
{
    /// <summary>
    /// A union type containing overlayed representations of most CLR primitive types.
    /// </summary>
    [StructLayout(LayoutKind.Explicit)]
	public partial struct ValueUnion
    {
<#
Make(typeof(long));
Make(typeof(ulong));
Make(typeof(int));
Make(typeof(uint));
Make(typeof(short));
Make(typeof(ushort));
Make(typeof(sbyte));
Make(typeof(byte));
Make(typeof(char));
Make(typeof(float));
Make(typeof(double));
#>
    }
}
<#+
void Make(Type t)
{
    int n = t == typeof(char) ? 2 : System.Runtime.InteropServices.Marshal.SizeOf(t);

    for (int i = 0; i < 8 / n; i++)
    {
#>
        /// <summary>
        /// Instance <#= i #> of <see cref="<#= t.Name #>"/> field.
        /// </summary>
        [FieldOffset(<#= i * n #>)]
        public <#= t.Name #> <#= t.Name #>_<#= i #>;

<#+
    }
}
#>