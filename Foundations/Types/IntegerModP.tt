<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

/*
IntegerModP.cs

<#@ include file="../../License.txt" #>
*/

using System;

namespace Foundations.Types
{
<#
var primes = new[] { 2, 3, 5, 7, };

(from p in primes 
 from w in Enumerable.Range(1, p == 2 ? 6 : 1) 
 select Tuple.Create(w, Math.Pow(p, w)))
    .Where(t => t.Item2 < 100)
    .Select(t => Tuple.Create(t.Item1, (int)Math.Round(t.Item2)))
    .Distinct()
    .OrderBy(t => t.Item2)
    .ToList()
    .ForEach(Make);
#>
}
<#+
void Make(Tuple<int, int> t)
{
    int w = t.Item1;
    int p = t.Item2;
    string T = "Z" + p;
    string mod = (p & (p - 1)) == 0 ? $"& 0x{p-1:X}" : $"% {p}";
    var mul = new int[p * p];
    var inv = new int[p];
    var div = new int[p * p];
    var rem = new int[p * p];

    int index = 0;
    for (int i = 0; i < p; i++)
    for (int j = 0; j < p; j++)
    {
        mul[index] = (i * j) % p;
        if (mul[index] == 1)
            if (inv[i] == 0) inv[i] = j; 
            else inv[i] = -1;
        div[index] = j == 0 ? 0 : i / j;
        rem[index] = j == 0 ? 0 : i % j;
        index++;
    }
    for (int i = 0; i < p; i++)
        if (inv[i] == -1) inv[i] = 0;
#>
    /// <summary>
    /// Integer modulo <#= p #>.
    /// </summary>
<#+ if (w > 1) { #>
    /// <remarks>
    /// Note that this is not isomorphic to a finite field because <#= p #> is composite.
    /// </remarks>
<#+ } #>
    public struct <#= T #> : IEquatable<<#= T #>>
    {
        private static readonly byte[] mul = new byte[] { <#+ foreach (var i in mul) Write($"{i},"); #> };
        private static readonly byte[] inv = new byte[] { <#+ foreach (var i in inv) Write($"{i},"); #> };
        private static readonly byte[] div = new byte[] { <#+ foreach (var i in div) Write($"{i},"); #> };
        private static readonly byte[] rem = new byte[] { <#+ foreach (var i in rem) Write($"{i},"); #> };

        /// <summary>
        /// The numeric value of the <see cref="<#= T #>"/>.
        /// </summary>
        public readonly int Value;

        /// <summary>
        /// Creates a <see cref="<#= T #>"/>.
        /// </summary>
        public <#= T #>(int value)
        {
            Value = value <#= mod #>;
<#+ if ((p & (p - 1)) != 0) { #>
            if (Value < 0) Value += <#= p #>;
<#+ } #>
        }

        private <#= T #>(bool dummy, int value)
        { Value = value; }

        /// <summary>
        /// Explicitly converts a <see cref="<#= T #>"/> to a <see cref="System.Int32"/>.
        /// </summary>
        public static explicit operator int(<#= T #> value)
        { return value.Value; }

        /// <summary>
        /// Implicitly converts a <see cref="System.Int32"/> to a <see cref="<#= T #>"/>.
        /// </summary>
        public static implicit operator <#= T #>(int value)
        { return new <#= T #>(value); }

        /// <summary>
        /// </summary>
        public override string ToString()
        { return Value.ToString(); }
        
        /// <summary>
        /// </summary>
        public override int GetHashCode()
        { return Value.GetHashCode(); }

        /// <summary>
        /// </summary>
        public override bool Equals(object obj)
        { return obj is <#= T #> && Equals((<#= T #>)obj); }

        /// <summary>
        /// </summary>
        public bool Equals(<#= T #> other)
        { return Value == other.Value; }

        /// <summary>
        /// </summary>
        public static bool operator ==(<#= T #> a, <#= T #> b)
        { return a.Equals(b); }

        /// <summary>
        /// </summary>
        public static bool operator !=(<#= T #> a, <#= T #> b)
        { return !a.Equals(b); }

        /// <summary>
        /// </summary>
        public static <#= T #> operator +(<#= T #> a, <#= T #> b)
        {
            var result = a.Value + b.Value;
            if (result >= <#= p #>) result -= <#= p #>;
            return new <#= T #>(false, result);
        }

        /// <summary>
        /// </summary>
        public <#= T #> Add(<#= T #> other)
        {
            return this + other;
        }

        /// <summary>
        /// </summary>
        public static <#= T #> operator -(<#= T #> a, <#= T #> b)
        {
            var result = a.Value + b.Value;
            if (result < 0) result += <#= p #>;
            return new <#= T #>(false, result);
        }

        /// <summary>
        /// </summary>
        public <#= T #> Subtract(<#= T #> other)
        {
            return this - other;
        }

        /// <summary>
        /// </summary>
        public static <#= T #> operator -(<#= T #> value)
        {
            if (value.Value == 0) return value;
            return new <#= T #>(false, <#= p #> - value.Value);
        }

        /// <summary>
        /// </summary>
        public static <#= T #> operator *(<#= T #> a, <#= T #> b)
        {
            return new <#= T #>(false, mul[a.Value * <#= p #> + b.Value]);
        }

        /// <summary>
        /// </summary>
        public <#= T #> Multiply(<#= T #> other)
        {
            return this * other;
        }

        /// <summary>
        /// </summary>
        public static <#= T #> operator /(<#= T #> a, <#= T #> b)
        {
            return new <#= T #>(false, div[a.Value * <#= p #> + b.Value]);
        }

        /// <summary>
        /// </summary>
        public <#= T #> Divide(<#= T #> other)
        {
            return this / other;
        }

        /// <summary>
        /// </summary>
        public static <#= T #> operator %(<#= T #> a, <#= T #> b)
        {
            return new <#= T #>(false, rem[a.Value * <#= p #> + b.Value]);
        }

        /// <summary>
        /// </summary>
        public <#= T #> Modulo(<#= T #> other)
        {
            return this % other;
        }

        /// <summary>
        /// </summary>
        public static <#= T #> DivRem(<#= T #> a, <#= T #> b, out <#= T #> r)
        {
            int index = a.Value * <#= p #> + b.Value;
            r = new <#= T #>(false, rem[index]);
            return new <#= T #>(false, div[index]);
        }

        /// <summary>
        /// </summary>
        public <#= T #> Inverse()
        {
            return Inverse(this);
        }

        /// <summary>
        /// </summary>
        public static <#= T #> Inverse(<#= T #> value)
        {
            var result = inv[value.Value];
            if (result == 0) throw new DivideByZeroException();
            return new <#= T #>(false, div[result]);
        }

        /// <summary>
        /// </summary>
        public static <#= T #> Pow(<#= T #> value, int exponent)
        {
            if (exponent == 0) return 1;
            var result = 1;
            var b = value.Value;
            var e = Math.Abs(exponent);

            while (e > 0)
            {
                if ((e & 1) == 1)
                {
                    result = (result * b) <#= mod #>;
                }

                e >>= 1;
                b = (b * b) <#= mod #>;
            }

            if (exponent < 0) 
            {
                result = inv[result];
                if (result == 0) throw new DivideByZeroException();
            }

            return new <#= T #>(false, result);
        }

<#+ if ((p & (p - 1)) == 0) { #>
        /// <summary>
        /// </summary>
        public static <#= T #> operator &(<#= T #> a, <#= T #> b)
        {
            return new <#= T #>(false, a.Value & b.Value);
        }

        /// <summary>
        /// </summary>
        public <#= T #> And(<#= T #> other)
        {
            return this & other;
        }

        /// <summary>
        /// </summary>
        public static <#= T #> operator |(<#= T #> a, <#= T #> b)
        {
            return new <#= T #>(false, a.Value | b.Value);
        }

        /// <summary>
        /// </summary>
        public <#= T #> Or(<#= T #> other)
        {
            return this | other;
        }

        /// <summary>
        /// </summary>
        public static <#= T #> operator ^(<#= T #> a, <#= T #> b)
        {
            return new <#= T #>(false, a.Value ^ b.Value);
        }

        /// <summary>
        /// </summary>
        public <#= T #> Xor(<#= T #> other)
        {
            return this ^ other;
        }

        /// <summary>
        /// </summary>
        public static <#= T #> operator ~(<#= T #> value)
        {
            return new <#= T #>(false, ~value.Value);
        }

        /// <summary>
        /// </summary>
        public <#= T #> Not()
        {
            return ~this;
        }

<#+} #>
    }

<#+
}
#>