<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

/*
Histogram.cs

<#@ include file="../../License.txt" #>
*/

using System;
using System.Collections.Generic;

namespace Foundations.Statistics
{
    /// <summary>
    /// Counts the number of occurrances of each value.
    /// </summary>
    public static partial class Histogram
    {
<#
    Histogram("sbyte");
    Histogram("byte");
    Histogram("short");
    Histogram("ushort");
    Histogram("int");
    Histogram("uint");
    Histogram("long");
    Histogram("ulong");
    Histogram("float");
    Histogram("double");
    Histogram("decimal");
    Histogram("char");
#>

        /// <summary>
        /// Count the number of occurrances in each bin. Each value is assigned to a bin using
        /// the binning function.
        /// </summary>
        public static int[] From<T>(IEnumerable<T> items, Func<T, int> binningFunction)
        {
            return From(items, null, binningFunction);
        }

        /// <summary>
        /// Count the number of occurrances in each bin. Each value is assigned to a bin using
        /// the binning function.
        /// </summary>
        public static int[] From<T>(IEnumerable<T> items, int? binCount, Func<T, int> binningFunction)
        {
            if (items == null)
                throw new ArgumentNullException(nameof(items));

            if (binningFunction == null)
                throw new ArgumentNullException(nameof(binningFunction));

            var hist = new int[binCount == null ? 0 : binCount.Value];

            foreach (var item in items)
            {
                int value = binningFunction(item);

                if (value < 0)
                    throw new NotSupportedException("Result of binning function must be non-negative.");

                if (hist.Length <= value)
                {
                    if (binCount == null)
                    {
                        Array.Resize(ref hist, value + 1);
                    }
                    else
                    {
                        throw new NotSupportedException("Result of binning function must be less than bin count.");
                    }
                }

                hist[value]++;
            }

            return hist;
        }
    }
}
<#+
void Histogram(string T)
{
#>
        /// <summary>
        /// Count the number of occurrances of each non-negative value.
        /// </summary>
        public static int[] From(IEnumerable<<#= T #>> items)
        {
            return From(items, null, Convert.ToInt32);
        }

        /// <summary>
        /// Count the number of occurrances of each value in the range [0, binCount).
        /// </summary>
        public static int[] From(IEnumerable<<#= T #>> items, int binCount)
        {
            return From(items, binCount, Convert.ToInt32);
        }

        /// <summary>
        /// Count the number of occurrances in each bin. The bins are as equally-sized as possible
        /// according to the range of values found in the list.
        /// </summary>
        public static int[] From(IList<<#= T #>> list, int binCount, out <#= T #> min, out <#= T #> max)
        {
            if (list == null)
                throw new ArgumentNullException(nameof(list));

            min = <#= T #>.MaxValue;
            max = <#= T #>.MinValue;

            foreach (var item in list)
            {
                if (item < min) min = item;
                if (item > max) max = item;
            }

            var range = max - min + (int)1;
            var minClosure = min;
<#+ if (T == "decimal" || T == "double" || T == "float" ) { #>
            return From(list, binCount, _ => Convert.ToInt32(Math.Floor(((_ - minClosure) * (<#= T #>)binCount + range - 1) / range)));
<#+ } else { #>
            return From(list, binCount, _ => Convert.ToInt32(((_ - minClosure) * (<#= T #>)binCount + range - 1) / range));
<#+ } #>
        }

        /// <summary>
        /// Count the number of occurrances in each bin.
        /// </summary>
        public static int[] From(IEnumerable<<#= T #>> items, int binCount, <#= T #> max)
        {
            if (max == <#= T #>.MaxValue)
                throw new ArgumentOutOfRangeException(nameof(max));

<#+ if (T == "decimal" || T == "double" || T == "float" ) { #>
            return From(items, binCount, _ => Convert.ToInt32(Math.Floor((_ * (<#= T #>)binCount + max) / (max + 1))));
<#+ } else { #>
            return From(items, binCount, _ => Convert.ToInt32((_ * (<#= T #>)binCount + max) / (max + 1)));
<#+ } #>
        }

<#+
}
#>