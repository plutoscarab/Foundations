<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

namespace Foundations
{<#
Make("Constants", "double", "System.Double", 
    s => double.Parse(s).ToString("R"), 
    s => ((double)(1 / decimal.Parse(s))).ToString("R"));

Make("DecimalConstants", "decimal", "System.Decimal", 
    s => decimal.Parse(s).ToString() + "m", 
    s => (1 / decimal.Parse(s)).ToString() + "m");

Make("SingleConstants", "float", "System.Single", 
    s => float.Parse(s).ToString("R") + "f",
    s => ((float)(1 / decimal.Parse(s))).ToString("R") + "f");

Make("QuadConstants", "Quad", "Foundations.Quad", 
    s => "Quad.Parse(\"" + s + "\")",
    s => "1 / Quad.Parse(\"" + s + "\")");
#>
}
<#+
void Make(string className, string typeName, string systemType, Func<string, object> toObject, Func<string, object> recip)
{
    var consts = new[] {
        "PI, π, 3.1415926535897932384626433832795028841971693993751058209749445923",
        "PI, PI, 3.1415926535897932384626433832795028841971693993751058209749445923",
        "2π, Twoπ, 6.2831853071795864769252867665590057683943387987502116419498891846",
        "π/2, Halfπ, 1.5707963267948966192313216916397514420985846996875529104874722961",
        "Base of natural logarithm., e, 2.7182818284590452353602874713526624977572470936999595749669676277",
        "Golden ratio., φ, 1.6180339887498948482045868343656381177203091798057628621354486227",
        "Euler–Mascheroni constant., γ, 0.5772156649015328606065120900824024310421593359399235988057672348",
        "Square root of 2π., Sqrt2π, 2.5066282746310005024157652848110452530069867406099383166299235763",
        "Square root of 5., Sqrt5, 2.2360679774997896964091736687312762354406183596115257242708972454",
        "Square root of π., Sqrtπ, 1.7724538509055160272981674833411451827975494561223871282138077898",
        "Square root of 3., Sqrt3, 1.7320508075688772935274463415058723669428052538103806280558069794",
        "Square root of 2., Sqrt2, 1.4142135623730950488016887242096980785696718753769480731766797379",
        "Square root of π/2., SqrtHalfπ, 1.2533141373155002512078826424055226265034933703049691583149617881",
        "Base-2 logarithm of 10., Lg10, 3.3219280948873623478703194294893901758648313930245806120547563958",
        "Natural logarithm of 10., Ln10, 2.3025850929940456840179914546843642076011014886287729760333279009",
        "Base-2 logarithm of e., LgE, 1.4426950408889634073599246810018921374266459541529859341354494069",
        "Natural logarithm of 2., Ln2, 0.6931471805599453094172321214581765680755001343602552541206800094",
        "Base-10 logarithm of e., LogE, 0.4342944819032518276511289189166050822943970058036665661144537831",
        "Base-10 logarithm of 2., Log2, 0.3010299956639811952137388947244930267681898814621085413104274611",
    };
#>

    /// <summary>
    /// Common mathematical constants as <see cref="<#= systemType #>"/> values.
    /// </summary>
    public static class <#= className #>
    {
<#+
    var type = Type.GetType(systemType);
    object instance = null;
    string con;

    if (type == null)
    {
        con = "static readonly ";
    }
    else
    {
        con = "const ";
    }

    foreach (var c in consts)
    {
        var t = c.Split(',');
#>
        /// <summary><#= t[0].Trim() #></summary>
        public <#= con #><#= typeName #> <#= t[1].Trim().PadRight(10) #> = <#= toObject(t[2].Trim()) #>;

<#+        
    }

    foreach (var c in consts)
    {
        var t = c.Split(',');
        if (t[1].Trim() == "e") t[1] = "E";
#>
        /// <summary><#= t[0].Trim() #></summary>
        public <#= con #><#= typeName #> Over<#= t[1].Trim().PadRight(10) #> = <#= recip(t[2].Trim()) #>;

<#+        
    }
#>
    }
<#+
}
#>