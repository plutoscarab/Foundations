<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

/*
Constants.cs

<#@ include file="../License.txt" #>

*/

using System;

namespace Foundations
{<#
Make("Constants", "double", "d", "Double");
Make("DecimalConstants", "decimal", "m", "Decimal");
Make("SingleConstants", "float", "f", "Single");
#>
}
<#+
void Make(string className, string typeName, string suffix, string systemType)
{
    var consts = new[] {
        "PI, π, 3.1415926535897932384626433833",
        "2π, Twoπ, 6.2831853071795864769252867666",
        "π/2, Halfπ, 1.5707963267948966192313216916",
        "Base of natural logarithm., e, 2.7182818284590452353602874714",
        "Golden ratio., φ, 1.6180339887498948482045868344",
        "Euler–Mascheroni constant., γ, 0.5772156649015328606065120901",
        "Square root of 2π., Sqrt2π, 2.5066282746310005024157652848",
        "Square root of 5., Sqrt5, 2.2360679774997896964091736687",
        "Square root of π., Sqrtπ, 1.7724538509055160272981674833",
        "Square root of 3., Sqrt3, 1.7320508075688772935274463415",
        "Square root of 2., Sqrt2, 1.4142135623730950488016887242",
        "Square root of π/2., SqrtHalfπ, 1.2533141373155002512078826424",
        "Base-2 logarithm of 10., Lg10, 3.3219280948873623478703194295",
        "Natural logarithm of 10., Ln10, 2.3025850929940456840179914547",
        "Base-2 logarithm of e., LgE, 1.4426950408889634073599246810",
        "Natural logarithm of 2., Ln2, 0.6931471805599453094172321215",
        "Base-10 logarithm of e., LogE, 0.4342944819032518276511289189",
        "Base-10 logarithm of 2., Log2, 0.3010299956639811952137388947",
    };
#>

    /// <summary>
    /// Common mathematical constants as <see cref="System.<#= systemType #>"/> values.
    /// </summary>
    public static class <#= className #>
    { 
<#+
    foreach (var c in consts)
    {
        var t = c.Split(',');
#>
        /// <summary><#= t[0].Trim() #></summary>
        public const <#= typeName #> <#= t[1].Trim().PadRight(10) #> = <#= t[2].Trim() #><#= suffix #>;

<#+        
    }

    foreach (var c in consts)
    {
        var t = c.Split(',');
        if (t[1].Trim() == "e") t[1] = "E";
#>
        /// <summary><#= t[0].Trim() #></summary>
        public const <#= typeName #> Over<#= t[1].Trim().PadRight(10) #> = <#= 1 / decimal.Parse(t[2]) #><#= suffix #>;

<#+        
    }
#>
    }
<#+
}
#>