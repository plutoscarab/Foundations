<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using static Foundations.Constants;
using static Foundations.Functions.Elliptic;
using static Foundations.Functions.Theta;

namespace Foundations.Functions
{
    /// <summary>
    /// Jacobi elliptic functions.
    /// </summary>
    public static partial class Jacobi
    {
<#
MakeJ("Complex", "Complex");
MakeJ("Double", "Math");
MakeJ("ComplexQuad", "ComplexQuad");
MakeJ("Quad", "Quad");
#>
    }
}
<#+
public void MakeJ(string T, string math)
{
    var zero = T.Contains("Quad") ? "(Quad)0" : "(double)0";
#>

        /// <summary>
        /// Jacobi elliptic cn.
        /// </summary>
        /// <param name="φ">Amplitude.</param>
        /// <param name="m">Parameter.</param>
        public static <#= T #> cn(<#= T #> φ, double m)
        {
            double K, q = Nome(m, out K);
            <#= T #> ζ = φ * (π / (2 * K));
            return (θ4(<#= zero #>, q) / θ2(<#= zero #>, q)) * (θ2(ζ, q) / θ4(ζ, q));
        }

        /// <summary>
        /// Gets a function that computes the Jacobi elliptic cn for parameter m.
        /// Use this instead of <see cref="cn(<#= T #>, double)"/> if the same value of m is used many times.
        /// </summary>
        /// <param name="m">Parameter.</param>
        public static Func<<#= T #>, <#= T #>> cn<#= T #>(double m)
        {
            double kf, f;
            Func<<#= T #>, <#= T #>> t2, t4;

            {
                double K, q = Nome(m, out K);
                kf = π / (2 * K);
                f = θ4(<#= zero #>, q) / θ2(<#= zero #>, q);
                t2 = θ2<#= T #>ForNome(q);
                t4 = θ4<#= T #>ForNome(q);
            }

            return φ => 
            {
                <#= T #> ζ = kf * φ;
                return f * (t2(ζ) / t4(ζ));
            };
        }

        /// <summary>
        /// Jacobi elliptic sn.
        /// </summary>
        /// <param name="φ">Amplitude.</param>
        /// <param name="m">Parameter.</param>
        public static <#= T #> sn(<#= T #> φ, double m)
        {
            double K, q = Nome(m, out K);
            <#= T #> ζ = φ * (π / (2 * K));
            return (θ3(<#= zero #>, q) / θ2(<#= zero #>, q)) * (θ1(ζ, q) / θ4(ζ, q));
        }

        /// <summary>
        /// Gets a function that computes the Jacobi elliptic sn for parameter m.
        /// Use this instead of <see cref="sn(<#= T #>, double)"/> if the same value of m is used many times.
        /// </summary>
        /// <param name="m">Parameter.</param>
        public static Func<<#= T #>, <#= T #>> sn<#= T #>(double m)
        {
            double kf, f;
            Func<<#= T #>, <#= T #>> t1, t4;

            {
                double K, q = Nome(m, out K);
                kf = π / (2 * K);
                f = θ3(<#= zero #>, q) / θ2(<#= zero #>, q);
                t1 = θ1<#= T #>ForNome(q);
                t4 = θ4<#= T #>ForNome(q);
            }

            return φ =>
            {
                <#= T #> ζ = kf * φ;
                return f * (t1(ζ) / t4(ζ));
            };
        }

        /// <summary>
        /// Jacobi elliptic dn.
        /// </summary>
        /// <param name="φ">Amplitude.</param>
        /// <param name="m">Parameter.</param>
        public static <#= T #> dn(<#= T #> φ, double m)
        {
            double K, q = Nome(m, out K);
            <#= T #> ζ = φ * (π / (2 * K));
            return (θ4(<#= zero #>, q) / θ3(<#= zero #>, q)) * (θ3(ζ, q) / θ4(ζ, q));
        }

        /// <summary>
        /// Gets a function that computes the Jacobi elliptic dn for parameter m.
        /// Use this instead of <see cref="dn(<#= T #>, double)"/> if the same value of m is used many times.
        /// </summary>
        /// <param name="m">Parameter.</param>
        public static Func<<#= T #>, <#= T #>> dn<#= T #>(double m)
        {
            double kf, f;
            Func<<#= T #>, <#= T #>> t3, t4;

            {
                double K, q = Nome(m, out K);
                kf = π / (2 * K);
                f = θ4(<#= zero #>, q) / θ3(<#= zero #>, q);
                t3 = θ3<#= T #>ForNome(q);
                t4 = θ4<#= T #>ForNome(q);
            }

            return φ =>
            {
                <#= T #> ζ = kf * φ;
                return f * (t3(ζ) / t4(ζ));
            };
        }

        /// <summary>
        /// Jacobi elliptic sn, cn, dn.
        /// </summary>
        public struct Jacobi<#= T #>
        {
            /// <summary>Jacobi elliptic sn.</summary>
            public readonly <#= T #> sn;

            /// <summary>Jacobi elliptic cn.</summary>
            public readonly <#= T #> cn;

            /// <summary>Jacobi elliptic dn.</summary>
            public readonly <#= T #> dn;

            /// <summary>Constructor.</summary>
            public Jacobi<#= T #>(<#= T #> sn, <#= T #> cn, <#= T #> dn)
            {
                this.sn = sn; this.cn = cn; this.dn = dn;
            }
        }

        /// <summary>
        /// Compute the Jacobi elliptic cn, sn, and dn functions.
        /// This is faster than calling each function individually if you need two or all three of the results.
        /// </summary>
        /// <param name="φ">Amplitude.</param>
        /// <param name="m">Parameter.</param>
        public static Jacobi<#= T #> Multi(<#= T #> φ, double m)
        {
            double K, q = Nome(m, out K);

            <#= T #> 
                ζ = φ * (π / (2 * K)),
                z2 = θ2(<#= zero #>, q),
                z3 = θ3(<#= zero #>, q),
                z4 = θ4(<#= zero #>, q),
                t4 = θ4(ζ, q);

            return new Jacobi<#= T #>(
                (z3 / z2) * (θ1(ζ, q) / t4),
                (z4 / z2) * (θ2(ζ, q) / t4),
                (z4 / z3) * (θ3(ζ, q) / t4));
        }

        /// <summary>
        /// Gets a function that computes the Jacobi elliptic cn, sn, and dn.
        /// This is faster than calling each function individually if you need two or all three of the results.
        /// Use this instead of <see cref="Multi(<#= T #>, double)"/> if the same value of m is used many times.
        /// </summary>
        public static Func<<#= T #>, Jacobi<#= T #>> Multi<#= T #>(double m)
        {
            double kf, z32, z42, z43;
            Func<<#= T #>, <#= T #>> t1, t2, t3, t4;

            {
                double K, q = Nome(m, out K);
                kf = π / (2 * K);
                t1 = θ1<#= T #>ForNome(q);
                t2 = θ2<#= T #>ForNome(q);
                t3 = θ3<#= T #>ForNome(q);
                t4 = θ4<#= T #>ForNome(q);

                double
                    z2 = θ2(<#= zero #>, q),
                    z3 = θ3(<#= zero #>, q),
                    z4 = θ4(<#= zero #>, q);

                z32 = z3 / z2;
                z42 = z4 / z2;
                z43 = z4 / z3;
            }

            return φ => 
            {
                <#= T #> 
                    ζ = kf * φ,
                    d4 = t4(ζ);

                return new Jacobi<#= T #>(
                    z32 * (t1(ζ) / d4),
                    z42 * (t2(ζ) / d4),
                    z43 * (t3(ζ) / d4)
                );
            };
        }

        /// <summary>
        /// Jacobi elliptic amplitude.
        /// </summary>
        public static <#= T #> am(<#= T #> u, double m)
        {
            return <#= math #>.Asin(sn(u, m));
        }

        /// <summary>
        /// Gets a function that computes the Jacobi elliptic amplitude function for parameter m.
        /// Use this instead of <see cref="am(<#= T #>, double)"/> if you use the same value of m many times.
        /// </summary>
        public static Func<<#= T #>, <#= T #>> am<#= T #>(double m)
        {
            var fsn = sn<#= T #>(m);
            return u => <#= math #>.Asin(fsn(u));
        }

        /// <summary>
        /// Jacobi elliptic inverse cn.
        /// </summary>
        public static <#= T #> arccn(<#= T #> z, double m)
        {
            return F(<#= math #>.Acos(z), m);
        }

        /// <summary>
        /// Gets a function that computes the Jacobi elliptic inverse cn for parameter m.
        /// Use this instead of <see cref="arccn(<#= T #>, double)"/> if you use the same value of m many times.
        /// </summary>
        public static Func<<#= T #>, <#= T #>> arccn<#= T #>(double m)
        {
            var ef = F<#= T #>(m);
            return z => ef(<#= math #>.Acos(z));
        }

        /// <summary>
        /// Jacobi elliptic arcsine.
        /// </summary>
        public static <#= T #> arcsn(<#= T #> z, double m)
        {
            return F(<#= math #>.Asin(z), m);
        }

        /// <summary>
        /// Gets a function that computes the Jacobi elliptic inverse sn for parameter m.
        /// Use this instead of <see cref="arcsn(<#= T #>, double)"/> if you use the same value of m many times.
        /// </summary>
        public static Func<<#= T #>, <#= T #>> arcsn<#= T #>(double m)
        {
            var ef = F<#= T #>(m);
            return z => ef(<#= math #>.Asin(z));
        }
<#+
}
#>