<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using static Foundations.Constants;

namespace Foundations.Functions
{
    /// <summary>
    /// Miscellaneous special functions.
    /// </summary>
	public static class Special
	{
<#
MakeErf("Double", "Math", "", ".Real");
MakeErf("Complex", "Complex", ".Real", "");
#>
    }
}
<#+
void MakeErf(string T, string math, string real, string asReal)
{
#>

		static <#= T #> ErfSmallZ(<#= T #> z)
		{
			<#= T #>
                sum = z,
			    term = z,
			    zz = -z * z;

			int n = 0;

			while (true)
			{
				term *= zz / ++n;
				<#= T #> old = sum;
    			sum += term / (2 * n + 1);

				if (sum == old)
					break;
			}

			return sum * 2 / Sqrtπ;
		}

		static <#= T #> ErfLargeZ(<#= T #> z)
		{
			<#= T #>
                zz = z * z,
                t = 0;

			for (int k = 60; k >= 1; k--)
			{
				t = (k - 0.5) / (1 + k / (zz + t));
			}

			return (1 - <#= math #>.Exp(<#= math #>.Log(z) - zz) / (t + zz) / Sqrtπ) * Math.Sign(z<#= real #>);
		}

		/// <summary>
		/// Error function.
		/// </summary>
		public static <#= T #> Erf(<#= T #> z)
		{
<#+ Optimization(T, "z", "Erf"); #>
			if (<#= math #>.Abs(z) < 6.5)
				return ErfSmallZ(z);

			return ErfLargeZ(z);
		}

        /// <summary>
        /// Complementary error function.
        /// </summary>
        public static <#= T #> Erfc(<#= T #> z)
        {
<#+ Optimization(T, "z", "Erfc"); #>
            return 1 - Erf(z);
        }

        /// <summary>
        /// Imaginary error function.
        /// </summary>
        public static <#= T #> Erfi(<#= T #> z)
        {
<#+ Optimization(T, "z", "Erfi"); #>
            return (-Complex.ImaginaryOne * Erf(Complex.ImaginaryOne * z))<#= asReal #>;
        }
<#+
}

void Optimization(string T, string z, string fn)
{
    if (T == "Complex")
    {
#>
            if (<#= z #>.Imaginary == 0) 
                return <#= fn #>(<#= z #>.Real);

<#+
    }
}
#>
