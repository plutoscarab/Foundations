<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

/*
MathExtensions.cs

<#@ include file="../../../License.txt" #>
*/

namespace Foundations.Functions
{
    /// <summary>
    /// Extension method wrappers for System.Math functions.
    /// </summary>
    public static partial class MathExtensions
    {
<#
    foreach (var method in typeof(Math).GetMethods().Where(m => m.IsStatic).OrderBy(m => m.Name))
    {
        var args = method.GetParameters();
        var paramList = new StringBuilder();
        var argList = new StringBuilder();
        var typeList = new StringBuilder();

        for (int i = 0; i < args.Length; i++)
        {
            if (i > 0) { paramList.Append(", "); argList.Append(", "); typeList.Append(", "); }
            if (args[i].IsOut) 
            {
                paramList.Append("out ");
                argList.Append("out ");
                typeList.Append("out ");
            }
            var argType = args[i].ParameterType.ToString().Replace("&", "");
            typeList.Append(argType);
            paramList.Append(argType + " " + args[i].Name);
            argList.Append(args[i].Name);
        }
#>
        /// <summary>
        /// Get the value of <see cref="System.Math.<#= method.Name #>(<#= typeList #>)"/> for this <see cref="<#= method.ReturnType #>"/> value.
        /// </summary>
        public static <#= method.ReturnType #> <#= method.Name #>(this <#= paramList #>)
        {
            return System.Math.<#= method.Name #>(<#= argList #>);
        }

<#
    }
#>
    }
}