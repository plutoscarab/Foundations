<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

/*
MathStatic.cs

<#@ include file="../../License.txt" #>
*/

using System;
using Foundations.Types;

namespace Foundations
{
<#
Make("Decimal", "M", 96);
Copy("Decimal", "M");
Wrap("Single", "static partial class", "MathF", "Double");
#>
}
<#+
void Copy(string T, string suffix)
{
#>
    /// <summary>
    /// Implementations of <see cref="System.Math"/> methods for <see cref="System.<#= T #>"/> arguments.
    /// </summary>
    public static partial class Math<#= suffix #>
    {
<#+
    foreach (var method in typeof(Math).GetMethods().Where(m => m.IsStatic).OrderBy(m => m.Name)
        .Where(m => m.GetParameters().Count() == 1 && m.GetParameters().First().ParameterType.Name == T))
    {
#>
        /// <summary>Copy of System.Math.<#= method.Name #> for class consistency.</summary>
        public static <#= T #> <#= method.Name #>(<#= T #> x) => Math.<#= method.Name #>(x);

<#+
    }
#>
    }

<#+
}

void Wrap(string T, string cls, string math, string from)
{
#>
    /// <summary>
    /// Implementations of <see cref="System.Math"/> methods for <see cref="<#= T #>"/> arguments.
    /// </summary>
    public <#= cls #> <#= math #>
    {
<#+
    foreach (var method in typeof(Math).GetMethods().Where(m => m.IsStatic).OrderBy(m => m.Name)
        .GroupBy(m => m.Name)
        .Where(m => m.Count() == 1 && m.First().GetParameters().Count() == 1 && m.First().GetParameters().First().ParameterType.Name == from))
    {
#>
        /// <summary><see cref="<#= T #>"/> wrapper for System.Math.<#= method.Key #>.</summary>
        public static <#= T #> <#= method.Key #>(<#= T #> x) => (<#= T #>)Math.<#= method.Key #>((double)x);

<#+
    }
#>
    }

    /// <summary>
    /// Extension methods to access <see cref="<#= math #>"/> methods.
    /// </summary>
    public static partial class MathExtensions
    {
<#+
    foreach (var method in typeof(Math).GetMethods().Where(m => m.IsStatic).OrderBy(m => m.Name)
        .GroupBy(m => m.Name)
        .Where(m => m.Count() == 1 && m.First().GetParameters().Count() == 1 && m.First().GetParameters().First().ParameterType.Name == from))
    {
#>
        /// <summary><#= method.Key #></summary>
        public static <#= T #> <#= method.Key #>(this <#= T #> x) => <#= math #>.<#= method.Key #>(x);

<#+
    }
#>
    }

<#+
}

void Make(string T, string suffix, int precision)
{
#>
    /// <summary>
    /// Implementations of <see cref="System.Math"/> methods for <see cref="System.<#= T #>"/> arguments.
    /// </summary>
    public static partial class Math<#= suffix #>
    {
        /// <summary>
        /// Square root.
        /// </summary>
        public static <#= T #> Sqrt(<#= T #> x)
        {
            if (x < 0<#= suffix #>) throw new ArgumentOutOfRangeException();
			var s = (<#= T #>)Math.Sqrt((double)x);
<#+ for (int i = 0; i < Math.Log(precision / 53, 2); i++) { #>
            s = (x / s + s) / 2<#= suffix #>;
<#+ } #>
			return (x / s + s) / 2<#= suffix #>;
        }
    }

    /// <summary>
    /// Extension methods to access <see cref="Math<#= suffix #>"/> methods.
    /// </summary>
    public static partial class MathExtensions
    {
        /// <summary>
        /// Square root.
        /// </summary>
        public static <#= T #> Sqrt(this <#= T #> x) => Math<#= suffix #>.Sqrt(x);
    }

<#+
}
#>