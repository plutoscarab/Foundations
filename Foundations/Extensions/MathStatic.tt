<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using Foundations.Types;

namespace Foundations
{
    public static partial class MathM
    {
        public static (decimal Scaled, int Log2) Log2Normalize(decimal x)
        {
            var log = (int)Math.Round(Math.Log2((double)x));
            x /= (decimal)Math.Pow(2.0, log);
            return (x, log);
        }
    }
<#
Make("Decimal", "M", 96);
Copy("Decimal", "M");
// Wrap("Single", "static partial class", "MathF", "Double");
Wrap("Half", "static partial class", "MathH", "Double");
#>
}
<#+
void Copy(string T, string suffix)
{
#>
    /// <summary>
    /// Implementations of <see cref="System.Math"/> methods for <see cref="System.<#= T #>"/> arguments.
    /// </summary>
    public static partial class Math<#= suffix #>
    {
<#+
    foreach (var method in typeof(Math).GetMethods().Where(m => m.IsStatic).OrderBy(m => m.Name)
        .Where(m => m.GetParameters().Count() == 1 && m.GetParameters().First().ParameterType.Name == T))
    {
#>
        /// <summary>Copy of System.Math.<#= method.Name #> for class consistency.</summary>
        public static <#= T #> <#= method.Name #>(<#= T #> x) => Math.<#= method.Name #>(x);

<#+
    }
#>
    }

<#+
}

void Wrap(string T, string cls, string math, string from)
{
#>
    /// <summary>
    /// Implementations of <see cref="System.Math"/> methods for <see cref="<#= T #>"/> arguments.
    /// </summary>
    public <#= cls #> <#= math #>
    {
<#+    
    foreach (var method in typeof(Math).GetMethods().Where(m => m.IsStatic).OrderBy(m => m.Name)
        .Where(m => m.GetParameters().Count() == 1 && m.GetParameters().First().ParameterType.Name == from))
    {
#>
        /// <summary><see cref="<#= T #>"/> wrapper for System.Math.<#= method.Name #>.</summary>
        public static <#= T #> <#= method.Name #>(<#= T #> x) => (<#= T #>)Math.<#= method.Name #>((double)x);

<#+
    }
#>
    }

    /// <summary>
    /// Extension methods to access <see cref="<#= math #>"/> methods.
    /// </summary>
    public static partial class MathExtensions
    {
<#+
    foreach (var method in typeof(Math).GetMethods().Where(m => m.IsStatic).OrderBy(m => m.Name)
        .GroupBy(m => m.Name)
        .Where(m => m.Count() == 1 && m.First().GetParameters().Count() == 1 && m.First().GetParameters().First().ParameterType.Name == from))
    {
#>
        /// <summary><#= method.Key #></summary>
        public static <#= T #> <#= method.Key #>(this <#= T #> x) => <#= math #>.<#= method.Key #>(x);

<#+
    }
#>
    }

<#+
}

void Make(string T, string suffix, int precision)
{
#>
    /// <summary>
    /// Implementations of <see cref="System.Math"/> methods for <see cref="System.<#= T #>"/> arguments.
    /// </summary>
    public static partial class Math<#= suffix #>
    {
        /// <summary>
        /// Square root.
        /// </summary>
        public static <#= T #> Sqrt(<#= T #> x)
        {
            ArgumentOutOfRangeException.ThrowIfLessThan(x, 0<#= suffix #>, nameof(x));
			var s = (<#= T #>)Math.Sqrt((double)x);
<#+ for (int i = 0; i < 1 + Math.Log(precision / 53, 2); i++) { #>
            s = (x / s + s) / 2<#= suffix #>;
<#+ } #>
			return (x / s + s) / 2<#= suffix #>;
        }

        public static <#= T #> Log(<#= T #> x)
        {
            ArgumentOutOfRangeException.ThrowIfLessThanOrEqual(x, 0<#= suffix #>, nameof(x));

            if (x == 1<#= suffix #>)
                return 0<#= suffix #>;

            (x, var e) = Math<#= suffix #>.Log2Normalize(x);
            var y = (x - 1<#= suffix #>) / (x + 1<#= suffix #>);
            var y2 = y * y;
            var num = 1<#= suffix #>;
            var den = 1<#= suffix #>;
            Sum<<#= T #>> sum = 1<#= suffix #>;

            while (true)
            {
                num *= y2;
                den += 2<#= suffix #>;
                var term = num / den;
                (var old, sum) = (sum, sum + term);

                if (old.Equals(sum))
                    break;
            }

            sum *= 2<#= suffix #> * y;
            sum += e * <#= T #>Constants.Ln2;
            return sum.Value;
        }

        public static <#= T #> Mod(<#= T #> x, <#= T #> y)
        {
            var div = Math<#= suffix #>.Floor(x / y);
            return x - y * div;
        }

        public static <#= T #> Sin(<#= T #> x)
        {
            var neg = x < 0<#= suffix #>;
            x = Math<#= suffix #>.Abs(x);
            x = Math<#= suffix #>.Mod(x, <#= T #>Constants.Twoπ);

            if (x > <#= T #>Constants.π)
            {
                neg = !neg;
                x -= <#= T #>Constants.π;
            }

            var xx = -(x * x);
            var num = x;
            var den = 1<#= suffix #>;
            var count = 1<#= suffix #>;
            Sum<<#= T #>> sum = x;

            while (true)
            {
                num *= xx;
                count += 1<#= suffix #>;
                den *= count;
                count += 1<#= suffix #>;
                den *= count;
                var term = num / den;
                sum += term;
                (var old, sum) = (sum, sum + term);

                if (old.Equals(sum))
                    break;
            }

            x = neg ? -sum.Value : sum.Value;
            return x;
        }

        public static <#= T #> Cos(<#= T #> x) => Sin(<#= T #>Constants.Halfπ - x);

        public static (<#= T #>, <#= T #>) SinCos(<#= T #> x)
        {
            var s = Sin(x);
            var c = Math<#= suffix #>.Sqrt(1 - s * s);
            x = Math<#= suffix #>.Mod(x, <#= T #>Constants.Twoπ);
            
            if (x > <#= T #>Constants.Halfπ && x < <#= T #>Constants.ThreeHalfπ)
                c = -c;

            return (s, c);
        }

        public static <#= T #> Tan(<#= T #> x)
        {
            var (s, c) = SinCos(x);
            return s / c;
        }
    }

    /// <summary>
    /// Extension methods to access <see cref="Math<#= suffix #>"/> methods.
    /// </summary>
    public static partial class MathExtensions
    {
        public static <#= T #> Sqrt(this <#= T #> x) => Math<#= suffix #>.Sqrt(x);
        public static <#= T #> Log(this <#= T #> x) => Math<#= suffix #>.Log(x);
        public static <#= T #> Sin(this <#= T #> x) => Math<#= suffix #>.Sin(x);
        public static <#= T #> Cos(this <#= T #> x) => Math<#= suffix #>.Cos(x);
        public static <#= T #> Tan(this <#= T #> x) => Math<#= suffix #>.Tan(x);
    }

<#+
}
#>